{
  "address": "0x1696f1aDb4091326fe0737718AD86388dE6654CD",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "Token6",
          "name": "usdc",
          "type": "address"
        },
        {
          "internalType": "Token18",
          "name": "dsu",
          "type": "address"
        },
        {
          "internalType": "contract IEmptySetReserve",
          "name": "reserve",
          "type": "address"
        },
        {
          "internalType": "contract IMarketFactory",
          "name": "marketFactory",
          "type": "address"
        },
        {
          "internalType": "contract IOrderVerifier",
          "name": "verifier",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "DivisionByZero",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Fixed6OverflowError",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "version",
          "type": "uint256"
        }
      ],
      "name": "InitializableAlreadyInitializedError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InitializableNotInitializingError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InitializableZeroVersionError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ManagerCannotCancelError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ManagerCannotExecuteError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ManagerInvalidOrderNonceError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ManagerInvalidSignerError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TriggerOrderInvalidError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TriggerOrderStorageInvalidError",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "int256",
          "name": "value",
          "type": "int256"
        }
      ],
      "name": "UFixed18UnderflowError",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "int256",
          "name": "value",
          "type": "int256"
        }
      ],
      "name": "UFixed6UnderflowError",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "version",
          "type": "uint256"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "applicableGas",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "applicableValue",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "UFixed18",
          "name": "baseFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "UFixed18",
          "name": "calldataFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "UFixed18",
          "name": "keeperFee",
          "type": "uint256"
        }
      ],
      "name": "KeeperCall",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract IMarket",
          "name": "market",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "orderId",
          "type": "uint256"
        }
      ],
      "name": "TriggerOrderCancelled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract IMarket",
          "name": "market",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "side",
              "type": "uint8"
            },
            {
              "internalType": "int8",
              "name": "comparison",
              "type": "int8"
            },
            {
              "internalType": "Fixed6",
              "name": "price",
              "type": "int256"
            },
            {
              "internalType": "Fixed6",
              "name": "delta",
              "type": "int256"
            },
            {
              "internalType": "UFixed6",
              "name": "maxFee",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "isSpent",
              "type": "bool"
            },
            {
              "internalType": "address",
              "name": "referrer",
              "type": "address"
            },
            {
              "components": [
                {
                  "internalType": "UFixed6",
                  "name": "amount",
                  "type": "uint256"
                },
                {
                  "internalType": "address",
                  "name": "receiver",
                  "type": "address"
                },
                {
                  "internalType": "bool",
                  "name": "fixedFee",
                  "type": "bool"
                },
                {
                  "internalType": "bool",
                  "name": "unwrap",
                  "type": "bool"
                }
              ],
              "internalType": "struct InterfaceFee",
              "name": "interfaceFee",
              "type": "tuple"
            }
          ],
          "indexed": false,
          "internalType": "struct TriggerOrder",
          "name": "order",
          "type": "tuple"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "orderId",
          "type": "uint256"
        }
      ],
      "name": "TriggerOrderExecuted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "contract IMarket",
          "name": "market",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "UFixed6",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "receiver",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "fixedFee",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "unwrap",
              "type": "bool"
            }
          ],
          "indexed": false,
          "internalType": "struct InterfaceFee",
          "name": "fee",
          "type": "tuple"
        }
      ],
      "name": "TriggerOrderInterfaceFeeCharged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract IMarket",
          "name": "market",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "side",
              "type": "uint8"
            },
            {
              "internalType": "int8",
              "name": "comparison",
              "type": "int8"
            },
            {
              "internalType": "Fixed6",
              "name": "price",
              "type": "int256"
            },
            {
              "internalType": "Fixed6",
              "name": "delta",
              "type": "int256"
            },
            {
              "internalType": "UFixed6",
              "name": "maxFee",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "isSpent",
              "type": "bool"
            },
            {
              "internalType": "address",
              "name": "referrer",
              "type": "address"
            },
            {
              "components": [
                {
                  "internalType": "UFixed6",
                  "name": "amount",
                  "type": "uint256"
                },
                {
                  "internalType": "address",
                  "name": "receiver",
                  "type": "address"
                },
                {
                  "internalType": "bool",
                  "name": "fixedFee",
                  "type": "bool"
                },
                {
                  "internalType": "bool",
                  "name": "unwrap",
                  "type": "bool"
                }
              ],
              "internalType": "struct InterfaceFee",
              "name": "interfaceFee",
              "type": "tuple"
            }
          ],
          "indexed": false,
          "internalType": "struct TriggerOrder",
          "name": "order",
          "type": "tuple"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "orderId",
          "type": "uint256"
        }
      ],
      "name": "TriggerOrderPlaced",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ARB_FIXED_OVERHEAD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ARB_GAS_MULTIPLIER",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DSU",
      "outputs": [
        {
          "internalType": "Token18",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "USDC",
      "outputs": [
        {
          "internalType": "Token6",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IMarket",
          "name": "market",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "orderId",
          "type": "uint256"
        }
      ],
      "name": "cancelOrder",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "contract IMarket",
                  "name": "market",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "orderId",
                  "type": "uint256"
                },
                {
                  "internalType": "UFixed6",
                  "name": "maxFee",
                  "type": "uint256"
                },
                {
                  "components": [
                    {
                      "internalType": "address",
                      "name": "account",
                      "type": "address"
                    },
                    {
                      "internalType": "address",
                      "name": "signer",
                      "type": "address"
                    },
                    {
                      "internalType": "address",
                      "name": "domain",
                      "type": "address"
                    },
                    {
                      "internalType": "uint256",
                      "name": "nonce",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "group",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "expiry",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct Common",
                  "name": "common",
                  "type": "tuple"
                }
              ],
              "internalType": "struct Action",
              "name": "action",
              "type": "tuple"
            }
          ],
          "internalType": "struct CancelOrderAction",
          "name": "request",
          "type": "tuple"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        }
      ],
      "name": "cancelOrderWithSignature",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IMarket",
          "name": "market",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "orderId",
          "type": "uint256"
        }
      ],
      "name": "checkOrder",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "side",
              "type": "uint8"
            },
            {
              "internalType": "int8",
              "name": "comparison",
              "type": "int8"
            },
            {
              "internalType": "Fixed6",
              "name": "price",
              "type": "int256"
            },
            {
              "internalType": "Fixed6",
              "name": "delta",
              "type": "int256"
            },
            {
              "internalType": "UFixed6",
              "name": "maxFee",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "isSpent",
              "type": "bool"
            },
            {
              "internalType": "address",
              "name": "referrer",
              "type": "address"
            },
            {
              "components": [
                {
                  "internalType": "UFixed6",
                  "name": "amount",
                  "type": "uint256"
                },
                {
                  "internalType": "address",
                  "name": "receiver",
                  "type": "address"
                },
                {
                  "internalType": "bool",
                  "name": "fixedFee",
                  "type": "bool"
                },
                {
                  "internalType": "bool",
                  "name": "unwrap",
                  "type": "bool"
                }
              ],
              "internalType": "struct InterfaceFee",
              "name": "interfaceFee",
              "type": "tuple"
            }
          ],
          "internalType": "struct TriggerOrder",
          "name": "order",
          "type": "tuple"
        },
        {
          "internalType": "bool",
          "name": "canExecute",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ethTokenOracleFeed",
      "outputs": [
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IMarket",
          "name": "market",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "orderId",
          "type": "uint256"
        }
      ],
      "name": "executeOrder",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "ethOracle_",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "UFixed18",
              "name": "multiplierBase",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "bufferBase",
              "type": "uint256"
            },
            {
              "internalType": "UFixed18",
              "name": "multiplierCalldata",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "bufferCalldata",
              "type": "uint256"
            }
          ],
          "internalType": "struct IKept.KeepConfig",
          "name": "keepConfig_",
          "type": "tuple"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "keepConfig",
      "outputs": [
        {
          "internalType": "UFixed18",
          "name": "multiplierBase",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "bufferBase",
          "type": "uint256"
        },
        {
          "internalType": "UFixed18",
          "name": "multiplierCalldata",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "bufferCalldata",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "keeperToken",
      "outputs": [
        {
          "internalType": "Token18",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "marketFactory",
      "outputs": [
        {
          "internalType": "contract IMarketFactory",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IMarket",
          "name": "market",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "orderId",
          "type": "uint256"
        }
      ],
      "name": "orders",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "side",
              "type": "uint8"
            },
            {
              "internalType": "int8",
              "name": "comparison",
              "type": "int8"
            },
            {
              "internalType": "Fixed6",
              "name": "price",
              "type": "int256"
            },
            {
              "internalType": "Fixed6",
              "name": "delta",
              "type": "int256"
            },
            {
              "internalType": "UFixed6",
              "name": "maxFee",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "isSpent",
              "type": "bool"
            },
            {
              "internalType": "address",
              "name": "referrer",
              "type": "address"
            },
            {
              "components": [
                {
                  "internalType": "UFixed6",
                  "name": "amount",
                  "type": "uint256"
                },
                {
                  "internalType": "address",
                  "name": "receiver",
                  "type": "address"
                },
                {
                  "internalType": "bool",
                  "name": "fixedFee",
                  "type": "bool"
                },
                {
                  "internalType": "bool",
                  "name": "unwrap",
                  "type": "bool"
                }
              ],
              "internalType": "struct InterfaceFee",
              "name": "interfaceFee",
              "type": "tuple"
            }
          ],
          "internalType": "struct TriggerOrder",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IMarket",
          "name": "market",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "orderId",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "side",
              "type": "uint8"
            },
            {
              "internalType": "int8",
              "name": "comparison",
              "type": "int8"
            },
            {
              "internalType": "Fixed6",
              "name": "price",
              "type": "int256"
            },
            {
              "internalType": "Fixed6",
              "name": "delta",
              "type": "int256"
            },
            {
              "internalType": "UFixed6",
              "name": "maxFee",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "isSpent",
              "type": "bool"
            },
            {
              "internalType": "address",
              "name": "referrer",
              "type": "address"
            },
            {
              "components": [
                {
                  "internalType": "UFixed6",
                  "name": "amount",
                  "type": "uint256"
                },
                {
                  "internalType": "address",
                  "name": "receiver",
                  "type": "address"
                },
                {
                  "internalType": "bool",
                  "name": "fixedFee",
                  "type": "bool"
                },
                {
                  "internalType": "bool",
                  "name": "unwrap",
                  "type": "bool"
                }
              ],
              "internalType": "struct InterfaceFee",
              "name": "interfaceFee",
              "type": "tuple"
            }
          ],
          "internalType": "struct TriggerOrder",
          "name": "order",
          "type": "tuple"
        }
      ],
      "name": "placeOrder",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "uint8",
                  "name": "side",
                  "type": "uint8"
                },
                {
                  "internalType": "int8",
                  "name": "comparison",
                  "type": "int8"
                },
                {
                  "internalType": "Fixed6",
                  "name": "price",
                  "type": "int256"
                },
                {
                  "internalType": "Fixed6",
                  "name": "delta",
                  "type": "int256"
                },
                {
                  "internalType": "UFixed6",
                  "name": "maxFee",
                  "type": "uint256"
                },
                {
                  "internalType": "bool",
                  "name": "isSpent",
                  "type": "bool"
                },
                {
                  "internalType": "address",
                  "name": "referrer",
                  "type": "address"
                },
                {
                  "components": [
                    {
                      "internalType": "UFixed6",
                      "name": "amount",
                      "type": "uint256"
                    },
                    {
                      "internalType": "address",
                      "name": "receiver",
                      "type": "address"
                    },
                    {
                      "internalType": "bool",
                      "name": "fixedFee",
                      "type": "bool"
                    },
                    {
                      "internalType": "bool",
                      "name": "unwrap",
                      "type": "bool"
                    }
                  ],
                  "internalType": "struct InterfaceFee",
                  "name": "interfaceFee",
                  "type": "tuple"
                }
              ],
              "internalType": "struct TriggerOrder",
              "name": "order",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "contract IMarket",
                  "name": "market",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "orderId",
                  "type": "uint256"
                },
                {
                  "internalType": "UFixed6",
                  "name": "maxFee",
                  "type": "uint256"
                },
                {
                  "components": [
                    {
                      "internalType": "address",
                      "name": "account",
                      "type": "address"
                    },
                    {
                      "internalType": "address",
                      "name": "signer",
                      "type": "address"
                    },
                    {
                      "internalType": "address",
                      "name": "domain",
                      "type": "address"
                    },
                    {
                      "internalType": "uint256",
                      "name": "nonce",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "group",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "expiry",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct Common",
                  "name": "common",
                  "type": "tuple"
                }
              ],
              "internalType": "struct Action",
              "name": "action",
              "type": "tuple"
            }
          ],
          "internalType": "struct PlaceOrderAction",
          "name": "request",
          "type": "tuple"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        }
      ],
      "name": "placeOrderWithSignature",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "reserve",
      "outputs": [
        {
          "internalType": "contract IEmptySetReserve",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "verifier",
      "outputs": [
        {
          "internalType": "contract IOrderVerifier",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x5ffcd5c3e0054a726907ea4e8aa72c0da4ac765116235829be16eec9674c37ea",
  "receipt": {
    "to": null,
    "from": "0x66a7fDB96C583c59597de16d8b2B989231415339",
    "contractAddress": "0x1696f1aDb4091326fe0737718AD86388dE6654CD",
    "transactionIndex": 1,
    "gasUsed": "5372522",
    "logsBloom": "0x
    "blockHash": "0x8c6b0d18040dadc79acf16bdb83ce25e782d87989a10981b2e9142ad34504c84",
    "transactionHash": "0x5ffcd5c3e0054a726907ea4e8aa72c0da4ac765116235829be16eec9674c37ea",
    "logs": [],
    "blockNumber": 81201585,
    "cumulativeGasUsed": "5372522",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x16b38364bA6f55B6E150cC7f52D22E89643f3535",
    "0x5FA881826AD000D010977645450292701bc2f56D",
    "0x841d7C994aC0Bb17CcD65a021E686e3cFafE2118",
    "0x32F3aB7b3c5BBa0738b72FdB83FcE6bb1a1a943c",
    "0x04e570a5Ef49b3Dc79a01A9552B803110a3F5e6b"
  ],
  "numDeployments": 1,
  "solcInputHash": "08e85383631ef4a06416ac5e831b0baf",
  "metadata": "{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"Token6\",\"name\":\"usdc\",\"type\":\"address\"},{\"internalType\":\"Token18\",\"name\":\"dsu\",\"type\":\"address\"},{\"internalType\":\"contract IEmptySetReserve\",\"name\":\"reserve\",\"type\":\"address\"},{\"internalType\":\"contract IMarketFactory\",\"name\":\"marketFactory\",\"type\":\"address\"},{\"internalType\":\"contract IOrderVerifier\",\"name\":\"verifier\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"DivisionByZero\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Fixed6OverflowError\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"version\",\"type\":\"uint256\"}],\"name\":\"InitializableAlreadyInitializedError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InitializableNotInitializingError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InitializableZeroVersionError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ManagerCannotCancelError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ManagerCannotExecuteError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ManagerInvalidOrderNonceError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ManagerInvalidSignerError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TriggerOrderInvalidError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TriggerOrderStorageInvalidError\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"value\",\"type\":\"int256\"}],\"name\":\"UFixed18UnderflowError\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"value\",\"type\":\"int256\"}],\"name\":\"UFixed6UnderflowError\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"version\",\"type\":\"uint256\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"applicableGas\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"applicableValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"UFixed18\",\"name\":\"baseFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"UFixed18\",\"name\":\"calldataFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"UFixed18\",\"name\":\"keeperFee\",\"type\":\"uint256\"}],\"name\":\"KeeperCall\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IMarket\",\"name\":\"market\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"}],\"name\":\"TriggerOrderCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IMarket\",\"name\":\"market\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"side\",\"type\":\"uint8\"},{\"internalType\":\"int8\",\"name\":\"comparison\",\"type\":\"int8\"},{\"internalType\":\"Fixed6\",\"name\":\"price\",\"type\":\"int256\"},{\"internalType\":\"Fixed6\",\"name\":\"delta\",\"type\":\"int256\"},{\"internalType\":\"UFixed6\",\"name\":\"maxFee\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isSpent\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"UFixed6\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"fixedFee\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"unwrap\",\"type\":\"bool\"}],\"internalType\":\"struct InterfaceFee\",\"name\":\"interfaceFee\",\"type\":\"tuple\"}],\"indexed\":false,\"internalType\":\"struct TriggerOrder\",\"name\":\"order\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"}],\"name\":\"TriggerOrderExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract IMarket\",\"name\":\"market\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"UFixed6\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"fixedFee\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"unwrap\",\"type\":\"bool\"}],\"indexed\":false,\"internalType\":\"struct InterfaceFee\",\"name\":\"fee\",\"type\":\"tuple\"}],\"name\":\"TriggerOrderInterfaceFeeCharged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IMarket\",\"name\":\"market\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"side\",\"type\":\"uint8\"},{\"internalType\":\"int8\",\"name\":\"comparison\",\"type\":\"int8\"},{\"internalType\":\"Fixed6\",\"name\":\"price\",\"type\":\"int256\"},{\"internalType\":\"Fixed6\",\"name\":\"delta\",\"type\":\"int256\"},{\"internalType\":\"UFixed6\",\"name\":\"maxFee\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isSpent\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"UFixed6\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"fixedFee\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"unwrap\",\"type\":\"bool\"}],\"internalType\":\"struct InterfaceFee\",\"name\":\"interfaceFee\",\"type\":\"tuple\"}],\"indexed\":false,\"internalType\":\"struct TriggerOrder\",\"name\":\"order\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"}],\"name\":\"TriggerOrderPlaced\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ARB_FIXED_OVERHEAD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ARB_GAS_MULTIPLIER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DSU\",\"outputs\":[{\"internalType\":\"Token18\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USDC\",\"outputs\":[{\"internalType\":\"Token6\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IMarket\",\"name\":\"market\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"}],\"name\":\"cancelOrder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"contract IMarket\",\"name\":\"market\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"},{\"internalType\":\"UFixed6\",\"name\":\"maxFee\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"domain\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"group\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"}],\"internalType\":\"struct Common\",\"name\":\"common\",\"type\":\"tuple\"}],\"internalType\":\"struct Action\",\"name\":\"action\",\"type\":\"tuple\"}],\"internalType\":\"struct CancelOrderAction\",\"name\":\"request\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"cancelOrderWithSignature\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IMarket\",\"name\":\"market\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"}],\"name\":\"checkOrder\",\"outputs\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"side\",\"type\":\"uint8\"},{\"internalType\":\"int8\",\"name\":\"comparison\",\"type\":\"int8\"},{\"internalType\":\"Fixed6\",\"name\":\"price\",\"type\":\"int256\"},{\"internalType\":\"Fixed6\",\"name\":\"delta\",\"type\":\"int256\"},{\"internalType\":\"UFixed6\",\"name\":\"maxFee\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isSpent\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"UFixed6\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"fixedFee\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"unwrap\",\"type\":\"bool\"}],\"internalType\":\"struct InterfaceFee\",\"name\":\"interfaceFee\",\"type\":\"tuple\"}],\"internalType\":\"struct TriggerOrder\",\"name\":\"order\",\"type\":\"tuple\"},{\"internalType\":\"bool\",\"name\":\"canExecute\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ethTokenOracleFeed\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IMarket\",\"name\":\"market\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"}],\"name\":\"executeOrder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"ethOracle_\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"UFixed18\",\"name\":\"multiplierBase\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bufferBase\",\"type\":\"uint256\"},{\"internalType\":\"UFixed18\",\"name\":\"multiplierCalldata\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bufferCalldata\",\"type\":\"uint256\"}],\"internalType\":\"struct IKept.KeepConfig\",\"name\":\"keepConfig_\",\"type\":\"tuple\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"keepConfig\",\"outputs\":[{\"internalType\":\"UFixed18\",\"name\":\"multiplierBase\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bufferBase\",\"type\":\"uint256\"},{\"internalType\":\"UFixed18\",\"name\":\"multiplierCalldata\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bufferCalldata\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"keeperToken\",\"outputs\":[{\"internalType\":\"Token18\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketFactory\",\"outputs\":[{\"internalType\":\"contract IMarketFactory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IMarket\",\"name\":\"market\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"}],\"name\":\"orders\",\"outputs\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"side\",\"type\":\"uint8\"},{\"internalType\":\"int8\",\"name\":\"comparison\",\"type\":\"int8\"},{\"internalType\":\"Fixed6\",\"name\":\"price\",\"type\":\"int256\"},{\"internalType\":\"Fixed6\",\"name\":\"delta\",\"type\":\"int256\"},{\"internalType\":\"UFixed6\",\"name\":\"maxFee\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isSpent\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"UFixed6\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"fixedFee\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"unwrap\",\"type\":\"bool\"}],\"internalType\":\"struct InterfaceFee\",\"name\":\"interfaceFee\",\"type\":\"tuple\"}],\"internalType\":\"struct TriggerOrder\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IMarket\",\"name\":\"market\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"side\",\"type\":\"uint8\"},{\"internalType\":\"int8\",\"name\":\"comparison\",\"type\":\"int8\"},{\"internalType\":\"Fixed6\",\"name\":\"price\",\"type\":\"int256\"},{\"internalType\":\"Fixed6\",\"name\":\"delta\",\"type\":\"int256\"},{\"internalType\":\"UFixed6\",\"name\":\"maxFee\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isSpent\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"UFixed6\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"fixedFee\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"unwrap\",\"type\":\"bool\"}],\"internalType\":\"struct InterfaceFee\",\"name\":\"interfaceFee\",\"type\":\"tuple\"}],\"internalType\":\"struct TriggerOrder\",\"name\":\"order\",\"type\":\"tuple\"}],\"name\":\"placeOrder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"side\",\"type\":\"uint8\"},{\"internalType\":\"int8\",\"name\":\"comparison\",\"type\":\"int8\"},{\"internalType\":\"Fixed6\",\"name\":\"price\",\"type\":\"int256\"},{\"internalType\":\"Fixed6\",\"name\":\"delta\",\"type\":\"int256\"},{\"internalType\":\"UFixed6\",\"name\":\"maxFee\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isSpent\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"UFixed6\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"fixedFee\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"unwrap\",\"type\":\"bool\"}],\"internalType\":\"struct InterfaceFee\",\"name\":\"interfaceFee\",\"type\":\"tuple\"}],\"internalType\":\"struct TriggerOrder\",\"name\":\"order\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"contract IMarket\",\"name\":\"market\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"},{\"internalType\":\"UFixed6\",\"name\":\"maxFee\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"domain\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"group\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"}],\"internalType\":\"struct Common\",\"name\":\"common\",\"type\":\"tuple\"}],\"internalType\":\"struct Action\",\"name\":\"action\",\"type\":\"tuple\"}],\"internalType\":\"struct PlaceOrderAction\",\"name\":\"request\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"placeOrderWithSignature\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reserve\",\"outputs\":[{\"internalType\":\"contract IEmptySetReserve\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"verifier\",\"outputs\":[{\"internalType\":\"contract IOrderVerifier\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"ManagerCannotCancelError()\":[{\"custom:error\":\"Order does not exist or was already cancelled or executed\"}],\"ManagerCannotExecuteError()\":[{\"custom:error\":\"Conditions required for order execution are not currently met\"}],\"ManagerInvalidOrderNonceError()\":[{\"custom:error\":\"Order nonce has already been used\"}],\"ManagerInvalidSignerError()\":[{\"custom:error\":\"Signer is not authorized to interact with markets for the specified user\"}],\"TriggerOrderInvalidError()\":[{\"custom:error\":\"side or comparison is not supported\"}],\"TriggerOrderStorageInvalidError()\":[{\"custom:error\":\"price, delta, maxFee, or interface fee amount is out-of-bounds\"}]},\"events\":{\"TriggerOrderCancelled(address,address,uint256)\":{\"params\":{\"account\":\"Actor whose order was cancelled\",\"market\":\"Perennial market for which the order was intended\",\"orderId\":\"Uniquely identifies the cancelled order\"}},\"TriggerOrderExecuted(address,address,(uint8,int8,int256,int256,uint256,bool,address,(uint256,address,bool,bool)),uint256)\":{\"params\":{\"account\":\"Actor whose position was changed\",\"market\":\"Perennial market which the order affected\",\"order\":\"Change in position and conditions which were satisfied\",\"orderId\":\"Uniquely identifies the executed order\"}},\"TriggerOrderInterfaceFeeCharged(address,address,(uint256,address,bool,bool))\":{\"params\":{\"account\":\"Actor who paid the fee\",\"fee\":\"Details including the fee amount and recipient of the fee\",\"market\":\"Perennial market from which the fee was pulled\"}},\"TriggerOrderPlaced(address,address,(uint8,int8,int256,int256,uint256,bool,address,(uint256,address,bool,bool)),uint256)\":{\"params\":{\"account\":\"Actor who wants to change their position in the market\",\"market\":\"Perennial market for which the order is intended\",\"order\":\"Desired change in position and conditions upon which change may be made\",\"orderId\":\"Client-supplied order identifier, unique to client\"}}},\"kind\":\"dev\",\"methods\":{\"cancelOrder(address,uint256)\":{\"params\":{\"market\":\"Perennial market for which the order was submitted\",\"orderId\":\"Uniquely identifies the order to cancel\"}},\"cancelOrderWithSignature(((address,uint256,uint256,(address,address,address,uint256,uint256,uint256))),bytes)\":{\"params\":{\"request\":\"Message containing the market, order, and nonce used to uniquely identify the order to cancel\",\"signature\":\"EIP712 message signature\"}},\"checkOrder(address,address,uint256)\":{\"params\":{\"account\":\"Actor whose position is to be changed\",\"market\":\"Perennial market for which the order is intended\",\"orderId\":\"Uniquely identifies the order for an account\"},\"returns\":{\"canExecute\":\"True if trigger conditions have been met and executeOrder may be called on the order\",\"order\":\"Trigger order read from storage\"}},\"constructor\":{\"details\":\"passthrough constructor\"},\"executeOrder(address,address,uint256)\":{\"params\":{\"account\":\"Actor whose position is to be changed\",\"market\":\"Perennial market for which the order is intended\",\"orderId\":\"Uniquely identifies the order for an account\"}},\"initialize(address,(uint256,uint256,uint256,uint256))\":{\"params\":{\"ethOracle_\":\"Chainlink ETH/USD oracle used for keeper compensation\",\"keepConfig_\":\"Keeper compensation configuration\"}},\"orders(address,address,uint256)\":{\"params\":{\"account\":\"User for whom the order was submitted\",\"market\":\"Perennial market for which the order was submitted\",\"orderId\":\"Uniquely identifies the order for a user\"}},\"placeOrder(address,uint256,(uint8,int8,int256,int256,uint256,bool,address,(uint256,address,bool,bool)))\":{\"params\":{\"market\":\"Perennial market in which user wants to change their position\",\"order\":\"Desired change in position and conditions upon which change may be made\",\"orderId\":\"Client-specific order identifier\"}},\"placeOrderWithSignature(((uint8,int8,int256,int256,uint256,bool,address,(uint256,address,bool,bool)),(address,uint256,uint256,(address,address,address,uint256,uint256,uint256))),bytes)\":{\"params\":{\"request\":\"Message containing the market, order, and nonce used to uniquely identify the user's order.\",\"signature\":\"EIP712 message signature\"}}},\"version\":1},\"userdoc\":{\"events\":{\"TriggerOrderCancelled(address,address,uint256)\":{\"notice\":\"Emitted when an order has been cancelled\"},\"TriggerOrderExecuted(address,address,(uint8,int8,int256,int256,uint256,bool,address,(uint256,address,bool,bool)),uint256)\":{\"notice\":\"Emitted when a trigger orders conditions have been met and the user's position has been updated\"},\"TriggerOrderInterfaceFeeCharged(address,address,(uint256,address,bool,bool))\":{\"notice\":\"Emitted when an interface fee specified on a trigger order has been paid\"},\"TriggerOrderPlaced(address,address,(uint8,int8,int256,int256,uint256,bool,address,(uint256,address,bool,bool)),uint256)\":{\"notice\":\"Emitted when a trigger order is written to storage, whether as a new order or a replacement\"}},\"kind\":\"user\",\"methods\":{\"cancelOrder(address,uint256)\":{\"notice\":\"Cancels a trigger order\"},\"cancelOrderWithSignature(((address,uint256,uint256,(address,address,address,uint256,uint256,uint256))),bytes)\":{\"notice\":\"Called by keeper to cancel a trigger order via a signed message\"},\"checkOrder(address,address,uint256)\":{\"notice\":\"Determines whether trigger conditions for an order have been met\"},\"executeOrder(address,address,uint256)\":{\"notice\":\"Called by keeper to execute an order whose trigger conditions have been met\"},\"initialize(address,(uint256,uint256,uint256,uint256))\":{\"notice\":\"Initialize the contract\"},\"orders(address,address,uint256)\":{\"notice\":\"Retrieves an unexecuted trigger order\"},\"placeOrder(address,uint256,(uint8,int8,int256,int256,uint256,bool,address,(uint256,address,bool,bool)))\":{\"notice\":\"Store a new trigger order or replace an existing trigger order\"},\"placeOrderWithSignature(((uint8,int8,int256,int256,uint256,bool,address,(uint256,address,bool,bool)),(address,uint256,uint256,(address,address,address,uint256,uint256,uint256))),bytes)\":{\"notice\":\"Called by keeper to store a new or replace an existing trigger order via a signed message\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@equilibria/perennial-v2-order/contracts/Manager_Arbitrum.sol\":\"Manager_Arbitrum\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000000},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0xf2b6c9adb3552254df1445b73563cf014434ff5e78663e9b961b6c059506ceb5\",\"license\":\"MIT\"},\"@equilibria/emptyset-batcher/interfaces/IEmptySetReserve.sol\":{\"content\":\"//SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.13;\\n\\nimport \\\"@equilibria/root/number/types/UFixed18.sol\\\";\\n\\ninterface IEmptySetReserve {\\n    event Redeem(address indexed account, uint256 costAmount, uint256 redeemAmount);\\n    event Mint(address indexed account, uint256 mintAmount, uint256 costAmount);\\n    event Repay(address indexed account, uint256 repayAmount);\\n\\n    function debt(address borrower) external view returns (UFixed18);\\n    function repay(address borrower, UFixed18 amount) external;\\n    function mint(UFixed18 amount) external;\\n    function redeem(UFixed18 amount) external;\\n}\\n\",\"keccak256\":\"0xdb96e26082a471c7803e892ecd8d2877f23cd9e31f13a3e407dd5f8909078864\",\"license\":\"Apache-2.0\"},\"@equilibria/perennial-v2-order/contracts/Manager.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.13;\\n\\nimport { IEmptySetReserve } from \\\"@equilibria/emptyset-batcher/interfaces/IEmptySetReserve.sol\\\";\\nimport { AggregatorV3Interface, Kept, Token18 } from \\\"@equilibria/root/attribute/Kept/Kept.sol\\\";\\nimport { Fixed6, Fixed6Lib } from \\\"@equilibria/root/number/types/Fixed6.sol\\\";\\nimport { UFixed6, UFixed6Lib } from \\\"@equilibria/root/number/types/UFixed6.sol\\\";\\nimport { UFixed18, UFixed18Lib } from \\\"@equilibria/root/number/types/UFixed18.sol\\\";\\nimport { Token6 } from \\\"@equilibria/root/token/types/Token6.sol\\\";\\nimport { IMarket, IMarketFactory } from \\\"@equilibria/perennial-v2/contracts/interfaces/IMarketFactory.sol\\\";\\n\\nimport { IManager } from \\\"./interfaces/IManager.sol\\\";\\nimport { IOrderVerifier } from \\\"./interfaces/IOrderVerifier.sol\\\";\\nimport { Action } from \\\"./types/Action.sol\\\";\\nimport { CancelOrderAction } from \\\"./types/CancelOrderAction.sol\\\";\\nimport { InterfaceFee } from \\\"./types/InterfaceFee.sol\\\";\\nimport { TriggerOrder, TriggerOrderStorage } from \\\"./types/TriggerOrder.sol\\\";\\nimport { PlaceOrderAction } from \\\"./types/PlaceOrderAction.sol\\\";\\n\\n/// @notice Base class with business logic to store and execute trigger orders.\\n///         Derived implementations created as appropriate for different chains.\\nabstract contract Manager is IManager, Kept {\\n    /// @dev USDC stablecoin address\\n    Token6 public immutable USDC; // solhint-disable-line var-name-mixedcase\\n\\n    /// @dev Digital Standard Unit token used for keeper compensation\\n    Token18 public immutable DSU; // solhint-disable-line var-name-mixedcase\\n\\n    /// @dev DSU Reserve address\\n    IEmptySetReserve public immutable reserve;\\n\\n    /// @dev Configuration used for keeper compensation\\n    KeepConfig public keepConfig;\\n\\n    /// @dev Contract used to validate delegated signers\\n    IMarketFactory public marketFactory;\\n\\n    /// @dev Verifies EIP712 messages for this extension\\n    IOrderVerifier public verifier;\\n\\n    /// @dev Stores trigger orders while awaiting their conditions to become true\\n    /// Market => Account => Nonce => Order\\n    mapping(IMarket => mapping(address => mapping(uint256 => TriggerOrderStorage))) private _orders;\\n\\n    /// @dev Creates an instance\\n    /// @param dsu_ Digital Standard Unit stablecoin\\n    /// @param marketFactory_ Contract used to validate delegated signers\\n    constructor(\\n        Token6 usdc_,\\n        Token18 dsu_,\\n        IEmptySetReserve reserve_,\\n        IMarketFactory marketFactory_,\\n        IOrderVerifier verifier_\\n    ) {\\n        USDC = usdc_;\\n        DSU = dsu_;\\n        reserve = reserve_;\\n        marketFactory = marketFactory_;\\n        verifier = verifier_;\\n    }\\n\\n    /// @notice Initialize the contract\\n    /// @param ethOracle_ Chainlink ETH/USD oracle used for keeper compensation\\n    /// @param keepConfig_ Keeper compensation configuration\\n    function initialize(\\n        AggregatorV3Interface ethOracle_,\\n        KeepConfig memory keepConfig_\\n    ) external initializer(1) {\\n        __Kept__initialize(ethOracle_, DSU);\\n        keepConfig = keepConfig_;\\n        // allows DSU to unwrap to USDC\\n        DSU.approve(address(reserve));\\n    }\\n\\n    /// @inheritdoc IManager\\n    function placeOrder(IMarket market, uint256 orderId, TriggerOrder calldata order) external {\\n        _placeOrder(market, msg.sender, orderId, order);\\n    }\\n\\n    /// @inheritdoc IManager\\n    function placeOrderWithSignature(PlaceOrderAction calldata request, bytes calldata signature) external {\\n        // ensure the message was signed by the owner or a delegated signer\\n        verifier.verifyPlaceOrder(request, signature);\\n        _ensureValidSigner(request.action.common.account, request.action.common.signer);\\n\\n        _compensateKeeperAction(request.action);\\n        _placeOrder(request.action.market, request.action.common.account, request.action.orderId, request.order);\\n    }\\n\\n    /// @inheritdoc IManager\\n    function cancelOrder(IMarket market, uint256 orderId) external {\\n        _cancelOrder(market, msg.sender, orderId);\\n    }\\n\\n    /// @inheritdoc IManager\\n    function cancelOrderWithSignature(CancelOrderAction calldata request, bytes calldata signature) external {\\n        // ensure the message was signed by the owner or a delegated signer\\n        verifier.verifyCancelOrder(request, signature);\\n        _ensureValidSigner(request.action.common.account, request.action.common.signer);\\n\\n        _compensateKeeperAction(request.action);\\n        _cancelOrder(request.action.market, request.action.common.account, request.action.orderId);\\n    }\\n\\n    /// @inheritdoc IManager\\n    function orders(IMarket market, address account, uint256 orderId) external view returns (TriggerOrder memory) {\\n        return _orders[market][account][orderId].read();\\n    }\\n\\n    /// @inheritdoc IManager\\n    function checkOrder(\\n        IMarket market,\\n        address account,\\n        uint256 orderId\\n    ) public view returns (TriggerOrder memory order, bool canExecute) {\\n        order = _orders[market][account][orderId].read();\\n        // prevent calling canExecute on a spent or empty order\\n        if (order.isSpent || order.isEmpty()) revert ManagerInvalidOrderNonceError();\\n        canExecute = order.canExecute(market.oracle().latest());\\n    }\\n\\n    /// @inheritdoc IManager\\n    function executeOrder(IMarket market, address account, uint256 orderId) external {\\n        // check conditions to ensure order is executable\\n        (TriggerOrder memory order, bool canExecute) = checkOrder(market, account, orderId);\\n        if (!canExecute) revert ManagerCannotExecuteError();\\n\\n        _compensateKeeper(market, account, order.maxFee);\\n        order.execute(market, account);\\n        bool interfaceFeeCharged = _chargeInterfaceFee(market, account, order);\\n\\n        // invalidate the order nonce\\n        order.isSpent = true;\\n        _orders[market][account][orderId].store(order);\\n\\n        emit TriggerOrderExecuted(market, account, order, orderId);\\n        if (interfaceFeeCharged) emit TriggerOrderInterfaceFeeCharged(account, market, order.interfaceFee);\\n    }\\n\\n    /// @notice reads keeper compensation parameters from an action message\\n    function _compensateKeeperAction(Action calldata action) internal {\\n        _compensateKeeper(action.market, action.common.account, action.maxFee);\\n    }\\n\\n    /// @notice encodes data needed to pull DSU from market to pay keeper for fulfilling requests\\n    function _compensateKeeper(IMarket market, address account, UFixed6 maxFee) internal {\\n        bytes memory data = abi.encode(market, account, maxFee);\\n        _handleKeeperFee(keepConfig, 0, msg.data[0:0], 0, data);\\n    }\\n\\n    /// @notice reverts if user is not authorized to sign transactions for the account\\n    function _ensureValidSigner(address account, address signer) internal view {\\n        if (account != signer && !marketFactory.signers(account, signer)) revert ManagerInvalidSignerError();\\n    }\\n\\n    /// @notice Transfers DSU from market to manager to compensate keeper\\n    /// @param amount Keeper fee as calculated\\n    /// @param data Identifies the market from and user for which funds should be withdrawn,\\n    ///             and the user-defined fee cap\\n    /// @return Amount of funds transferred from market to manager\\n    function _raiseKeeperFee(\\n        UFixed18 amount,\\n        bytes memory data\\n    ) internal virtual override returns (UFixed18) {\\n        (IMarket market, address account, UFixed6 maxFee) = abi.decode(data, (IMarket, address, UFixed6));\\n        UFixed6 raisedKeeperFee = UFixed6Lib.from(amount, true).min(maxFee);\\n\\n        _marketWithdraw(market, account, raisedKeeperFee);\\n\\n        return UFixed18Lib.from(raisedKeeperFee);\\n    }\\n\\n    function _cancelOrder(IMarket market, address account, uint256 orderId) private {\\n        // ensure this order wasn't already executed/cancelled\\n        TriggerOrder memory order = _orders[market][account][orderId].read();\\n        if (order.isEmpty() || order.isSpent) revert ManagerCannotCancelError();\\n\\n        // invalidate the order nonce\\n        order.isSpent = true;\\n        _orders[market][account][orderId].store(order);\\n\\n        emit TriggerOrderCancelled(market, account, orderId);\\n    }\\n\\n    /// @notice Transfers DSU from market to manager to pay interface fee\\n    function _chargeInterfaceFee(IMarket market, address account, TriggerOrder memory order) internal returns (bool) {\\n        if (order.interfaceFee.amount.isZero()) return false;\\n\\n        // determine amount of fee to charge\\n        UFixed6 feeAmount = order.interfaceFee.fixedFee ?\\n            order.interfaceFee.amount :\\n            order.notionalValue(market, account).mul(order.interfaceFee.amount);\\n\\n        _marketWithdraw(market, account, feeAmount);\\n\\n        if (order.interfaceFee.unwrap) _unwrapAndWithdaw(order.interfaceFee.receiver, UFixed18Lib.from(feeAmount));\\n        else DSU.push(order.interfaceFee.receiver, UFixed18Lib.from(feeAmount));\\n\\n        return true;\\n    }\\n\\n    /// @notice Transfers DSU from market to manager to pay keeper or interface fee\\n    function _marketWithdraw(IMarket market, address account, UFixed6 amount) private {\\n        market.update(account, UFixed6Lib.MAX, UFixed6Lib.MAX, UFixed6Lib.MAX, Fixed6Lib.from(-1, amount), false);\\n    }\\n\\n    function _placeOrder(IMarket market, address account, uint256 orderId, TriggerOrder calldata order) private {\\n        // prevent user from reusing an order identifier\\n        TriggerOrder memory old = _orders[market][account][orderId].read();\\n        if (old.isSpent) revert ManagerInvalidOrderNonceError();\\n\\n        _orders[market][account][orderId].store(order);\\n        emit TriggerOrderPlaced(market, account, order, orderId);\\n    }\\n\\n    /// @notice Unwraps DSU to USDC and pushes to interface fee receiver\\n    function _unwrapAndWithdaw(address receiver, UFixed18 amount) private {\\n        reserve.redeem(amount);\\n        USDC.push(receiver, UFixed6Lib.from(amount));\\n    }\\n}\\n\",\"keccak256\":\"0x942db133edba97bf8c33af6049d4fb0efc32e69a93adf4b2e5c316a83bfed379\",\"license\":\"Apache-2.0\"},\"@equilibria/perennial-v2-order/contracts/Manager_Arbitrum.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.24;\\n\\nimport { IEmptySetReserve } from \\\"@equilibria/emptyset-batcher/interfaces/IEmptySetReserve.sol\\\";\\nimport { Kept, Kept_Arbitrum, Token18, UFixed18 } from \\\"@equilibria/root/attribute/Kept/Kept_Arbitrum.sol\\\";\\nimport { Token6 } from \\\"@equilibria/root/token/types/Token6.sol\\\";\\nimport { IMarketFactory } from \\\"@equilibria/perennial-v2/contracts/interfaces/IMarketFactory.sol\\\";\\n\\nimport { IOrderVerifier, Manager } from \\\"./Manager.sol\\\";\\n\\ncontract Manager_Arbitrum is Manager, Kept_Arbitrum {\\n    /// @dev passthrough constructor\\n    constructor(\\n        Token6 usdc,\\n        Token18 dsu,\\n        IEmptySetReserve reserve,\\n        IMarketFactory marketFactory,\\n        IOrderVerifier verifier\\n    )\\n        Manager(usdc, dsu, reserve, marketFactory, verifier) {}\\n\\n    /// @dev Use the Kept_Arbitrum implementation for calculating the dynamic fee\\n    function _calldataFee(\\n        bytes memory applicableCalldata,\\n        UFixed18 multiplierCalldata,\\n        uint256 bufferCalldata\\n    ) internal view override(Kept_Arbitrum, Kept) returns (UFixed18) {\\n        return Kept_Arbitrum._calldataFee(applicableCalldata, multiplierCalldata, bufferCalldata);\\n    }\\n\\n    /// @dev Use the base implementation for raising the keeper fee\\n    function _raiseKeeperFee(\\n        UFixed18 amount,\\n        bytes memory data\\n    ) internal override(Manager, Kept) returns (UFixed18) {\\n        return Manager._raiseKeeperFee(amount, data);\\n    }\\n}\\n\",\"keccak256\":\"0x4fe5b8c8ec7b63cda948e3f632385229a28de248a7a48e1c9183b90da1716898\",\"license\":\"Apache-2.0\"},\"@equilibria/perennial-v2-order/contracts/interfaces/IManager.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.13;\\n\\nimport { IMarket } from \\\"@equilibria/perennial-v2/contracts/interfaces/IMarket.sol\\\";\\n\\nimport { CancelOrderAction } from \\\"../types/CancelOrderAction.sol\\\";\\nimport { InterfaceFee } from \\\"../types/InterfaceFee.sol\\\";\\nimport { PlaceOrderAction, TriggerOrder } from \\\"../types/PlaceOrderAction.sol\\\";\\n\\n/// @notice Stores and executes trigger orders\\ninterface IManager {\\n    /// @notice Emitted when a trigger order is written to storage, whether as a new order or a replacement\\n    /// @param market Perennial market for which the order is intended\\n    /// @param account Actor who wants to change their position in the market\\n    /// @param order Desired change in position and conditions upon which change may be made\\n    /// @param orderId Client-supplied order identifier, unique to client\\n    event TriggerOrderPlaced(\\n        IMarket indexed market,\\n        address indexed account,\\n        TriggerOrder order,\\n        uint256 orderId\\n    );\\n\\n    /// @notice Emitted when an order has been cancelled\\n    /// @param market Perennial market for which the order was intended\\n    /// @param account Actor whose order was cancelled\\n    /// @param orderId Uniquely identifies the cancelled order\\n    event TriggerOrderCancelled(IMarket indexed market, address indexed account, uint256 orderId);\\n\\n    /// @notice Emitted when a trigger orders conditions have been met and the user's position has been updated\\n    /// @param market Perennial market which the order affected\\n    /// @param account Actor whose position was changed\\n    /// @param order Change in position and conditions which were satisfied\\n    /// @param orderId Uniquely identifies the executed order\\n    event TriggerOrderExecuted(IMarket indexed market, address indexed account, TriggerOrder order, uint256 orderId);\\n\\n    /// @notice Emitted when an interface fee specified on a trigger order has been paid\\n    /// @param account Actor who paid the fee\\n    /// @param market Perennial market from which the fee was pulled\\n    /// @param fee Details including the fee amount and recipient of the fee\\n    event TriggerOrderInterfaceFeeCharged(address indexed account, IMarket indexed market, InterfaceFee fee);\\n\\n    // sig: 0x955cc4b9\\n    /// @custom:error Order does not exist or was already cancelled or executed\\n    error ManagerCannotCancelError();\\n\\n    // sig: 0x8013a216\\n    /// @custom:error Conditions required for order execution are not currently met\\n    error ManagerCannotExecuteError();\\n\\n    // sig: 0xd0cfc108\\n    /// @custom:error Order nonce has already been used\\n    error ManagerInvalidOrderNonceError();\\n\\n    // sig: 0x6673613b\\n    /// @custom:error Signer is not authorized to interact with markets for the specified user\\n    error ManagerInvalidSignerError();\\n\\n    /// @notice Store a new trigger order or replace an existing trigger order\\n    /// @param market Perennial market in which user wants to change their position\\n    /// @param orderId Client-specific order identifier\\n    /// @param order Desired change in position and conditions upon which change may be made\\n    function placeOrder(IMarket market, uint256 orderId, TriggerOrder calldata order) external;\\n\\n    /// @notice Called by keeper to store a new or replace an existing trigger order via a signed message\\n    /// @param request Message containing the market, order, and nonce used to uniquely identify the user's order.\\n    /// @param signature EIP712 message signature\\n    function placeOrderWithSignature(PlaceOrderAction calldata request, bytes calldata signature) external;\\n\\n    /// @notice Cancels a trigger order\\n    /// @param market Perennial market for which the order was submitted\\n    /// @param orderId Uniquely identifies the order to cancel\\n    function cancelOrder(IMarket market, uint256 orderId) external;\\n\\n    /// @notice Called by keeper to cancel a trigger order via a signed message\\n    /// @param request Message containing the market, order, and nonce used to uniquely identify the order to cancel\\n    /// @param signature EIP712 message signature\\n    function cancelOrderWithSignature(CancelOrderAction calldata request, bytes calldata signature) external;\\n\\n    /// @notice Retrieves an unexecuted trigger order\\n    /// @param market Perennial market for which the order was submitted\\n    /// @param account User for whom the order was submitted\\n    /// @param orderId Uniquely identifies the order for a user\\n    function orders(IMarket market, address account, uint256 orderId) external view returns (TriggerOrder memory);\\n\\n    /// @notice Determines whether trigger conditions for an order have been met\\n    /// @param market Perennial market for which the order is intended\\n    /// @param account Actor whose position is to be changed\\n    /// @param orderId Uniquely identifies the order for an account\\n    /// @return order Trigger order read from storage\\n    /// @return canExecute True if trigger conditions have been met and executeOrder may be called on the order\\n    function checkOrder(\\n        IMarket market,\\n        address account,\\n        uint256 orderId\\n    ) external returns (TriggerOrder memory order, bool canExecute);\\n\\n    /// @notice Called by keeper to execute an order whose trigger conditions have been met\\n    /// @param market Perennial market for which the order is intended\\n    /// @param account Actor whose position is to be changed\\n    /// @param orderId Uniquely identifies the order for an account\\n    function executeOrder(IMarket market, address account, uint256 orderId) external;\\n}\\n\",\"keccak256\":\"0x2438cc32054ec15b240ac57e0dc69a3626dee743ded27f885de98c59f50fd2e1\",\"license\":\"Apache-2.0\"},\"@equilibria/perennial-v2-order/contracts/interfaces/IOrderVerifier.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.13;\\n\\nimport { IVerifierBase } from \\\"@equilibria/root/verifier/interfaces/IVerifierBase.sol\\\";\\nimport { Action } from \\\"../types/Action.sol\\\";\\nimport { CancelOrderAction } from \\\"../types/CancelOrderAction.sol\\\";\\nimport { PlaceOrderAction } from \\\"../types/PlaceOrderAction.sol\\\";\\n\\n/// @notice EIP712 signed message verifier for Perennial V2 Trigger Orders.\\ninterface IOrderVerifier is IVerifierBase {\\n    /// @notice Verifies the signature of no-op action message\\n    /// @dev Cancels the nonce after verifying the signature\\n    ///      Reverts if the signature does not match the signer\\n    /// @param action Data common to all action messages\\n    /// @param signature EIP712 signature for the message\\n    function verifyAction(Action calldata action, bytes calldata signature) external;\\n\\n    /// @notice Verifies the signature of a request to persist a new trigger order\\n    /// @dev Cancels the nonce after verifying the signature\\n    ///      Reverts if the signature does not match the signer\\n    /// @param action Order submission request\\n    /// @param signature EIP712 signature for the message\\n    function verifyPlaceOrder(PlaceOrderAction calldata action, bytes calldata signature) external;\\n\\n    /// @notice Verifies the signature of a request to cancel an already-persisted trigger order\\n    /// @dev Cancels the nonce after verifying the signature\\n    ///      Reverts if the signature does not match the signer\\n    /// @param action Order cancellation request\\n    /// @param signature EIP712 signature for the message\\n    function verifyCancelOrder(CancelOrderAction calldata action, bytes calldata signature) external;\\n}\\n\",\"keccak256\":\"0xc6d50d7d1d1abb967aed3807de5a97ceb5f11a01c69b7943968d4d8e8677d4f5\",\"license\":\"Apache-2.0\"},\"@equilibria/perennial-v2-order/contracts/types/Action.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.13;\\n\\nimport { Common, CommonLib } from \\\"@equilibria/root/verifier/types/Common.sol\\\";\\nimport { UFixed6 } from \\\"@equilibria/root/number/types/UFixed6.sol\\\";\\nimport { IMarket } from \\\"@equilibria/perennial-v2/contracts/interfaces/IMarket.sol\\\";\\n\\n/// @notice Fields which need to be hashed for each order action\\nstruct Action {\\n    /// @dev Identifies the market in which user wants to interact\\n    IMarket market;\\n    /// @dev Client-supplied order identifier which cannot be reused\\n    uint256 orderId;\\n    /// @dev Largest amount to compensate relayer/keeper for the transaction in DSU;\\n    ///      note this has no bearing on protocol or additive fees\\n    UFixed6 maxFee;\\n    /// @dev Information shared across all EIP712 collateral account actions;\\n    ///      populate common.account with the owner of the collateral account\\n    Common common;\\n}\\nusing ActionLib for Action global;\\n\\n/// @title ActionLib\\n/// @notice Library used to hash and verifiy fields common to all collateral-account-related messages\\nlibrary ActionLib {\\n    /// @dev Used to verify a signed message\\n    bytes32 constant public STRUCT_HASH = keccak256(\\n        \\\"Action(address market,uint256 orderId,uint256 maxFee,Common common)\\\"\\n        \\\"Common(address account,address signer,address domain,uint256 nonce,uint256 group,uint256 expiry)\\\"\\n    );\\n\\n    /// @dev Used to create a signed message\\n    function hash(Action memory self) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(STRUCT_HASH, self.market, self.orderId, self.maxFee, CommonLib.hash(self.common)));\\n    }\\n}\\n\",\"keccak256\":\"0x74186f13eb907d6fe48d2d1a6abe9f14efb4c0e59396047d4d1705ac46d626c7\",\"license\":\"Apache-2.0\"},\"@equilibria/perennial-v2-order/contracts/types/CancelOrderAction.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.13;\\n\\nimport { Common, CommonLib } from \\\"@equilibria/root/verifier/types/Common.sol\\\";\\nimport { IMarket } from \\\"@equilibria/perennial-v2/contracts/interfaces/IMarket.sol\\\";\\nimport { Action, ActionLib } from \\\"./Action.sol\\\";\\n\\n/// @notice Request to cancel a persisted (\\\"placed\\\") order\\nstruct CancelOrderAction {\\n    /// @dev Identifies the order to cancel\\n    ///      action.market         - market for which order was placed\\n    ///      action.orderId     - order identifier assigned by the user\\n    ///      action.maxFee         - maximum amount to compensate keeper\\n    ///      action.common.account - the user who submitted the order\\n    Action action;\\n}\\nusing CancelOrderActionLib for CancelOrderAction global;\\n\\n/// @notice Library used to hash requests to cancel an existing order\\nlibrary CancelOrderActionLib {\\n    /// @dev Used to verify a signed message\\n    bytes32 constant public STRUCT_HASH = keccak256(\\n        \\\"CancelOrderAction(Action action)\\\"\\n        \\\"Action(address market,uint256 orderId,uint256 maxFee,Common common)\\\"\\n        \\\"Common(address account,address signer,address domain,uint256 nonce,uint256 group,uint256 expiry)\\\"\\n    );\\n\\n    /// @dev Used to create a signed message\\n    function hash(CancelOrderAction memory self) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(STRUCT_HASH, ActionLib.hash(self.action)));\\n    }\\n}\\n\",\"keccak256\":\"0x4aa17bccc4d77b12f35e066cc16d002b85d792092846d240ce6ad7d6207610fe\",\"license\":\"Apache-2.0\"},\"@equilibria/perennial-v2-order/contracts/types/InterfaceFee.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.13;\\n\\nimport { Fixed6 } from \\\"@equilibria/root/number/types/Fixed6.sol\\\";\\nimport { UFixed6 } from \\\"@equilibria/root/number/types/UFixed6.sol\\\";\\n\\n/// @dev Additive fee optionally awarded to GUIs upon execution of trigger orders\\nstruct InterfaceFee {\\n    /// @dev Amount of DSU to transfer from market to recipient\\n    UFixed6 amount;\\n    /// @dev Recipient of the fee\\n    address receiver;\\n    /// @dev True if fee is a fixed amount, false if fee is percentage of change in notional value\\n    bool fixedFee;\\n    /// @dev Whether or not to unwrap the DSU fee to USDC\\n    bool unwrap;\\n}\\nusing InterfaceFeeLib for InterfaceFee global;\\n\\n/// @dev Library used for EIP-712 message signing and verification of InterfaceFee structs\\nlibrary InterfaceFeeLib {\\n    /// @dev Used to verify a signed message\\n    bytes32 constant public STRUCT_HASH = keccak256(\\n        \\\"InterfaceFee(uint64 amount,address receiver,bool fixedFee,bool unwrap)\\\"\\n    );\\n\\n    /// @dev Used to create a signed message\\n    function hash(InterfaceFee memory self) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(STRUCT_HASH, self.amount, self.receiver, self.fixedFee, self.unwrap));\\n    }\\n}\\n\",\"keccak256\":\"0xb86b2b72852113bdf4c953bd922e5264a53badaf01352546f89e0f868f6709fb\",\"license\":\"Apache-2.0\"},\"@equilibria/perennial-v2-order/contracts/types/PlaceOrderAction.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.13;\\n\\nimport { Common, CommonLib } from \\\"@equilibria/root/verifier/types/Common.sol\\\";\\nimport { IMarket } from \\\"@equilibria/perennial-v2/contracts/interfaces/IMarket.sol\\\";\\n\\nimport { Action, ActionLib } from \\\"./Action.sol\\\";\\nimport { TriggerOrder, TriggerOrderStorageLib } from \\\"./TriggerOrder.sol\\\";\\n\\n/// @notice Request to persist a new trigger order or replace an open trigger order\\nstruct PlaceOrderAction {\\n    /// @dev Conveys the desired change in position and conditions to make the change\\n    TriggerOrder order;\\n    /// @dev Information shared across all EIP712 actions;\\n    ///      action.market         - market in which user's position should be changed\\n    ///      action.orderId        - per-user unique order identifier\\n    ///      action.maxFee         - maximum amount to compensate keeper\\n    ///      action.common.account - user participating in the market\\n    ///      action.common.signer  - user or delegate signing the transaction\\n    ///      action.common.domain  - Manager contract verifying the request\\n    ///      action.common.nonce   - per-user unique message identifier\\n    ///      action.common.group   - may be used to cancel multiple pending orders which have not been persisted\\n    ///      action.common.expiry  - order will be implictly cancelled if not persisted after this time\\n    Action action;\\n}\\nusing PlaceOrderActionLib for PlaceOrderAction global;\\n\\n/// @notice Library used to hash new trigger order requests\\nlibrary PlaceOrderActionLib {\\n    /// @dev Used to verify a signed message\\n    bytes32 constant public STRUCT_HASH = keccak256(\\n        \\\"PlaceOrderAction(TriggerOrder order,Action action)\\\"\\n        \\\"Action(address market,uint256 orderId,uint256 maxFee,Common common)\\\"\\n        \\\"Common(address account,address signer,address domain,uint256 nonce,uint256 group,uint256 expiry)\\\"\\n        \\\"InterfaceFee(uint64 amount,address receiver,bool fixedFee,bool unwrap)\\\"\\n        \\\"TriggerOrder(uint8 side,int8 comparison,int64 price,int64 delta,uint64 maxFee,bool isSpent,address referrer,InterfaceFee interfaceFee)\\\"\\n    );\\n\\n    /// @dev Used to create a signed message\\n    function hash(PlaceOrderAction memory self) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(STRUCT_HASH, TriggerOrderStorageLib.hash(self.order), ActionLib.hash(self.action)));\\n    }\\n}\\n\",\"keccak256\":\"0x6c9eb09ff59a0ecf26c802f6475290de9d289ce0bbc616fe3f95de0b883254a7\",\"license\":\"Apache-2.0\"},\"@equilibria/perennial-v2-order/contracts/types/TriggerOrder.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.13;\\n\\nimport { Fixed6, Fixed6Lib } from \\\"@equilibria/root/number/types/UFixed6.sol\\\";\\nimport { UFixed6, UFixed6Lib } from \\\"@equilibria/root/number/types/UFixed6.sol\\\";\\nimport { IMarket, OracleVersion, Order, Position } from \\\"@equilibria/perennial-v2/contracts/interfaces/IMarket.sol\\\";\\nimport { InterfaceFee, InterfaceFeeLib } from \\\"./InterfaceFee.sol\\\";\\n\\n/// @notice Changes a user's position in a market when price reaches a trigger threshold\\nstruct TriggerOrder {\\n    /// @dev Determines the desired position type to establish or change\\n    uint8 side;       // 4 = maker, 5 = long, 6 = short\\n    /// @dev Trigger condition; market price to be less/greater than trigger price\\n    int8 comparison;  // -1 = lte, 1 = gte\\n    /// @dev Trigger price used on right hand side of comparison\\n    Fixed6 price;     // <= 9.22t\\n    /// @dev Amount to change position by, or type(int64).min to close position\\n    Fixed6 delta;     // <= 9.22t\\n    /// @dev Limit on keeper compensation for executing the order\\n    UFixed6 maxFee;   // < 18.45t\\n    /// @dev Always leave this false; set true after execution/cancellation\\n    bool isSpent;\\n    /// @dev Passed to market for awarding referral fee\\n    address referrer;\\n    /// @dev Additive fee optionally awarded to GUIs upon execution\\n    InterfaceFee interfaceFee;\\n}\\nusing TriggerOrderLib for TriggerOrder global;\\n\\n/// @notice Logic for interacting with trigger orders\\n/// @dev (external-unsafe): this library must be used internally only\\nlibrary TriggerOrderLib {\\n    Fixed6 private constant MAGIC_VALUE_CLOSE_POSITION = Fixed6.wrap(type(int64).min);\\n\\n    // sig: 0x5b8c7e99\\n    /// @custom:error side or comparison is not supported\\n    error TriggerOrderInvalidError();\\n\\n    /// @notice Determines whether the trigger order is fillable at the latest price\\n    /// @param self Trigger order\\n    /// @param latestVersion Latest oracle version\\n    /// @return Whether the trigger order is fillable\\n    function canExecute(TriggerOrder memory self, OracleVersion memory latestVersion) internal pure returns (bool) {\\n        if (!latestVersion.valid) return false;\\n        if (self.comparison == 1) return latestVersion.price.gte(self.price);\\n        if (self.comparison == -1) return latestVersion.price.lte(self.price);\\n        return false;\\n    }\\n\\n    /// @notice Applies the order to the user's position and updates the market\\n    /// @param self Trigger order\\n    /// @param market Market for which the trigger order was placed\\n    /// @param account Market participant\\n    function execute(\\n        TriggerOrder memory self,\\n        IMarket market,\\n        address account\\n    ) internal {\\n        // settle and get the pending position of the account\\n        market.settle(account);\\n        Order memory pending = market.pendings(account);\\n        Position memory position = market.positions(account);\\n        position.update(pending);\\n\\n        // apply order to position\\n        if (self.side == 4) position.maker = _add(position.maker, self.delta);\\n        if (self.side == 5) position.long = _add(position.long, self.delta);\\n        if (self.side == 6) position.short = _add(position.short, self.delta);\\n\\n        // apply position to market\\n        market.update(\\n            account,\\n            position.maker,\\n            position.long,\\n            position.short,\\n            Fixed6Lib.ZERO,\\n            false,\\n            self.referrer\\n        );\\n    }\\n\\n    /// @notice Determines if the order has been deleted\\n    /// @param self Trigger order\\n    /// @return True if order has no function, otherwise false\\n    function isEmpty(TriggerOrder memory self) internal pure returns (bool) {\\n        return self.side == 0 && self.comparison == 0 && self.price.isZero() && self.delta.isZero();\\n    }\\n\\n    /// @notice Prevents writing invalid side or comparison to storage\\n    function isValid(TriggerOrder memory self) internal pure returns (bool) {\\n        return self.side > 3 && self.side < 7 && (self.comparison == -1 || self.comparison == 1);\\n    }\\n\\n    function notionalValue(TriggerOrder memory self, IMarket market, address account) internal view returns (UFixed6) {\\n        // Consistent with how margin requirements are calculated, charge a positive fee on a negative price.\\n        UFixed6 price = market.oracle().latest().price.abs();\\n        if (self.delta.eq(MAGIC_VALUE_CLOSE_POSITION)) {\\n            return _position(market, account, self.side).mul(price);\\n        } else {\\n            return self.delta.abs().mul(price);\\n        }\\n    }\\n\\n    /// @notice Helper function to improve readability of TriggerOrderLib.execute\\n    function _add(UFixed6 lhs, Fixed6 rhs) private pure returns (UFixed6) {\\n        return rhs.eq(MAGIC_VALUE_CLOSE_POSITION) ?\\n            UFixed6Lib.ZERO :\\n            UFixed6Lib.from(Fixed6Lib.from(lhs).add(rhs));\\n    }\\n\\n    /// @notice Returns user's position for the side of the order they placed\\n    function _position(IMarket market, address account, uint8 side) private view returns (UFixed6) {\\n        Position memory current = market.positions(account);\\n        if (side == 4) return current.maker;\\n        else if (side == 5) return current.long;\\n        else if (side == 6) return current.short;\\n        revert TriggerOrderInvalidError();\\n    }\\n}\\n\\nstruct StoredTriggerOrder {\\n    /* slot 0 */\\n    uint8 side;                   // 4 = maker, 5 = long, 6 = short\\n    int8 comparison;              // -1 = lte, 1 = gte\\n    int64 price;                  // <= 9.22t\\n    int64 delta;                  // <= 9.22t\\n    uint64 maxFee;                // < 18.45t\\n    bool isSpent;\\n    bytes5 __unallocated0__;      // padding for 32-byte alignment\\n    /* slot 1 */\\n    address referrer;\\n    bytes12 __unallocated1__;     // padding for 32-byte alignment\\n    /* slot 2 */\\n    address interfaceFeeReceiver;\\n    uint64 interfaceFeeAmount;    // < 18.45t\\n    bool interfaceFeeFlat;\\n    bool interfaceFeeUnwrap;\\n    // 2 bytes left over (no need to pad trailing bytes)\\n}\\nstruct TriggerOrderStorage { StoredTriggerOrder value; }\\nusing TriggerOrderStorageLib for TriggerOrderStorage global;\\n\\n/// @dev Manually encodes and decodes the TriggerOrder struct to/from storage,\\n///      and provides facility for hashing for inclusion in EIP-712 messages\\n/// (external-safe): this library is safe to externalize\\nlibrary TriggerOrderStorageLib {\\n    /// @dev Used to verify a signed message\\n    bytes32 constant public STRUCT_HASH = keccak256(\\n        \\\"TriggerOrder(uint8 side,int8 comparison,int64 price,int64 delta,uint64 maxFee,bool isSpent,address referrer,InterfaceFee interfaceFee)\\\"\\n        \\\"InterfaceFee(uint64 amount,address receiver,bool fixedFee,bool unwrap)\\\"\\n    );\\n\\n    // sig: 0xf3469aa7\\n    /// @custom:error price, delta, maxFee, or interface fee amount is out-of-bounds\\n    error TriggerOrderStorageInvalidError();\\n\\n    /// @notice reads a trigger order struct from storage\\n    function read(TriggerOrderStorage storage self) internal view returns (TriggerOrder memory) {\\n        StoredTriggerOrder memory storedValue = self.value;\\n        return TriggerOrder(\\n            uint8(storedValue.side),\\n            int8(storedValue.comparison),\\n            Fixed6.wrap(int256(storedValue.price)),\\n            Fixed6.wrap(int256(storedValue.delta)),\\n            UFixed6.wrap(uint256(storedValue.maxFee)),\\n            storedValue.isSpent,\\n            storedValue.referrer,\\n            InterfaceFee(\\n                UFixed6.wrap(uint256(storedValue.interfaceFeeAmount)),\\n                storedValue.interfaceFeeReceiver,\\n                storedValue.interfaceFeeFlat,\\n                storedValue.interfaceFeeUnwrap\\n            )\\n        );\\n    }\\n\\n    /// @notice writes a trigger order struct to storage\\n    function store(TriggerOrderStorage storage self, TriggerOrder memory newValue) internal {\\n        if (!newValue.isValid()) revert TriggerOrderLib.TriggerOrderInvalidError();\\n        if (newValue.price.gt(Fixed6.wrap(type(int64).max))) revert TriggerOrderStorageInvalidError();\\n        if (newValue.price.lt(Fixed6.wrap(type(int64).min))) revert TriggerOrderStorageInvalidError();\\n        if (newValue.delta.gt(Fixed6.wrap(type(int64).max))) revert TriggerOrderStorageInvalidError();\\n        if (newValue.delta.lt(Fixed6.wrap(type(int64).min))) revert TriggerOrderStorageInvalidError();\\n        if (newValue.maxFee.gt(UFixed6.wrap(type(uint64).max))) revert TriggerOrderStorageInvalidError();\\n        if (newValue.interfaceFee.amount.gt(UFixed6.wrap(type(uint64).max))) revert TriggerOrderStorageInvalidError();\\n\\n        self.value = StoredTriggerOrder(\\n            uint8(newValue.side),\\n            int8(newValue.comparison),\\n            int64(Fixed6.unwrap(newValue.price)),\\n            int64(Fixed6.unwrap(newValue.delta)),\\n            uint64(UFixed6.unwrap(newValue.maxFee)),\\n            newValue.isSpent,\\n            0,\\n            newValue.referrer,\\n            0,\\n            newValue.interfaceFee.receiver,\\n            uint64(UFixed6.unwrap(newValue.interfaceFee.amount)),\\n            newValue.interfaceFee.fixedFee,\\n            newValue.interfaceFee.unwrap\\n        );\\n    }\\n\\n    /// @notice Used to create a signed message\\n    function hash(TriggerOrder memory self) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            STRUCT_HASH,\\n            self.side,\\n            self.comparison,\\n            self.price,\\n            self.delta,\\n            self.maxFee,\\n            self.isSpent,\\n            self.referrer,\\n            InterfaceFeeLib.hash(self.interfaceFee)\\n        ));\\n    }\\n}\\n\",\"keccak256\":\"0x343b4f5c22fc749c128029d5f87e8e3ae14d062d61cb0c32d567d68d6a9109d1\",\"license\":\"Apache-2.0\"},\"@equilibria/perennial-v2-verifier/contracts/interfaces/IVerifier.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.13;\\n\\nimport { IVerifierBase } from \\\"@equilibria/root/verifier/interfaces/IVerifierBase.sol\\\";\\nimport { Common } from \\\"@equilibria/root/verifier/types/Common.sol\\\";\\nimport { Intent } from \\\"../types/Intent.sol\\\";\\nimport { OperatorUpdate } from \\\"../types/OperatorUpdate.sol\\\";\\nimport { SignerUpdate } from \\\"../types/SignerUpdate.sol\\\";\\nimport { AccessUpdateBatch } from \\\"../types/AccessUpdateBatch.sol\\\";\\n\\ninterface IVerifier is IVerifierBase {\\n    function verifyIntent(Intent calldata intent, bytes calldata signature) external;\\n    function verifyOperatorUpdate(OperatorUpdate calldata operatorUpdate, bytes calldata signature) external;\\n    function verifySignerUpdate(SignerUpdate calldata signerUpdate, bytes calldata signature) external;\\n    function verifyAccessUpdateBatch(AccessUpdateBatch calldata accessUpdateBatch, bytes calldata signature) external;\\n}\",\"keccak256\":\"0x44324d826778f9b8d2f67d372da9fff32385deba95141a0930f803a55582f2e6\",\"license\":\"Apache-2.0\"},\"@equilibria/perennial-v2-verifier/contracts/types/AccessUpdate.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.13;\\n\\nimport { UFixed6 } from \\\"@equilibria/root/number/types/UFixed6.sol\\\";\\nimport { Fixed6 } from \\\"@equilibria/root/number/types/Fixed6.sol\\\";\\nimport { Common, CommonLib } from \\\"@equilibria/root/verifier/types/Common.sol\\\";\\n\\nstruct AccessUpdate {\\n    /// @dev The generic signer or operator to approve for the signing account\\n    address accessor;\\n\\n    /// @dev The new status of the signer or operator\\n    bool approved;\\n}\\nusing AccessUpdateLib for AccessUpdate global;\\n\\n/// @title AccessUpdateLib\\n/// @notice Library for AccessUpdate logic and data.\\nlibrary AccessUpdateLib {\\n    bytes32 constant public STRUCT_HASH = keccak256(\\\"AccessUpdate(address accessor,bool approved)\\\");\\n\\n    function hash(AccessUpdate memory self) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(STRUCT_HASH, self.accessor, self.approved));\\n    }\\n}\\n\",\"keccak256\":\"0xb1399f3c02437feba0b2cbdf098e59b7d829e6c8c22673d9eef551cbf0c468ad\",\"license\":\"Apache-2.0\"},\"@equilibria/perennial-v2-verifier/contracts/types/AccessUpdateBatch.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.13;\\n\\nimport { UFixed6 } from \\\"@equilibria/root/number/types/UFixed6.sol\\\";\\nimport { Fixed6 } from \\\"@equilibria/root/number/types/Fixed6.sol\\\";\\nimport { Common, CommonLib } from \\\"@equilibria/root/verifier/types/Common.sol\\\";\\nimport { AccessUpdate, AccessUpdateLib } from \\\"../types/AccessUpdate.sol\\\";\\n\\nstruct AccessUpdateBatch {\\n    /// @dev The operator access update messages\\n    AccessUpdate[] operators;\\n\\n    /// @dev The signer access update messages\\n    AccessUpdate[] signers;\\n\\n    /// @dev The common information for the intent\\n    Common common;\\n}\\nusing AccessUpdateBatchLib for AccessUpdateBatch global;\\n\\n/// @title AccessUpdateBatchLib\\n/// @notice Library for AccessUpdateBatch logic and data.\\nlibrary AccessUpdateBatchLib {\\n    bytes32 constant public STRUCT_HASH = keccak256(\\n        \\\"AccessUpdateBatch(AccessUpdate[] operators,AccessUpdate[] signers,Common common)\\\"\\n        \\\"AccessUpdate(address accessor,bool approved)\\\"\\n        \\\"Common(address account,address signer,address domain,uint256 nonce,uint256 group,uint256 expiry)\\\"\\n    );\\n\\n    function hash(AccessUpdateBatch memory self) internal pure returns (bytes32) {\\n        bytes32[] memory operatorHashes = new bytes32[](self.operators.length);\\n        bytes32[] memory signerHashes = new bytes32[](self.signers.length);\\n\\n        for (uint256 i = 0; i < self.operators.length; i++)\\n            operatorHashes[i] = AccessUpdateLib.hash(self.operators[i]);\\n        for (uint256 i = 0; i < self.signers.length; i++)\\n            signerHashes[i] = AccessUpdateLib.hash(self.signers[i]);\\n\\n        return keccak256(\\n            abi.encode(\\n                STRUCT_HASH,\\n                keccak256(abi.encodePacked(operatorHashes)),\\n                keccak256(abi.encodePacked(signerHashes)),\\n                CommonLib.hash(self.common)\\n            )\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0xd1a6d36e20cd290cefcdcd0adbeb52e06ea35f62b1133b3d647d89c13bf8f6cc\",\"license\":\"Apache-2.0\"},\"@equilibria/perennial-v2-verifier/contracts/types/Intent.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.13;\\n\\nimport { UFixed6, UFixed6Lib } from \\\"@equilibria/root/number/types/UFixed6.sol\\\";\\nimport { Fixed6 } from \\\"@equilibria/root/number/types/Fixed6.sol\\\";\\nimport { Common, CommonLib } from \\\"@equilibria/root/verifier/types/Common.sol\\\";\\n\\nstruct Intent {\\n    /// @dev The size and direction of the order being opened by the taker\\n    ///       - Positive opens long / Negative opens short\\n    ///       - The maker will open the opposite side of the order\\n    ///       - To close, open an order in the opposite direction\\n    Fixed6 amount;\\n\\n    /// @dev The price to execute the order at\\n    Fixed6 price;\\n\\n    /// @dev The solver fee, a percentage of the substractive interface fee\\n    UFixed6 fee;\\n\\n    /// @dev The referral address of the originator of the order (ex. the interface)\\n    address originator;\\n\\n    /// @dev The referral address of the solver of the order (ex. the router)\\n    address solver;\\n\\n    /// @dev The minimium collateralization ratio that must be maintained after the order is executed\\n    UFixed6 collateralization;\\n\\n    /// @dev The common information for the intent\\n    Common common;\\n}\\nusing IntentLib for Intent global;\\n\\n/// @title IntentLib\\n/// @notice Library for Intent logic and data.\\nlibrary IntentLib {\\n    bytes32 constant public STRUCT_HASH = keccak256(\\n        \\\"Intent(int256 amount,int256 price,uint256 fee,address originator,address solver,uint256 collateralization,Common common)\\\"\\n        \\\"Common(address account,address signer,address domain,uint256 nonce,uint256 group,uint256 expiry)\\\"\\n    );\\n\\n    function hash(Intent memory self) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(STRUCT_HASH, self.amount, self.price, self.fee, self.originator, self.solver, self.collateralization, CommonLib.hash(self.common)));\\n    }\\n}\\n\",\"keccak256\":\"0xc7bb16c559362c751d1889d6fea834be0066674ace8fe610f15122f1979b483b\",\"license\":\"Apache-2.0\"},\"@equilibria/perennial-v2-verifier/contracts/types/OperatorUpdate.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.13;\\n\\nimport { Common, CommonLib } from \\\"@equilibria/root/verifier/types/Common.sol\\\";\\nimport { AccessUpdate, AccessUpdateLib } from \\\"./AccessUpdate.sol\\\";\\n\\nstruct OperatorUpdate {\\n    /// @dev The operator access to update\\n    AccessUpdate access;\\n\\n    /// @dev The common information for the intent\\n    Common common;\\n}\\nusing OperatorUpdateLib for OperatorUpdate global;\\n\\n/// @title OperatorUpdateLib\\n/// @notice Library for OperatorUpdate logic and data.\\nlibrary OperatorUpdateLib {\\n    bytes32 constant public STRUCT_HASH = keccak256(\\n        \\\"OperatorUpdate(AccessUpdate access,Common common)\\\"\\n        \\\"AccessUpdate(address accessor,bool approved)\\\"\\n        \\\"Common(address account,address signer,address domain,uint256 nonce,uint256 group,uint256 expiry)\\\"\\n    );\\n\\n    function hash(OperatorUpdate memory self) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(STRUCT_HASH, AccessUpdateLib.hash(self.access), CommonLib.hash(self.common)));\\n    }\\n}\\n\",\"keccak256\":\"0x9862489310881cb283f8befc10ad91599e0ee2fb617962be1957fb077a36f619\",\"license\":\"Apache-2.0\"},\"@equilibria/perennial-v2-verifier/contracts/types/SignerUpdate.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.13;\\n\\nimport { UFixed6 } from \\\"@equilibria/root/number/types/UFixed6.sol\\\";\\nimport { Fixed6 } from \\\"@equilibria/root/number/types/Fixed6.sol\\\";\\nimport { Common, CommonLib } from \\\"@equilibria/root/verifier/types/Common.sol\\\";\\nimport { AccessUpdate, AccessUpdateLib } from \\\"./AccessUpdate.sol\\\";\\n\\nstruct SignerUpdate {\\n    /// @dev The signer access to update\\n    AccessUpdate access;\\n\\n    /// @dev The common information for the intent\\n    Common common;\\n}\\nusing SignerUpdateLib for SignerUpdate global;\\n\\n/// @title SignerUpdateLib\\n/// @notice Library for SignerUpdate logic and data.\\nlibrary SignerUpdateLib {\\n    bytes32 constant public STRUCT_HASH = keccak256(\\n        \\\"SignerUpdate(AccessUpdate access,Common common)\\\"\\n        \\\"AccessUpdate(address accessor,bool approved)\\\"\\n        \\\"Common(address account,address signer,address domain,uint256 nonce,uint256 group,uint256 expiry)\\\"\\n    );\\n\\n    function hash(SignerUpdate memory self) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(STRUCT_HASH, AccessUpdateLib.hash(self.access), CommonLib.hash(self.common)));\\n    }\\n}\\n\",\"keccak256\":\"0xd3165bfb61c612bb24eb360d7dd00b535731ca9f3ef0a806167f7f0995d4c6c8\",\"license\":\"Apache-2.0\"},\"@equilibria/perennial-v2/contracts/interfaces/IMarket.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.13;\\n\\nimport \\\"@equilibria/root/attribute/interfaces/IInstance.sol\\\";\\nimport \\\"@equilibria/root/number/types/UFixed6.sol\\\";\\nimport \\\"@equilibria/root/token/types/Token18.sol\\\";\\nimport \\\"@equilibria/perennial-v2-verifier/contracts/types/Intent.sol\\\";\\nimport \\\"./IOracleProvider.sol\\\";\\nimport \\\"../types/OracleVersion.sol\\\";\\nimport \\\"../types/MarketParameter.sol\\\";\\nimport \\\"../types/RiskParameter.sol\\\";\\nimport \\\"../types/Version.sol\\\";\\nimport \\\"../types/Local.sol\\\";\\nimport \\\"../types/Global.sol\\\";\\nimport \\\"../types/Position.sol\\\";\\nimport \\\"../types/Checkpoint.sol\\\";\\nimport \\\"../types/Guarantee.sol\\\";\\nimport \\\"../libs/VersionLib.sol\\\";\\n\\ninterface IMarket is IInstance {\\n    struct MarketDefinition {\\n        Token18 token;\\n        IOracleProvider oracle;\\n    }\\n\\n    struct Context {\\n        address account;\\n        MarketParameter marketParameter;\\n        RiskParameter riskParameter;\\n        OracleVersion latestOracleVersion;\\n        uint256 currentTimestamp;\\n        Global global;\\n        Local local;\\n        Position latestPositionGlobal;\\n        Position latestPositionLocal;\\n        Order pendingGlobal;\\n        Order pendingLocal;\\n    }\\n\\n    struct SettlementContext {\\n        Version latestVersion;\\n        Checkpoint latestCheckpoint;\\n        OracleVersion orderOracleVersion;\\n    }\\n\\n    struct UpdateContext {\\n        bool operator;\\n        bool signer;\\n        address liquidator;\\n        address orderReferrer;\\n        UFixed6 orderReferralFee;\\n        address guaranteeReferrer;\\n        UFixed6 guaranteeReferralFee;\\n        Order orderGlobal;\\n        Order orderLocal;\\n        Position currentPositionGlobal;\\n        Position currentPositionLocal;\\n        Guarantee guaranteeGlobal;\\n        Guarantee guaranteeLocal;\\n        UFixed6 collateralization;\\n    }\\n\\n    event Updated(address indexed sender, address indexed account, uint256 version, UFixed6 newMaker, UFixed6 newLong, UFixed6 newShort, Fixed6 collateral, bool protect, address referrer);\\n    event OrderCreated(address indexed account, Order order, Guarantee guarantee, address liquidator, address orderReferrer, address guaranteeReferrer);\\n    event PositionProcessed(uint256 orderId, Order order, VersionAccumulationResult accumulationResult);\\n    event AccountPositionProcessed(address indexed account, uint256 orderId, Order order, CheckpointAccumulationResult accumulationResult);\\n    event BeneficiaryUpdated(address newBeneficiary);\\n    event CoordinatorUpdated(address newCoordinator);\\n    /// @notice Fee earned by an account was transferred from market to a receiver\\n    /// @param account User who earned the fee\\n    /// @param receiver Delegated operator of the account, or the account itself\\n    /// @param amount Collateral transferred from market to receiver\\n    event FeeClaimed(address indexed account, address indexed receiver, UFixed6 amount);\\n    event ExposureClaimed(address indexed account, Fixed6 amount);\\n    event ParameterUpdated(MarketParameter newParameter);\\n    event RiskParameterUpdated(RiskParameter newRiskParameter);\\n\\n    // sig: 0x0fe90964\\n    error MarketInsufficientLiquidityError();\\n    // sig: 0x00e2b6a8\\n    error MarketInsufficientMarginError();\\n    // sig: 0x442145e5\\n    error MarketInsufficientCollateralError();\\n    // sig: 0xba555da7\\n    error MarketProtectedError();\\n    // sig: 0x6ed43d8e\\n    error MarketMakerOverLimitError();\\n    // sig: 0x29ab4c44\\n    error MarketClosedError();\\n    // sig: 0x07732aee\\n    error MarketCollateralBelowLimitError();\\n    // sig: 0x5bdace60\\n    error MarketOperatorNotAllowedError();\\n    // sig: 0x8a68c1dc\\n    error MarketNotSingleSidedError();\\n    // sig: 0x736f9fda\\n    error MarketOverCloseError();\\n    // sig: 0x935bdc21\\n    error MarketExceedsPendingIdLimitError();\\n    // sig: 0x9bca0625\\n    error MarketNotCoordinatorError();\\n    // sig: 0xb602d086\\n    error MarketNotBeneficiaryError();\\n    // sig: 0x3222db45\\n    /// @custom:error Sender is not authorized to interact with markets on behalf of the account\\n    error MarketNotOperatorError();\\n    // sig: 0x534f7fe6\\n    error MarketInvalidProtectionError();\\n    // sig: 0xab1e3a00\\n    error MarketStalePriceError();\\n    // sig: 0x15f9ae70\\n    error MarketEfficiencyUnderLimitError();\\n    // sig: 0x7302d51a\\n    error MarketInvalidMarketParameterError(uint256 code);\\n    // sig: 0xc5f0e98a\\n    error MarketInvalidRiskParameterError(uint256 code);\\n    // sig: 0x9dbdc5fd\\n    error MarketInvalidReferrerError();\\n    // sig: 0x5c5cb438\\n    error MarketSettleOnlyError();\\n    // sig: 0x1e9d2296\\n    error MarketInvalidIntentFeeError();\\n\\n    // sig: 0x2142bc27\\n    error GlobalStorageInvalidError();\\n    // sig: 0xc83d08ec\\n    error LocalStorageInvalidError();\\n    // sig: 0x7c53e926\\n    error MarketParameterStorageInvalidError();\\n    // sig: 0x98eb4898\\n    error PositionStorageLocalInvalidError();\\n    // sig: 0x7ecd083f\\n    error RiskParameterStorageInvalidError();\\n    // sig: 0xd2777e72\\n    error VersionStorageInvalidError();\\n\\n    function initialize(MarketDefinition calldata definition_) external;\\n    function migrate() external;\\n    function token() external view returns (Token18);\\n    function oracle() external view returns (IOracleProvider);\\n    function beneficiary() external view returns (address);\\n    function coordinator() external view returns (address);\\n    function positions(address account) external view returns (Position memory);\\n    function pendingOrders(address account, uint256 id) external view returns (Order memory);\\n    function guarantees(address account, uint256 id) external view returns (Guarantee memory);\\n    function pendings(address account) external view returns (Order memory);\\n    function locals(address account) external view returns (Local memory);\\n    function versions(uint256 timestamp) external view returns (Version memory);\\n    function position() external view returns (Position memory);\\n    function pendingOrder(uint256 id) external view returns (Order memory);\\n    function guarantee(uint256 id) external view returns (Guarantee memory);\\n    function pending() external view returns (Order memory);\\n    function global() external view returns (Global memory);\\n    function checkpoints(address account, uint256 version) external view returns (Checkpoint memory);\\n    function liquidators(address account, uint256 id) external view returns (address);\\n    function orderReferrers(address account, uint256 id) external view returns (address);\\n    function guaranteeReferrers(address account, uint256 id) external view returns (address);\\n    function settle(address account) external;\\n    function update(address account, Intent calldata intent, bytes memory signature) external;\\n    function update(address account, Fixed6 amount, Fixed6 collateral, address referrer) external;\\n    function update(address account, UFixed6 newMaker, UFixed6 newLong, UFixed6 newShort, Fixed6 collateral, bool protect) external;\\n    function update(address account, UFixed6 newMaker, UFixed6 newLong, UFixed6 newShort, Fixed6 collateral, bool protect, address referrer) external;\\n    function parameter() external view returns (MarketParameter memory);\\n    function riskParameter() external view returns (RiskParameter memory);\\n    function updateBeneficiary(address newBeneficiary) external;\\n    function updateCoordinator(address newCoordinator) external;\\n    function updateParameter(MarketParameter memory newParameter) external;\\n    function updateRiskParameter(RiskParameter memory newRiskParameter) external;\\n    function claimFee(address account) external returns (UFixed6);\\n}\\n\",\"keccak256\":\"0x5026f1a049b0f85e82c98fee8fbcb6b37662852f89e7c375068ee3557a73217d\",\"license\":\"Apache-2.0\"},\"@equilibria/perennial-v2/contracts/interfaces/IMarketFactory.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.13;\\n\\nimport \\\"@equilibria/root/attribute/interfaces/IFactory.sol\\\";\\nimport \\\"@equilibria/perennial-v2-verifier/contracts/interfaces/IVerifier.sol\\\";\\nimport \\\"@equilibria/perennial-v2-verifier/contracts/types/OperatorUpdate.sol\\\";\\nimport \\\"@equilibria/perennial-v2-verifier/contracts/types/SignerUpdate.sol\\\";\\nimport \\\"@equilibria/perennial-v2-verifier/contracts/types/AccessUpdate.sol\\\";\\nimport \\\"@equilibria/perennial-v2-verifier/contracts/types/AccessUpdateBatch.sol\\\";\\nimport \\\"../types/ProtocolParameter.sol\\\";\\nimport \\\"./IMarket.sol\\\";\\n\\ninterface IMarketFactory is IFactory {\\n    event ParameterUpdated(ProtocolParameter newParameter);\\n    event ExtensionUpdated(address indexed operator, bool newEnabled);\\n    event OperatorUpdated(address indexed account, address indexed operator, bool newEnabled);\\n    event SignerUpdated(address indexed account, address indexed signer, bool newEnabled);\\n    event ReferralFeeUpdated(address indexed referrer, UFixed6 newFee);\\n    event MarketCreated(IMarket indexed market, IMarket.MarketDefinition definition);\\n\\n    // sig: 0x0a37dc74\\n    error FactoryInvalidPayoffError();\\n    // sig: 0x5116bce5\\n    error FactoryInvalidOracleError();\\n    // sig: 0x213e2260\\n    error FactoryAlreadyRegisteredError();\\n    // sig: 0x6928a80f\\n    error MarketFactoryInvalidSignerError();\\n    // sig: 0x199d4b3e\\n    error MarketFactoryInvalidReferralFeeError();\\n\\n    // sig: 0x4dc1bc59\\n    error ProtocolParameterStorageInvalidError();\\n\\n    function oracleFactory() external view returns (IFactory);\\n    function verifier() external view returns (IVerifier);\\n    function parameter() external view returns (ProtocolParameter memory);\\n    function extensions(address extension) external view returns (bool);\\n    function operators(address account, address operator) external view returns (bool);\\n    function signers(address signer, address operator) external view returns (bool);\\n    function referralFees(address referrer) external view returns (UFixed6);\\n    function markets(IOracleProvider oracle) external view returns (IMarket);\\n    function authorization(address account, address sender, address signer, address orderReferrer) external view returns (bool, bool, UFixed6);\\n    function initialize() external;\\n    function updateParameter(ProtocolParameter memory newParameter) external;\\n    function updateExtension(address extension, bool newEnabled) external;\\n    function updateOperator(address operator, bool newEnabled) external;\\n    function updateOperatorWithSignature(OperatorUpdate calldata operatorUpdate, bytes calldata signature) external;\\n    function updateSigner(address signer, bool newEnabled) external;\\n    function updateSignerWithSignature(SignerUpdate calldata signerUpdate, bytes calldata signature) external;\\n    function updateAccessBatch(AccessUpdate[] calldata operators, AccessUpdate[] calldata signers) external;\\n    function updateAccessBatchWithSignature(AccessUpdateBatch calldata accessUpdateBatch, bytes calldata signature) external;\\n    function updateReferralFee(address referrer, UFixed6 newReferralFee) external;\\n    function create(IMarket.MarketDefinition calldata definition) external returns (IMarket);\\n}\\n\",\"keccak256\":\"0xb2b514ce551865922420e91774db362710cf6b5dd7f01a082104ebb27751c662\",\"license\":\"Apache-2.0\"},\"@equilibria/perennial-v2/contracts/interfaces/IOracleProvider.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.13;\\n\\nimport { OracleReceipt } from \\\"../types/OracleReceipt.sol\\\";\\nimport { OracleVersion } from \\\"../types/OracleVersion.sol\\\";\\nimport { IMarket } from \\\"./IMarket.sol\\\";\\n\\n/// @dev OracleVersion Invariants\\n///       - Version are requested at a timestamp, the current timestamp is determined by the oracle\\n///         - The current timestamp may not be equal to block.timestamp, for example when batching timestamps\\n///       - Versions are allowed to \\\"fail\\\" and will be marked as .valid = false\\n///         - Invalid versions will always include the latest valid price as its price field\\n///       - Versions must be committed in order, i.e. all requested versions prior to latestVersion must be available\\n///       - Non-requested versions may be committed, but will not receive a settlement fee\\n///         - This is useful for immediately liquidating an account with a valid off-chain price in between orders\\n///         - Satisfying the above constraints, only versions more recent than the latest version may be committed\\n///       - Current must always be greater than Latest, never equal\\ninterface IOracleProvider {\\n    // sig: 0x652fafab\\n    error OracleProviderUnauthorizedError();\\n\\n    event OracleProviderVersionRequested(uint256 indexed version, bool newPrice);\\n    event OracleProviderVersionFulfilled(OracleVersion version);\\n\\n    function request(IMarket market, address account) external;\\n    function status() external view returns (OracleVersion memory, uint256);\\n    function latest() external view returns (OracleVersion memory);\\n    function current() external view returns (uint256);\\n    function at(uint256 timestamp) external view returns (OracleVersion memory, OracleReceipt memory);\\n}\",\"keccak256\":\"0xf5f11c678eb5bc91447ef0d919e2dd9dfa266985cd58597e3ee87fe3fca335c9\",\"license\":\"Apache-2.0\"},\"@equilibria/perennial-v2/contracts/libs/CheckpointLib.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.13;\\n\\nimport \\\"@equilibria/root/accumulator/types/Accumulator6.sol\\\";\\nimport \\\"../interfaces/IMarket.sol\\\";\\nimport \\\"../types/OracleVersion.sol\\\";\\nimport \\\"../types/RiskParameter.sol\\\";\\nimport \\\"../types/Global.sol\\\";\\nimport \\\"../types/Local.sol\\\";\\nimport \\\"../types/Order.sol\\\";\\nimport \\\"../types/Version.sol\\\";\\nimport \\\"../types/Checkpoint.sol\\\";\\nimport \\\"../types/Guarantee.sol\\\";\\n\\n\\nstruct CheckpointAccumulationResponse {\\n    /// @dev Total Collateral change due to collateral, price override, and trade fee and offset\\n    Fixed6 collateral;\\n\\n    /// @dev Liquidation fee accumulated for this checkpoint (only if the order is protected)\\n    UFixed6 liquidationFee;\\n\\n    /// @dev Subtractive fee accumulated from the previous position to the next position (this amount is included in the linear fee)\\n    UFixed6 subtractiveFee;\\n\\n    /// @dev Solver fee accumulated the previous position to the next position (this amount is included in the linear fee)\\n    UFixed6 solverFee;\\n}\\n\\nstruct CheckpointAccumulationResult {\\n    /// @dev Total Collateral change due to pnl, funding, and interest from the previous position to the next position\\n    Fixed6 collateral;\\n\\n    /// @dev Collateral change from the difference between the price override and underlying market price\\n    Fixed6 priceOverride;\\n\\n    /// @dev Trade fee accumulated for this checkpoint\\n    UFixed6 tradeFee;\\n\\n    /// @dev Trade price impact accumulated for this checkpoint\\n    Fixed6 offset;\\n\\n    /// @dev Settlement fee charged for this checkpoint\\n    UFixed6 settlementFee;\\n\\n    /// @dev Liquidation fee accumulated for this checkpoint (only if the order is protected)\\n    UFixed6 liquidationFee;\\n\\n    /// @dev Subtractive fee accumulated from the previous position to the next position (this amount is included in the linear fee)\\n    UFixed6 subtractiveFee;\\n\\n    /// @dev Solver fee accumulated the previous position to the next position (this amount is included in the linear fee)\\n    UFixed6 solverFee;\\n}\\n\\n/// @title CheckpointLib\\n/// @dev (external-safe): this library is safe to externalize\\n/// @notice Manages the logic for the local order accumulation\\nlibrary CheckpointLib {\\n    /// @notice Accumulate pnl and fees from the latest position to next position\\n    /// @param order The next order\\n    /// @param fromVersion The previous latest version\\n    /// @param toVersion The next latest version\\n    /// @return next The next checkpoint\\n    /// @return response The accumulated pnl and fees\\n    function accumulate(\\n        IMarket.Context memory context,\\n        IMarket.SettlementContext memory settlementContext,\\n        uint256 orderId,\\n        Order memory order,\\n        Guarantee memory guarantee,\\n        Version memory fromVersion,\\n        Version memory toVersion\\n    ) external returns (Checkpoint memory next, CheckpointAccumulationResponse memory) {\\n        CheckpointAccumulationResult memory result;\\n\\n        // accumulate\\n        result.collateral = _accumulateCollateral(context.latestPositionLocal, fromVersion, toVersion);\\n        result.priceOverride = _accumulatePriceOverride(guarantee, toVersion);\\n        (result.tradeFee, result.subtractiveFee, result.solverFee) = _accumulateFee(order, guarantee, toVersion);\\n        result.offset = _accumulateOffset(order, guarantee, toVersion);\\n        result.settlementFee = _accumulateSettlementFee(order, guarantee, toVersion);\\n        result.liquidationFee = _accumulateLiquidationFee(order, toVersion);\\n\\n        // update checkpoint\\n        next.collateral = settlementContext.latestCheckpoint.collateral\\n            .sub(settlementContext.latestCheckpoint.tradeFee)                       // trade fee processed post settlement\\n            .sub(Fixed6Lib.from(settlementContext.latestCheckpoint.settlementFee)); // settlement / liquidation fee processed post settlement\\n        next.collateral = next.collateral\\n            .add(settlementContext.latestCheckpoint.transfer)                       // deposit / withdrawal processed post settlement\\n            .add(result.collateral)                                                 // incorporate collateral change at this settlement\\n            .add(result.priceOverride);                                             // incorporate price override pnl at this settlement\\n        next.transfer = order.collateral;\\n        next.tradeFee = Fixed6Lib.from(result.tradeFee).add(result.offset);\\n        next.settlementFee = result.settlementFee.add(result.liquidationFee);\\n\\n        emit IMarket.AccountPositionProcessed(context.account, orderId, order, result);\\n\\n        return (next, _response(result));\\n    }\\n\\n    /// @notice Converts the accumulation result into a response\\n    /// @param result The accumulation result\\n    /// @return response The accumulation response\\n    function _response(\\n        CheckpointAccumulationResult memory result\\n    ) private pure returns (CheckpointAccumulationResponse memory response) {\\n        response.collateral = result.collateral\\n            .add(result.priceOverride)\\n            .sub(Fixed6Lib.from(result.tradeFee))\\n            .sub(result.offset)\\n            .sub(Fixed6Lib.from(result.settlementFee));\\n        response.liquidationFee = result.liquidationFee;\\n        response.subtractiveFee = result.subtractiveFee;\\n        response.solverFee = result.solverFee;\\n    }\\n\\n    /// @notice Accumulate pnl, funding, and interest from the latest position to next position\\n    /// @param fromPosition The previous latest position\\n    /// @param fromVersion The previous latest version\\n    /// @param toVersion The next version\\n    function _accumulateCollateral(\\n        Position memory fromPosition,\\n        Version memory fromVersion,\\n        Version memory toVersion\\n    ) private pure returns (Fixed6) {\\n        return toVersion.makerValue.accumulated(fromVersion.makerValue, fromPosition.maker)\\n            .add(toVersion.longValue.accumulated(fromVersion.longValue, fromPosition.long))\\n            .add(toVersion.shortValue.accumulated(fromVersion.shortValue, fromPosition.short));\\n    }\\n\\n    /// @notice Accumulate trade fees for the next position\\n    /// @param order The next order\\n    /// @param guarantee The next guarantee\\n    /// @param toVersion The next version\\n    function _accumulateFee(\\n        Order memory order,\\n        Guarantee memory guarantee,\\n        Version memory toVersion\\n    ) private pure returns (UFixed6 tradeFee, UFixed6 subtractiveFee, UFixed6 solverFee) {\\n        UFixed6 takerTotal = order.takerTotal().sub(guarantee.takerFee);\\n\\n        // accumulate total trade fees on maker and taker orders\\n        UFixed6 makerFee = Fixed6Lib.ZERO\\n            .sub(toVersion.makerFee.accumulated(Accumulator6(Fixed6Lib.ZERO), order.makerTotal()))\\n            .abs();\\n        UFixed6 takerFee = Fixed6Lib.ZERO\\n            .sub(toVersion.takerFee.accumulated(Accumulator6(Fixed6Lib.ZERO), takerTotal))\\n            .abs();\\n\\n        // compute portion of trade fees that are subtractive\\n        UFixed6 makerSubtractiveFee = order.makerTotal().isZero() ?\\n            UFixed6Lib.ZERO :\\n            makerFee.muldiv(order.makerReferral, order.makerTotal());\\n        UFixed6 takerSubtractiveFee = takerTotal.isZero() ?\\n            UFixed6Lib.ZERO :\\n            takerFee.muldiv(order.takerReferral, takerTotal);\\n\\n        // compute portion of subtractive fees that are solver fees\\n        solverFee = takerTotal.isZero() ?\\n            UFixed6Lib.ZERO :\\n            takerFee.muldiv(guarantee.referral, takerTotal); // guarantee.referral is instantiated as a subset of order.takerReferral\\n\\n        tradeFee = makerFee.add(takerFee);\\n        subtractiveFee = makerSubtractiveFee.add(takerSubtractiveFee).sub(solverFee);\\n\\n    }\\n\\n    /// @notice Accumulate price offset for the next position\\n    /// @dev This includes adjustment for linear, proportional, and adiabatic order fees\\n    /// @param order The next order\\n    /// @param guarantee The next guarantee\\n    /// @param toVersion The next version\\n    function _accumulateOffset(\\n        Order memory order,\\n        Guarantee memory guarantee,\\n        Version memory toVersion\\n    ) private pure returns (Fixed6) {\\n        (UFixed6 takerPos, UFixed6 takerNeg) =\\n            (order.takerPos().sub(guarantee.takerPos), order.takerNeg().sub(guarantee.takerNeg));\\n\\n        return Fixed6Lib.ZERO\\n            .sub(toVersion.makerOffset.accumulated(Accumulator6(Fixed6Lib.ZERO), order.makerTotal()))\\n            .sub(toVersion.takerPosOffset.accumulated(Accumulator6(Fixed6Lib.ZERO), takerPos))\\n            .sub(toVersion.takerNegOffset.accumulated(Accumulator6(Fixed6Lib.ZERO), takerNeg));\\n    }\\n\\n\\n    /// @notice Accumulate settlement fees for the next position\\n    /// @param order The next order\\n    /// @param guarantee The next guarantee\\n    /// @param toVersion The next version\\n    function _accumulateSettlementFee(\\n        Order memory order,\\n        Guarantee memory guarantee,\\n        Version memory toVersion\\n    ) private pure returns (UFixed6) {\\n        uint256 orders = order.orders - guarantee.orders;\\n\\n        return toVersion.settlementFee.accumulated(Accumulator6(Fixed6Lib.ZERO), UFixed6Lib.from(orders)).abs();\\n    }\\n\\n    /// @notice Accumulate liquidation fees for the next position\\n    /// @param order The next order\\n    /// @param toVersion The next version\\n    function _accumulateLiquidationFee(\\n        Order memory order,\\n        Version memory toVersion\\n    ) private pure returns (UFixed6) {\\n        if (!order.protected()) return UFixed6Lib.ZERO;\\n        return toVersion.liquidationFee.accumulated(Accumulator6(Fixed6Lib.ZERO), UFixed6Lib.ONE).abs();\\n    }\\n\\n    /// @notice Accumulate price override pnl for the next position\\n    /// @param guarantee The next guarantee\\n    /// @param toVersion The next version\\n    function _accumulatePriceOverride(\\n        Guarantee memory guarantee,\\n        Version memory toVersion\\n    ) private pure returns (Fixed6) {\\n        if (!toVersion.valid) return Fixed6Lib.ZERO;\\n        return guarantee.taker().mul(toVersion.price).sub(guarantee.notional);\\n    }\\n}\\n\",\"keccak256\":\"0x3cee07e0b8282584ec46d0f2ecc4cf5487195186dff7f8dcebfa07bfe33447f4\",\"license\":\"Apache-2.0\"},\"@equilibria/perennial-v2/contracts/libs/VersionLib.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.13;\\n\\nimport \\\"@equilibria/root/accumulator/types/Accumulator6.sol\\\";\\nimport \\\"@equilibria/root/accumulator/types/UAccumulator6.sol\\\";\\nimport \\\"../interfaces/IMarket.sol\\\";\\nimport \\\"../types/ProtocolParameter.sol\\\";\\nimport \\\"../types/MarketParameter.sol\\\";\\nimport \\\"../types/RiskParameter.sol\\\";\\nimport \\\"../types/Global.sol\\\";\\nimport \\\"../types/Position.sol\\\";\\nimport \\\"../types/Version.sol\\\";\\nimport \\\"../types/OracleVersion.sol\\\";\\nimport \\\"../types/OracleReceipt.sol\\\";\\n\\n/// @dev The response of the version accumulation\\n///      Contains only select fee information needed for the downstream market contract\\n///      Returned by the accumulate function\\nstruct VersionAccumulationResponse {\\n    /// @dev The total market fee charged including (tradeFee, tradeOffsetMarket, fundingFee, interestFee)\\n    UFixed6 marketFee;\\n\\n    /// @dev The settlement fee charged\\n    UFixed6 settlementFee;\\n\\n    /// @dev The market's adiabatic exposure\\n    Fixed6 marketExposure;\\n}\\n\\n/// @dev The result of the version accumulation\\n///      Contains all the accumulated values for the version\\n///      Emitted via the PositionProcessed event\\nstruct VersionAccumulationResult {\\n    /// @dev The trade fee charged\\n    UFixed6 tradeFee;\\n\\n    /// @dev The subtractive fee charged\\n    UFixed6 subtractiveFee;\\n\\n    /// @dev The total price impact of the trade (including linear, proportional, and adiabatic)\\n    Fixed6 tradeOffset;\\n\\n    /// @dev The portion of the trade offset that the makers receive\\n    Fixed6 tradeOffsetMaker;\\n\\n    /// @dev The portion of the trade offset that the market receives (if there are no makers)\\n    UFixed6 tradeOffsetMarket;\\n\\n    /// @dev The adiabatic exposure accrued\\n    Fixed6 adiabaticExposure;\\n\\n    /// @dev The adiabatic exposure accrued by makers\\n    Fixed6 adiabaticExposureMaker;\\n\\n    /// @dev The adiabatic exposure accrued by the market\\n    Fixed6 adiabaticExposureMarket;\\n\\n    /// @dev Funding accrued by makers\\n    Fixed6 fundingMaker;\\n\\n    /// @dev Funding accrued by longs\\n    Fixed6 fundingLong;\\n\\n    /// @dev Funding accrued by shorts\\n    Fixed6 fundingShort;\\n\\n    /// @dev Funding received by the protocol\\n    UFixed6 fundingFee;\\n\\n    /// @dev Interest accrued by makers\\n    Fixed6 interestMaker;\\n\\n    /// @dev Interest accrued by longs\\n    Fixed6 interestLong;\\n\\n    /// @dev Interest accrued by shorts\\n    Fixed6 interestShort;\\n\\n    /// @dev Interest received by the protocol\\n    UFixed6 interestFee;\\n\\n    /// @dev Price-based profit/loss accrued by makers\\n    Fixed6 pnlMaker;\\n\\n    /// @dev Price-based profit/loss accrued by longs\\n    Fixed6 pnlLong;\\n\\n    /// @dev Price-based profit/loss accrued by shorts\\n    Fixed6 pnlShort;\\n\\n    /// @dev Total settlement fee charged\\n    UFixed6 settlementFee;\\n\\n    /// @dev Snapshot of the riskParameter.liquidationFee at the version (0 if not valid)\\n    UFixed6 liquidationFee;\\n}\\n\\n/// @dev The in-memory context for the version accumulation\\nstruct VersionAccumulationContext {\\n    Global global;\\n    Position fromPosition;\\n    uint256 orderId;\\n    Order order;\\n    Guarantee guarantee;\\n    OracleVersion fromOracleVersion;\\n    OracleVersion toOracleVersion;\\n    OracleReceipt toOracleReceipt;\\n    MarketParameter marketParameter;\\n    RiskParameter riskParameter;\\n}\\n\\n/// @title VersionLib\\n/// @dev (external-safe): this library is safe to externalize\\n/// @notice Manages the logic for the global order accumulation\\nlibrary VersionLib {\\n    /// @notice Accumulates the global state for the period from `fromVersion` to `toOracleVersion`\\n    function accumulate(\\n        IMarket.Context memory context,\\n        IMarket.SettlementContext memory settlementContext,\\n        uint256 newOrderId,\\n        Order memory newOrder,\\n        Guarantee memory newGuarantee,\\n        OracleVersion memory oracleVersion,\\n        OracleReceipt memory oracleReceipt\\n    ) external returns (Version memory next, Global memory nextGlobal, VersionAccumulationResponse memory response) {\\n        VersionAccumulationContext memory accumulationContext = VersionAccumulationContext(\\n            context.global,\\n            context.latestPositionGlobal,\\n            newOrderId,\\n            newOrder,\\n            newGuarantee,\\n            settlementContext.orderOracleVersion,\\n            oracleVersion,\\n            oracleReceipt,\\n            context.marketParameter,\\n            context.riskParameter\\n        );\\n\\n        return _accumulate(settlementContext.latestVersion, accumulationContext);\\n    }\\n\\n    /// @notice Accumulates the global state for the period from `fromVersion` to `toOracleVersion`\\n    /// @param self The Version object to update\\n    /// @param context The accumulation context\\n    /// @return next The accumulated version\\n    /// @return nextGlobal The next global state\\n    /// @return response The accumulation response\\n    function _accumulate(\\n        Version memory self,\\n        VersionAccumulationContext memory context\\n    ) private returns (Version memory next, Global memory nextGlobal, VersionAccumulationResponse memory response) {\\n        VersionAccumulationResult memory result;\\n\\n        // setup next accumulators\\n        _next(self, next);\\n\\n        // record oracle version\\n        (next.valid, next.price) = (context.toOracleVersion.valid, context.toOracleVersion.price);\\n        context.global.latestPrice = context.toOracleVersion.price;\\n\\n        // accumulate settlement fee\\n        result.settlementFee = _accumulateSettlementFee(next, context);\\n\\n        // accumulate liquidation fee\\n        result.liquidationFee = _accumulateLiquidationFee(next, context);\\n\\n        // accumulate fee\\n        _accumulateFee(next, context, result);\\n\\n        // accumulate linear fee\\n        _accumulateLinearFee(next, context, result);\\n\\n        // accumulate proportional fee\\n        _accumulateProportionalFee(next, context, result);\\n\\n        // accumulate adiabatic exposure\\n        _accumulateAdiabaticExposure(next, context, result);\\n\\n        // accumulate adiabatic fee\\n        _accumulateAdiabaticFee(next, context, result);\\n\\n        // if closed, don't accrue anything else\\n        if (context.marketParameter.closed) return _return(context, result, next);\\n\\n        // accumulate funding\\n        (result.fundingMaker, result.fundingLong, result.fundingShort, result.fundingFee) =\\n            _accumulateFunding(next, context);\\n\\n        // accumulate interest\\n        (result.interestMaker, result.interestLong, result.interestShort, result.interestFee) =\\n            _accumulateInterest(next, context);\\n\\n        // accumulate P&L\\n        (result.pnlMaker, result.pnlLong, result.pnlShort) = _accumulatePNL(next, context);\\n\\n        return _return(context, result, next);\\n    }\\n\\n    function _return(\\n        VersionAccumulationContext memory context,\\n        VersionAccumulationResult memory result,\\n        Version memory next\\n    ) private returns (Version memory, Global memory, VersionAccumulationResponse memory) {\\n        emit IMarket.PositionProcessed(context.orderId, context.order, result);\\n\\n        return (next, context.global, _response(result));\\n    }\\n\\n    /// @notice Converts the accumulation result into a response\\n    /// @param result The accumulation result\\n    /// @return response The accumulation response\\n    function _response(\\n        VersionAccumulationResult memory result\\n    ) private pure returns (VersionAccumulationResponse memory response) {\\n        response.marketFee = result.tradeFee\\n            .add(result.tradeOffsetMarket)\\n            .add(result.fundingFee)\\n            .add(result.interestFee);\\n        response.settlementFee = result.settlementFee;\\n        response.marketExposure = result.adiabaticExposureMarket;\\n    }\\n\\n    /// @notice Copies over the version-over-version accumulators to prepare the next version\\n    /// @param self The Version object to update\\n    function _next(Version memory self, Version memory next) internal pure {\\n        next.makerValue._value = self.makerValue._value;\\n        next.longValue._value = self.longValue._value;\\n        next.shortValue._value = self.shortValue._value;\\n    }\\n\\n    /// @notice Globally accumulates settlement fees since last oracle update\\n    /// @param next The Version object to update\\n    /// @param context The accumulation context\\n    function _accumulateSettlementFee(\\n        Version memory next,\\n        VersionAccumulationContext memory context\\n    ) private pure returns (UFixed6 settlementFee) {\\n        uint256 orders = context.order.orders - context.guarantee.orders;\\n        settlementFee = orders == 0 ? UFixed6Lib.ZERO : context.toOracleReceipt.settlementFee;\\n        next.settlementFee.decrement(Fixed6Lib.from(settlementFee), UFixed6Lib.from(orders));\\n    }\\n\\n    /// @notice Globally accumulates hypothetical liquidation fee since last oracle update\\n    /// @param next The Version object to update\\n    /// @param context The accumulation context\\n    function _accumulateLiquidationFee(\\n        Version memory next,\\n        VersionAccumulationContext memory context\\n    ) private pure returns (UFixed6 liquidationFee) {\\n        liquidationFee = context.toOracleVersion.valid ?\\n            context.toOracleReceipt.settlementFee.mul(context.riskParameter.liquidationFee) :\\n            UFixed6Lib.ZERO;\\n        next.liquidationFee.decrement(Fixed6Lib.from(liquidationFee), UFixed6Lib.ONE);\\n    }\\n\\n    /// @notice Globally accumulates linear fees since last oracle update\\n    /// @param next The Version object to update\\n    /// @param context The accumulation context\\n    function _accumulateFee(\\n        Version memory next,\\n        VersionAccumulationContext memory context,\\n        VersionAccumulationResult memory result\\n    ) private pure {\\n        UFixed6 makerFee = context.order.makerTotal()\\n            .mul(context.toOracleVersion.price.abs())\\n            .mul(context.marketParameter.makerFee);\\n        next.makerFee.decrement(Fixed6Lib.from(makerFee), context.order.makerTotal());\\n        UFixed6 makerSubtractiveFee = context.order.makerTotal().isZero() ?\\n            UFixed6Lib.ZERO :\\n            makerFee.muldiv(context.order.makerReferral, context.order.makerTotal());\\n\\n        UFixed6 takerTotal = context.order.takerTotal().sub(context.guarantee.takerFee);\\n        UFixed6 takerFee = takerTotal\\n            .mul(context.toOracleVersion.price.abs())\\n            .mul(context.marketParameter.takerFee);\\n        next.takerFee.decrement(Fixed6Lib.from(takerFee), takerTotal);\\n        UFixed6 takerSubtractiveFee = takerTotal.isZero() ?\\n            UFixed6Lib.ZERO :\\n            takerFee.muldiv(context.order.takerReferral, takerTotal);\\n\\n        result.tradeFee = result.tradeFee.add(makerFee).add(takerFee).sub(makerSubtractiveFee).sub(takerSubtractiveFee);\\n        result.subtractiveFee = result.subtractiveFee.add(makerSubtractiveFee).add(takerSubtractiveFee);\\n    }\\n\\n    /// @notice Globally accumulates linear fees since last oracle update\\n    /// @param next The Version object to update\\n    /// @param context The accumulation context\\n    function _accumulateLinearFee(\\n        Version memory next,\\n        VersionAccumulationContext memory context,\\n        VersionAccumulationResult memory result\\n    ) private pure {\\n        UFixed6 makerLinearFee = context.riskParameter.makerFee.linear(\\n            Fixed6Lib.from(context.order.makerTotal()),\\n            context.toOracleVersion.price.abs()\\n        );\\n        next.makerOffset.decrement(Fixed6Lib.from(makerLinearFee), context.order.makerTotal());\\n\\n        UFixed6 takerPosTotal = context.order.takerPos().sub(context.guarantee.takerPos);\\n        UFixed6 takerPosLinearFee = context.riskParameter.takerFee.linear(\\n            Fixed6Lib.from(takerPosTotal),\\n            context.toOracleVersion.price.abs()\\n        );\\n        next.takerPosOffset.decrement(Fixed6Lib.from(takerPosLinearFee), takerPosTotal);\\n\\n        UFixed6 takerNegTotal = context.order.takerNeg().sub(context.guarantee.takerNeg);\\n        UFixed6 takerNegLinearFee = context.riskParameter.takerFee.linear(\\n            Fixed6Lib.from(takerNegTotal),\\n            context.toOracleVersion.price.abs()\\n        );\\n        next.takerNegOffset.decrement(Fixed6Lib.from(takerNegLinearFee), takerNegTotal);\\n\\n        UFixed6 linearFee = makerLinearFee.add(takerPosLinearFee).add(takerNegLinearFee);\\n        UFixed6 marketFee = context.fromPosition.maker.isZero() ? linearFee : UFixed6Lib.ZERO;\\n        UFixed6 makerFee = linearFee.sub(marketFee);\\n        next.makerValue.increment(Fixed6Lib.from(makerFee), context.fromPosition.maker);\\n\\n        result.tradeOffset = result.tradeOffset.add(Fixed6Lib.from(linearFee));\\n        result.tradeOffsetMaker = result.tradeOffsetMaker.add(Fixed6Lib.from(makerFee));\\n        result.tradeOffsetMarket = result.tradeOffsetMarket.add(marketFee);\\n    }\\n\\n    /// @notice Globally accumulates proportional fees since last oracle update\\n    /// @param next The Version object to update\\n    /// @param context The accumulation context\\n    function _accumulateProportionalFee(\\n        Version memory next,\\n        VersionAccumulationContext memory context,\\n        VersionAccumulationResult memory result\\n    ) private pure {\\n        UFixed6 makerProportionalFee = context.riskParameter.makerFee.proportional(\\n            Fixed6Lib.from(context.order.makerTotal()),\\n            context.toOracleVersion.price.abs()\\n        );\\n        next.makerOffset.decrement(Fixed6Lib.from(makerProportionalFee), context.order.makerTotal());\\n\\n        UFixed6 takerPos = context.order.takerPos().sub(context.guarantee.takerPos);\\n        UFixed6 takerPosProportionalFee = context.riskParameter.takerFee.proportional(\\n            Fixed6Lib.from(takerPos),\\n            context.toOracleVersion.price.abs()\\n        );\\n        next.takerPosOffset.decrement(Fixed6Lib.from(takerPosProportionalFee), takerPos);\\n\\n        UFixed6 takerNeg = context.order.takerNeg().sub(context.guarantee.takerNeg);\\n        UFixed6 takerNegProportionalFee = context.riskParameter.takerFee.proportional(\\n            Fixed6Lib.from(takerNeg),\\n            context.toOracleVersion.price.abs()\\n        );\\n        next.takerNegOffset.decrement(Fixed6Lib.from(takerNegProportionalFee), takerNeg);\\n\\n        UFixed6 proportionalFee = makerProportionalFee.add(takerPosProportionalFee).add(takerNegProportionalFee);\\n        UFixed6 marketFee = context.fromPosition.maker.isZero() ? proportionalFee : UFixed6Lib.ZERO;\\n        UFixed6 makerFee = proportionalFee.sub(marketFee);\\n        next.makerValue.increment(Fixed6Lib.from(makerFee), context.fromPosition.maker);\\n\\n        result.tradeOffset = result.tradeOffset.add(Fixed6Lib.from(proportionalFee));\\n        result.tradeOffsetMaker = result.tradeOffsetMaker.add(Fixed6Lib.from(makerFee));\\n        result.tradeOffsetMarket = result.tradeOffsetMarket.add(marketFee);\\n    }\\n\\n    /// @notice Globally accumulates adiabatic fees since last oracle update\\n    /// @param next The Version object to update\\n    /// @param context The accumulation context\\n    function _accumulateAdiabaticFee(\\n        Version memory next,\\n        VersionAccumulationContext memory context,\\n        VersionAccumulationResult memory result\\n    ) private pure {\\n        Fixed6 adiabaticFee;\\n\\n        // position fee from positive skew taker orders\\n        UFixed6 takerPos = context.order.takerPos().sub(context.guarantee.takerPos);\\n        adiabaticFee = context.riskParameter.takerFee.adiabatic(\\n            context.fromPosition.skew(),\\n            Fixed6Lib.from(takerPos),\\n            context.toOracleVersion.price.abs()\\n        );\\n        next.takerPosOffset.decrement(adiabaticFee, takerPos);\\n        result.tradeOffset = result.tradeOffset.add(adiabaticFee);\\n\\n        // position fee from negative skew taker orders\\n        UFixed6 takerNeg = context.order.takerNeg().sub(context.guarantee.takerNeg);\\n        adiabaticFee = context.riskParameter.takerFee.adiabatic(\\n            context.fromPosition.skew().add(Fixed6Lib.from(takerPos)),\\n            Fixed6Lib.from(-1, takerNeg),\\n            context.toOracleVersion.price.abs()\\n        );\\n        next.takerNegOffset.decrement(adiabaticFee, takerNeg);\\n        result.tradeOffset = result.tradeOffset.add(adiabaticFee);\\n    }\\n\\n    /// @notice Globally accumulates single component of the position fees exposure since last oracle update\\n    /// @param next The Version object to update\\n    /// @param context The accumulation context\\n    /// @param result The accumulation result\\n    function _accumulateAdiabaticExposure(\\n        Version memory next,\\n        VersionAccumulationContext memory context,\\n        VersionAccumulationResult memory result\\n    ) private pure {\\n        Fixed6 exposure = context.riskParameter.takerFee.exposure(context.fromPosition.skew());\\n\\n        Fixed6 adiabaticExposure = context.toOracleVersion.price.sub(context.fromOracleVersion.price).mul(exposure);\\n        Fixed6 adiabaticExposureMaker = adiabaticExposure.mul(Fixed6Lib.NEG_ONE);\\n        Fixed6 adiabaticExposureMarket = context.fromPosition.maker.isZero() ? adiabaticExposureMaker : Fixed6Lib.ZERO;\\n        adiabaticExposureMaker = adiabaticExposureMaker.sub(adiabaticExposureMarket);\\n        next.makerValue.increment(adiabaticExposureMaker, context.fromPosition.maker);\\n\\n        result.adiabaticExposure = adiabaticExposure;\\n        result.adiabaticExposureMarket = adiabaticExposureMarket;\\n        result.adiabaticExposureMaker = adiabaticExposureMaker;\\n    }\\n\\n    /// @notice Globally accumulates all long-short funding since last oracle update\\n    /// @param next The Version object to update\\n    /// @param context The accumulation context\\n    /// @return fundingMaker The total funding accrued by makers\\n    /// @return fundingLong The total funding accrued by longs\\n    /// @return fundingShort The total funding accrued by shorts\\n    /// @return fundingFee The total fee accrued from funding accumulation\\n    function _accumulateFunding(Version memory next, VersionAccumulationContext memory context) private pure returns (\\n        Fixed6 fundingMaker,\\n        Fixed6 fundingLong,\\n        Fixed6 fundingShort,\\n        UFixed6 fundingFee\\n    ) {\\n        Fixed6 toSkew = context.toOracleVersion.valid ?\\n            context.fromPosition.skew().add(context.order.long()).sub(context.order.short()) :\\n            context.fromPosition.skew();\\n\\n        // Compute long-short funding rate\\n        Fixed6 funding = context.global.pAccumulator.accumulate(\\n            context.riskParameter.pController,\\n            toSkew.unsafeDiv(Fixed6Lib.from(context.riskParameter.takerFee.scale)).min(Fixed6Lib.ONE).max(Fixed6Lib.NEG_ONE),\\n            context.fromOracleVersion.timestamp,\\n            context.toOracleVersion.timestamp,\\n            context.fromPosition.takerSocialized().mul(context.fromOracleVersion.price.abs())\\n        );\\n\\n        // Handle maker receive-only status\\n        if (context.riskParameter.makerReceiveOnly && funding.sign() != context.fromPosition.skew().sign())\\n            funding = funding.mul(Fixed6Lib.NEG_ONE);\\n\\n        // Initialize long and short funding\\n        (fundingLong, fundingShort) = (Fixed6Lib.NEG_ONE.mul(funding), funding);\\n\\n        // Compute fee spread\\n        fundingFee = funding.abs().mul(context.marketParameter.fundingFee);\\n        Fixed6 fundingSpread = Fixed6Lib.from(fundingFee).div(Fixed6Lib.from(2));\\n\\n        // Adjust funding with spread\\n        (fundingLong, fundingShort) = (\\n            fundingLong.sub(Fixed6Lib.from(fundingFee)).add(fundingSpread),\\n            fundingShort.sub(fundingSpread)\\n        );\\n\\n        // Redirect net portion of minor's side to maker\\n        if (context.fromPosition.long.gt(context.fromPosition.short)) {\\n            fundingMaker = fundingShort.mul(Fixed6Lib.from(context.fromPosition.socializedMakerPortion()));\\n            fundingShort = fundingShort.sub(fundingMaker);\\n        }\\n        if (context.fromPosition.short.gt(context.fromPosition.long)) {\\n            fundingMaker = fundingLong.mul(Fixed6Lib.from(context.fromPosition.socializedMakerPortion()));\\n            fundingLong = fundingLong.sub(fundingMaker);\\n        }\\n\\n        next.makerValue.increment(fundingMaker, context.fromPosition.maker);\\n        next.longValue.increment(fundingLong, context.fromPosition.long);\\n        next.shortValue.increment(fundingShort, context.fromPosition.short);\\n    }\\n\\n    /// @notice Globally accumulates all maker interest since last oracle update\\n    /// @param next The Version object to update\\n    /// @param context The accumulation context\\n    /// @return interestMaker The total interest accrued by makers\\n    /// @return interestLong The total interest accrued by longs\\n    /// @return interestShort The total interest accrued by shorts\\n    /// @return interestFee The total fee accrued from interest accumulation\\n    function _accumulateInterest(\\n        Version memory next,\\n        VersionAccumulationContext memory context\\n    ) private pure returns (Fixed6 interestMaker, Fixed6 interestLong, Fixed6 interestShort, UFixed6 interestFee) {\\n        UFixed6 notional = context.fromPosition.long.add(context.fromPosition.short).min(context.fromPosition.maker).mul(context.fromOracleVersion.price.abs());\\n\\n        // Compute maker interest\\n        UFixed6 interest = context.riskParameter.utilizationCurve.accumulate(\\n            context.fromPosition.utilization(context.riskParameter),\\n            context.fromOracleVersion.timestamp,\\n            context.toOracleVersion.timestamp,\\n            notional\\n        );\\n\\n        // Compute fee\\n        interestFee = interest.mul(context.marketParameter.interestFee);\\n\\n        // Adjust long and short funding with spread\\n        interestLong = Fixed6Lib.from(\\n            context.fromPosition.major().isZero() ?\\n            interest :\\n            interest.muldiv(context.fromPosition.long, context.fromPosition.long.add(context.fromPosition.short))\\n        );\\n        interestShort = Fixed6Lib.from(interest).sub(interestLong);\\n        interestMaker = Fixed6Lib.from(interest.sub(interestFee));\\n\\n        interestLong = interestLong.mul(Fixed6Lib.NEG_ONE);\\n        interestShort = interestShort.mul(Fixed6Lib.NEG_ONE);\\n        next.makerValue.increment(interestMaker, context.fromPosition.maker);\\n        next.longValue.increment(interestLong, context.fromPosition.long);\\n        next.shortValue.increment(interestShort, context.fromPosition.short);\\n    }\\n\\n    /// @notice Globally accumulates position profit & loss since last oracle update\\n    /// @param next The Version object to update\\n    /// @param context The accumulation context\\n    /// @return pnlMaker The total pnl accrued by makers\\n    /// @return pnlLong The total pnl accrued by longs\\n    /// @return pnlShort The total pnl accrued by shorts\\n    function _accumulatePNL(\\n        Version memory next,\\n        VersionAccumulationContext memory context\\n    ) private pure returns (Fixed6 pnlMaker, Fixed6 pnlLong, Fixed6 pnlShort) {\\n        pnlLong = context.toOracleVersion.price.sub(context.fromOracleVersion.price)\\n            .mul(Fixed6Lib.from(context.fromPosition.longSocialized()));\\n        pnlShort = context.fromOracleVersion.price.sub(context.toOracleVersion.price)\\n            .mul(Fixed6Lib.from(context.fromPosition.shortSocialized()));\\n        pnlMaker = pnlLong.add(pnlShort).mul(Fixed6Lib.NEG_ONE);\\n\\n        next.longValue.increment(pnlLong, context.fromPosition.long);\\n        next.shortValue.increment(pnlShort, context.fromPosition.short);\\n        next.makerValue.increment(pnlMaker, context.fromPosition.maker);\\n    }\\n}\\n\",\"keccak256\":\"0xf3468aeda53f7e0d58b88b5d052a87c8cfa665da34c23b3e0b9434aa83bd57ce\",\"license\":\"Apache-2.0\"},\"@equilibria/perennial-v2/contracts/types/Checkpoint.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.13;\\n\\nimport \\\"@equilibria/root/accumulator/types/Accumulator6.sol\\\";\\nimport \\\"./OracleVersion.sol\\\";\\nimport \\\"./RiskParameter.sol\\\";\\nimport \\\"./Global.sol\\\";\\nimport \\\"./Local.sol\\\";\\nimport \\\"./Order.sol\\\";\\nimport \\\"./Version.sol\\\";\\n\\n/// @dev Checkpoint type\\nstruct Checkpoint {\\n    /// @dev The trade fee that the order incurred at the checkpoint settlement\\n    Fixed6 tradeFee;\\n\\n    // @dev The settlement and liquidation fee that the order incurred at the checkpoint settlement\\n    UFixed6 settlementFee;\\n\\n    /// @dev The amount deposited or withdrawn at the checkpoint settlement\\n    Fixed6 transfer;\\n\\n    /// @dev The collateral at the time of the checkpoint settlement\\n    Fixed6 collateral;\\n}\\nstruct CheckpointStorage { uint256 slot0; }\\nusing CheckpointStorageLib for CheckpointStorage global;\\n\\n/// @dev Manually encodes and decodes the Checkpoint struct into storage.\\n///      (external-safe): this library is safe to externalize\\n///\\n///     struct StoredCheckpoint {\\n///         /* slot 0 */\\n///         int48 tradeFee;\\n///         uint48 settlementFee;\\n///         int64 transfer;\\n///         int64 collateral;\\n///     }\\n///\\nlibrary CheckpointStorageLib {\\n    // sig: 0xba85116a\\n    error CheckpointStorageInvalidError();\\n\\n    function read(CheckpointStorage storage self) internal view returns (Checkpoint memory) {\\n        uint256 slot0 = self.slot0;\\n        return Checkpoint(\\n            Fixed6.wrap(int256(slot0 << (256 - 48)) >> (256 - 48)),\\n            UFixed6.wrap(uint256(slot0 << (256 - 48 - 48)) >> (256 - 48)),\\n            Fixed6.wrap(int256(slot0 << (256 - 48 - 48 - 64)) >> (256 - 64)),\\n            Fixed6.wrap(int256(slot0 << (256 - 48 - 48 - 64 - 64)) >> (256 - 64))\\n        );\\n    }\\n\\n    function store(CheckpointStorage storage self, Checkpoint memory newValue) external {\\n        if (newValue.tradeFee.gt(Fixed6.wrap(type(int48).max))) revert CheckpointStorageInvalidError();\\n        if (newValue.tradeFee.lt(Fixed6.wrap(type(int48).min))) revert CheckpointStorageInvalidError();\\n        if (newValue.settlementFee.gt(UFixed6.wrap(type(uint48).max))) revert CheckpointStorageInvalidError();\\n        if (newValue.transfer.gt(Fixed6.wrap(type(int64).max))) revert CheckpointStorageInvalidError();\\n        if (newValue.transfer.lt(Fixed6.wrap(type(int64).min))) revert CheckpointStorageInvalidError();\\n        if (newValue.collateral.gt(Fixed6.wrap(type(int64).max))) revert CheckpointStorageInvalidError();\\n        if (newValue.collateral.lt(Fixed6.wrap(type(int64).min))) revert CheckpointStorageInvalidError();\\n\\n        uint256 encoded0 =\\n            uint256(Fixed6.unwrap(newValue.tradeFee)        << (256 - 48)) >> (256 - 48) |\\n            uint256(UFixed6.unwrap(newValue.settlementFee)  << (256 - 48)) >> (256 - 48 - 48) |\\n            uint256(Fixed6.unwrap(newValue.transfer)        << (256 - 64)) >> (256 - 48 - 48 - 64) |\\n            uint256(Fixed6.unwrap(newValue.collateral)      << (256 - 64)) >> (256 - 48 - 48 - 64 - 64);\\n\\n        assembly {\\n            sstore(self.slot, encoded0)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x19a22222c8bcaa8b09d17023f057b85e70eb0d7be3894f16d41f5872a7957643\",\"license\":\"Apache-2.0\"},\"@equilibria/perennial-v2/contracts/types/Global.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.13;\\n\\nimport \\\"@equilibria/root/pid/types/PAccumulator6.sol\\\";\\nimport \\\"./ProtocolParameter.sol\\\";\\nimport \\\"./MarketParameter.sol\\\";\\nimport \\\"../libs/VersionLib.sol\\\";\\n\\n/// @dev Global type\\nstruct Global {\\n    /// @dev The current position ID\\n    uint256 currentId;\\n\\n    /// @dev The latest position id\\n    uint256 latestId;\\n\\n    /// @dev The accrued protocol fee\\n    UFixed6 protocolFee;\\n\\n    /// @dev The accrued oracle fee\\n    UFixed6 oracleFee;\\n\\n    /// @dev The accrued risk fee\\n    UFixed6 riskFee;\\n\\n    /// @dev The latest valid price in the market\\n    Fixed6 latestPrice;\\n\\n    /// @dev The accumulated market exposure\\n    Fixed6 exposure;\\n\\n    /// @dev The current PAccumulator state\\n    PAccumulator6 pAccumulator;\\n}\\nusing GlobalLib for Global global;\\nstruct GlobalStorage { uint256 slot0; uint256 slot1; } // SECURITY: must remain at (2) slots\\nusing GlobalStorageLib for GlobalStorage global;\\n\\n/// @title Global\\n/// @dev (external-unsafe): this library must be used internally only\\n/// @notice Holds the global market state\\nlibrary GlobalLib {\\n    /// @notice Updates market exposure based on a change in the risk parameter configuration\\n    /// @param self The Global object to update\\n    /// @param latestRiskParameter The latest risk parameter configuration\\n    /// @param newRiskParameter The new risk parameter configuration\\n    /// @param latestPosition The latest position\\n    function update(\\n        Global memory self,\\n        RiskParameter memory latestRiskParameter,\\n        RiskParameter memory newRiskParameter,\\n        Position memory latestPosition\\n    ) internal pure {\\n        Fixed6 exposureChange = latestRiskParameter.takerFee\\n            .exposure(newRiskParameter.takerFee, latestPosition.skew(), self.latestPrice.abs());\\n        self.exposure = self.exposure.sub(exposureChange);\\n    }\\n\\n    /// @notice Increments the fees by `amount` using current parameters\\n    /// @dev Computes the fees based on the current market parameters\\n    ///      market fee -> trade fee + market's trade offset + funding fee + interest fee\\n    ///        1. oracle fee taken out as a percentage of what's left of market fee\\n    ///        2. risk fee taken out as a percentage of what's left of market fee\\n    ///        3. protocol fee is what's left of market fee\\n    /// @param self The Global object to update\\n    /// @param newLatestId The new latest position id\\n    /// @param accumulation The accumulation result\\n    /// @param marketParameter The current market parameters\\n    /// @param oracleReceipt The receipt of the corresponding oracle version\\n    function update(\\n        Global memory self,\\n        uint256 newLatestId,\\n        VersionAccumulationResponse memory accumulation,\\n        MarketParameter memory marketParameter,\\n        OracleReceipt memory oracleReceipt\\n    ) internal pure {\\n        UFixed6 marketFee = accumulation.marketFee;\\n\\n        UFixed6 oracleFee = marketFee.mul(oracleReceipt.oracleFee);\\n        marketFee = marketFee.sub(oracleFee);\\n\\n        UFixed6 riskFee = marketFee.mul(marketParameter.riskFee);\\n        marketFee = marketFee.sub(riskFee);\\n\\n        self.latestId = newLatestId;\\n        self.protocolFee = self.protocolFee.add(marketFee);\\n        self.oracleFee = self.oracleFee.add(accumulation.settlementFee).add(oracleFee);\\n        self.riskFee = self.riskFee.add(riskFee);\\n        self.exposure = self.exposure.add(accumulation.marketExposure);\\n    }\\n\\n    /// @notice Overrides the price of the oracle with the latest global version if it is empty\\n    /// @param self The Global object to read from\\n    /// @param oracleVersion The oracle version to update\\n    function overrideIfZero(Global memory self, OracleVersion memory oracleVersion) internal pure {\\n        if (oracleVersion.price.isZero()) oracleVersion.price = self.latestPrice;\\n    }\\n}\\n\\n/// @dev Manually encodes and decodes the Global struct into storage.\\n///      (external-safe): this library is safe to externalize\\n///\\n///     struct StoredGlobal {\\n///         /* slot 0 */\\n///         uint32 currentId;           // <= 4.29b\\n///         uint32 latestId;            // <= 4.29b\\n///         uint48 protocolFee;         // <= 281m\\n///         uint48 oracleFee;           // <= 281m\\n///         uint48 riskFee;             // <= 281m\\n///\\n///         /* slot 1 */\\n///         int32 pAccumulator.value;   // <= 214000%\\n///         int24 pAccumulator.skew;    // <= 838%\\n///         int64 latestPrice;          // <= 9.22t\\n///         int64 exposure;             // <= 9.22t\\n///     }\\n///\\nlibrary GlobalStorageLib {\\n    // sig: 0x2142bc27\\n    error GlobalStorageInvalidError();\\n\\n    function read(GlobalStorage storage self) internal view returns (Global memory) {\\n        (uint256 slot0, uint256 slot1) = (self.slot0, self.slot1);\\n        return Global(\\n            uint256(slot0 << (256 - 32)) >> (256 - 32),\\n            uint256(slot0 << (256 - 32 - 32)) >> (256 - 32),\\n            UFixed6.wrap(uint256(slot0 << (256 - 32 - 32 - 48)) >> (256 - 48)),\\n            UFixed6.wrap(uint256(slot0 << (256 - 32 - 32 - 48 - 48)) >> (256 - 48)),\\n            UFixed6.wrap(uint256(slot0 << (256 - 32 - 32 - 48 - 48 - 48)) >> (256 - 48)),\\n            Fixed6.wrap(int256(slot1 << (256 - 32 - 24 - 64)) >> (256 - 64)),\\n            Fixed6.wrap(int256(slot1 << (256 - 32 - 24 - 64 - 64)) >> (256 - 64)),\\n            PAccumulator6(\\n                Fixed6.wrap(int256(slot1 << (256 - 32)) >> (256 - 32)),\\n                Fixed6.wrap(int256(slot1 << (256 - 32 - 24)) >> (256 - 24))\\n            )\\n        );\\n    }\\n\\n    function store(GlobalStorage storage self, Global memory newValue) external {\\n        if (newValue.currentId > uint256(type(uint32).max)) revert GlobalStorageInvalidError();\\n        if (newValue.latestId > uint256(type(uint32).max)) revert GlobalStorageInvalidError();\\n        if (newValue.protocolFee.gt(UFixed6.wrap(type(uint48).max))) revert GlobalStorageInvalidError();\\n        if (newValue.oracleFee.gt(UFixed6.wrap(type(uint48).max))) revert GlobalStorageInvalidError();\\n        if (newValue.riskFee.gt(UFixed6.wrap(type(uint48).max))) revert GlobalStorageInvalidError();\\n        if (newValue.latestPrice.gt(Fixed6.wrap(type(int64).max))) revert GlobalStorageInvalidError();\\n        if (newValue.latestPrice.lt(Fixed6.wrap(type(int64).min))) revert GlobalStorageInvalidError();\\n        if (newValue.exposure.gt(Fixed6.wrap(type(int64).max))) revert GlobalStorageInvalidError();\\n        if (newValue.exposure.lt(Fixed6.wrap(type(int64).min))) revert GlobalStorageInvalidError();\\n        if (newValue.pAccumulator._value.gt(Fixed6.wrap(type(int32).max))) revert GlobalStorageInvalidError();\\n        if (newValue.pAccumulator._value.lt(Fixed6.wrap(type(int32).min))) revert GlobalStorageInvalidError();\\n        if (newValue.pAccumulator._skew.gt(Fixed6.wrap(type(int24).max))) revert GlobalStorageInvalidError();\\n        if (newValue.pAccumulator._skew.lt(Fixed6.wrap(type(int24).min))) revert GlobalStorageInvalidError();\\n\\n        uint256 encoded0 =\\n            uint256(newValue.currentId << (256 - 32)) >> (256 - 32) |\\n            uint256(newValue.latestId << (256 - 32)) >> (256 - 32 - 32) |\\n            uint256(UFixed6.unwrap(newValue.protocolFee) << (256 - 48)) >> (256 - 32 - 32 - 48) |\\n            uint256(UFixed6.unwrap(newValue.oracleFee) << (256 - 48)) >> (256 - 32 - 32 - 48 - 48) |\\n            uint256(UFixed6.unwrap(newValue.riskFee) << (256 - 48)) >> (256 - 32 - 32 - 48 - 48 - 48);\\n\\n        uint256 encoded1 =\\n            uint256(Fixed6.unwrap(newValue.pAccumulator._value) << (256 - 32)) >> (256 - 32) |\\n            uint256(Fixed6.unwrap(newValue.pAccumulator._skew) << (256 - 24)) >> (256 - 32 - 24) |\\n            uint256(Fixed6.unwrap(newValue.latestPrice) << (256 - 64)) >> (256 - 32 - 24 - 64) |\\n            uint256(Fixed6.unwrap(newValue.exposure) << (256 - 64)) >> (256 - 32 - 24 - 64 - 64);\\n\\n        assembly {\\n            sstore(self.slot, encoded0)\\n            sstore(add(self.slot, 1), encoded1)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x44686dc21f3a15b1fd1ea0437a893db6501a89508f9a74302707f8c9dcf8ec1f\",\"license\":\"Apache-2.0\"},\"@equilibria/perennial-v2/contracts/types/Guarantee.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.13;\\n\\nimport \\\"./Order.sol\\\";\\n\\n/// @dev Guarantee type\\nstruct Guarantee {\\n    /// @dev The quantity of guarantees that that will be exempt from the settlement fee\\n    uint256 orders;\\n\\n    /// @dev The notional of the magnitude with the price override (local only)\\n    Fixed6 notional;\\n\\n    /// @dev The positive skew (open long / close short) guarantee size\\n    UFixed6 takerPos;\\n\\n    /// @dev The negative skew (close long / open short) guarantee size\\n    UFixed6 takerNeg;\\n\\n    /// @dev The magnitude of the guarantee that be exempt from the trade fee\\n    UFixed6 takerFee;\\n\\n    /// @dev The referral fee multiplied by the size applicable to the referral (local only)\\n    UFixed6 referral;\\n}\\nusing GuaranteeLib for Guarantee global;\\nstruct GuaranteeStorageGlobal { uint256 slot0; uint256 slot1; } // SECURITY: must remain at (2) slots\\nusing GuaranteeStorageGlobalLib for GuaranteeStorageGlobal global;\\nstruct GuaranteeStorageLocal { uint256 slot0; uint256 slot1; } // SECURITY: must remain at (2) slots\\nusing GuaranteeStorageLocalLib for GuaranteeStorageLocal global;\\n\\n/// @title Guarantee\\n/// @dev (external-unsafe): this library must be used internally only\\n/// @notice Holds the state for an account's update guarantee\\nlibrary GuaranteeLib {\\n    /// @notice Prepares the next guarantee from the current guarantee\\n    /// @param self The guarantee object to update\\n    function next(Guarantee memory self) internal pure  {\\n        invalidate(self);\\n        self.orders = 0;\\n    }\\n\\n    /// @notice Invalidates the guarantee\\n    /// @param self The guarantee object to update\\n    function invalidate(Guarantee memory self) internal pure {\\n        (self.takerPos, self.takerNeg, self.notional, self.takerFee, self.referral) =\\n            (UFixed6Lib.ZERO, UFixed6Lib.ZERO, Fixed6Lib.ZERO, UFixed6Lib.ZERO, UFixed6Lib.ZERO);\\n    }\\n\\n    /// @notice Creates a new guarantee from an order\\n    /// @param order The order to create the guarantee from\\n    /// @param priceOverride The price override\\n    /// @param referralFee The the percentage of the subtractive fee to take as a solver referral fee\\n    /// @param chargeSettlementFee Whether the order will still be charged the settlement fee\\n    /// @param chargeTradeFee Whether the order will still be charged the trade fee\\n    /// @return newGuarantee The resulting guarantee\\n    function from(\\n        Order memory order,\\n        Fixed6 priceOverride,\\n        UFixed6 referralFee,\\n        bool chargeSettlementFee,\\n        bool chargeTradeFee\\n    ) internal pure returns (Guarantee memory newGuarantee) {\\n        // maker orders and one intent order per fill will be required to pay the settlement fee\\n        if (!order.takerTotal().isZero() && !chargeSettlementFee) newGuarantee.orders = order.orders;\\n\\n        (newGuarantee.takerPos, newGuarantee.takerNeg) =\\n            (order.longPos.add(order.shortNeg), order.longNeg.add(order.shortPos));\\n        newGuarantee.takerFee = chargeTradeFee ? UFixed6Lib.ZERO : order.takerTotal();\\n\\n        newGuarantee.notional = taker(newGuarantee).mul(priceOverride);\\n        newGuarantee.referral = order.takerReferral.mul(referralFee);\\n    }\\n\\n    /// @notice Returns the taker delta of the guarantee\\n    /// @param self The guarantee object to check\\n    /// @return The taker delta of the guarantee\\n    function taker(Guarantee memory self) internal pure returns (Fixed6) {\\n        return Fixed6Lib.from(self.takerPos).sub(Fixed6Lib.from(self.takerNeg));\\n    }\\n\\n    /// @notice Returns the total taker delta of the guarantee\\n    /// @param self The guarantee object to check\\n    /// @return The total taker delta of the guarantee\\n    function takerTotal(Guarantee memory self) internal pure returns (UFixed6) {\\n        return self.takerPos.add(self.takerNeg);\\n    }\\n\\n    /// @notice Updates the current global guarantee with a new local guarantee\\n    /// @param self The guarantee object to update\\n    /// @param guarantee The new guarantee\\n    function add(Guarantee memory self, Guarantee memory guarantee) internal pure {\\n        self.orders = self.orders + guarantee.orders;\\n        (self.notional, self.takerPos, self.takerNeg, self.takerFee, self.referral) = (\\n            self.notional.add(guarantee.notional),\\n            self.takerPos.add(guarantee.takerPos),\\n            self.takerNeg.add(guarantee.takerNeg),\\n            self.takerFee.add(guarantee.takerFee),\\n            self.referral.add(guarantee.referral)\\n        );\\n    }\\n}\\n\\n/// @dev Manually encodes and decodes the global Guarantee struct into storage.\\n///      (external-safe): this library is safe to externalize\\n///\\n///     struct StoredGuaranteeGlobal {\\n///         /* slot 0 */\\n///         uint32 orders;\\n///         uint64 takerPos;\\n///         uint64 takerNeg;\\n///         uint64 takerFee;\\n///     }\\n///\\nlibrary GuaranteeStorageGlobalLib {\\n    function read(GuaranteeStorageGlobal storage self) internal view returns (Guarantee memory) {\\n        uint256 slot0 = self.slot0;\\n        return Guarantee(\\n            uint256(slot0 << (256 - 32)) >> (256 - 32),\\n            Fixed6Lib.ZERO,\\n            UFixed6.wrap(uint256(slot0 << (256 - 32 - 64)) >> (256 - 64)),\\n            UFixed6.wrap(uint256(slot0 << (256 - 32 - 64 - 64)) >> (256 - 64)),\\n            UFixed6.wrap(uint256(slot0 << (256 - 32 - 64 - 64 - 64)) >> (256 - 64)),\\n            UFixed6Lib.ZERO\\n        );\\n    }\\n\\n    function store(GuaranteeStorageGlobal storage self, Guarantee memory newValue) internal {\\n        GuaranteeStorageLib.validate(newValue);\\n\\n        uint256 encoded0 =\\n            uint256(newValue.orders << (256 - 32)) >> (256 - 32) |\\n            uint256(UFixed6.unwrap(newValue.takerPos) << (256 - 64)) >> (256 - 32 - 64) |\\n            uint256(UFixed6.unwrap(newValue.takerNeg) << (256 - 64)) >> (256 - 32 - 64 - 64) |\\n            uint256(UFixed6.unwrap(newValue.takerFee) << (256 - 64)) >> (256 - 32 - 64 - 64 - 64);\\n\\n        assembly {\\n            sstore(self.slot, encoded0)\\n        }\\n    }\\n}\\n\\n/// @dev Manually encodes and decodes the local Guarantee struct into storage.\\n///      (external-safe): this library is safe to externalize\\n///\\n///     struct StoredGuaranteeLocal {\\n///         /* slot 0 */\\n///         uint32 orders;\\n///         int64 notional;\\n///         uint64 takerPos;\\n///         uint64 takerNeg;\\n///\\n///         /* slot 1 */\\n///         uint64 takerFee;\\n///         uint64 referral;\\n///     }\\n///\\nlibrary GuaranteeStorageLocalLib {\\n    function read(GuaranteeStorageLocal storage self) internal view returns (Guarantee memory) {\\n        (uint256 slot0, uint256 slot1) = (self.slot0, self.slot1);\\n        return Guarantee(\\n            uint256(slot0 << (256 - 32)) >> (256 - 32),\\n            Fixed6.wrap(int256(slot0 << (256 - 32 - 64)) >> (256 - 64)),\\n            UFixed6.wrap(uint256(slot0 << (256 - 32 - 64 - 64)) >> (256 - 64)),\\n            UFixed6.wrap(uint256(slot0 << (256 - 32 - 64 - 64 - 64)) >> (256 - 64)),\\n            UFixed6.wrap(uint256(slot1 << (256 - 64)) >> (256 - 64)),\\n            UFixed6.wrap(uint256(slot1 << (256 - 64 - 64)) >> (256 - 64))\\n        );\\n    }\\n\\n    function store(GuaranteeStorageLocal storage self, Guarantee memory newValue) internal {\\n        GuaranteeStorageLib.validate(newValue);\\n\\n        if (newValue.notional.gt(Fixed6.wrap(type(int64).max))) revert GuaranteeStorageLib.GuaranteeStorageInvalidError();\\n        if (newValue.notional.lt(Fixed6.wrap(type(int64).min))) revert GuaranteeStorageLib.GuaranteeStorageInvalidError();\\n        if (newValue.referral.gt(UFixed6.wrap(type(uint64).max))) revert GuaranteeStorageLib.GuaranteeStorageInvalidError();\\n\\n        uint256 encoded0 =\\n            uint256(newValue.orders << (256 - 32)) >> (256 - 32) |\\n            uint256(Fixed6.unwrap(newValue.notional) << (256 - 64)) >> (256 - 32 - 64) |\\n            uint256(UFixed6.unwrap(newValue.takerPos) << (256 - 64)) >> (256 - 32 - 64 - 64) |\\n            uint256(UFixed6.unwrap(newValue.takerNeg) << (256 - 64)) >> (256 - 32 - 64 - 64 - 64);\\n        uint256 encode1 =\\n            uint256(UFixed6.unwrap(newValue.takerFee) << (256 - 64)) >> (256 - 64) |\\n            uint256(UFixed6.unwrap(newValue.referral) << (256 - 64)) >> (256 - 64 - 64);\\n\\n        assembly {\\n            sstore(self.slot, encoded0)\\n            sstore(add(self.slot, 1), encode1)\\n        }\\n    }\\n}\\n\\nlibrary GuaranteeStorageLib {\\n    // sig: 0xfd030f36\\n    error GuaranteeStorageInvalidError();\\n\\n    function validate(Guarantee memory newValue) internal pure {\\n        if (newValue.orders > type(uint32).max) revert GuaranteeStorageInvalidError();\\n        if (newValue.takerPos.gt(UFixed6.wrap(type(uint64).max))) revert GuaranteeStorageLib.GuaranteeStorageInvalidError();\\n        if (newValue.takerNeg.gt(UFixed6.wrap(type(uint64).max))) revert GuaranteeStorageLib.GuaranteeStorageInvalidError();\\n        if (newValue.takerFee.gt(UFixed6.wrap(type(uint64).max))) revert GuaranteeStorageLib.GuaranteeStorageInvalidError();\\n    }\\n}\",\"keccak256\":\"0x903286b562e3c7df7481792dea946edde53a369e93245a2645f914c290927c1d\",\"license\":\"Apache-2.0\"},\"@equilibria/perennial-v2/contracts/types/Local.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.13;\\n\\nimport \\\"@equilibria/root/number/types/Fixed6.sol\\\";\\nimport \\\"@equilibria/root/accumulator/types/UAccumulator6.sol\\\";\\nimport \\\"@equilibria/root/accumulator/types/Accumulator6.sol\\\";\\nimport \\\"./Version.sol\\\";\\nimport \\\"./Position.sol\\\";\\nimport \\\"./RiskParameter.sol\\\";\\nimport \\\"./OracleVersion.sol\\\";\\nimport \\\"./Order.sol\\\";\\nimport \\\"./Checkpoint.sol\\\";\\nimport \\\"../libs/CheckpointLib.sol\\\";\\n\\n/// @dev Local type\\nstruct Local {\\n    /// @dev The current position id\\n    uint256 currentId;\\n\\n    /// @dev The latest position id\\n    uint256 latestId;\\n\\n    /// @dev The collateral balance\\n    Fixed6 collateral;\\n\\n    /// @dev The claimable balance\\n    UFixed6 claimable;\\n}\\nusing LocalLib for Local global;\\nstruct LocalStorage { uint256 slot0; uint256 slot1; }\\nusing LocalStorageLib for LocalStorage global;\\n\\n/// @title Local\\n/// @dev (external-unsafe): this library must be used internally only\\n/// @notice Holds the local account state\\nlibrary LocalLib {\\n    /// @notice Updates the collateral with the new deposit or withdrwal\\n    /// @param self The Local object to update\\n    /// @param transfer The amount to update the collateral by\\n    function update(Local memory self, Fixed6 transfer) internal pure {\\n        self.collateral = self.collateral.add(transfer);\\n    }\\n\\n    /// @notice Updates the collateral with the new collateral change\\n    /// @param self The Local object to update\\n    /// @param accumulation The accumulation result\\n    function update(\\n        Local memory self,\\n        uint256 newId,\\n        CheckpointAccumulationResponse memory accumulation\\n    ) internal pure {\\n        self.collateral = self.collateral.add(accumulation.collateral).sub(Fixed6Lib.from(accumulation.liquidationFee));\\n        self.latestId = newId;\\n    }\\n\\n    /// @notice Updates the claimable with the new amount\\n    /// @param self The Local object to update\\n    /// @param amount The amount to update the claimable by\\n    function credit(Local memory self, UFixed6 amount) internal pure {\\n        self.claimable = self.claimable.add(amount);\\n    }\\n}\\n\\n/// @dev Manually encodes and decodes the Local struct into storage.\\n///      (external-safe): this library is safe to externalize\\n///\\n///     struct StoredLocal {\\n///         /* slot 0 */\\n///         uint32 currentId;       // <= 4.29b\\n///         uint32 latestId;        // <= 4.29b\\n///         int64 collateral;       // <= 9.22t\\n///         uint64 claimable;       // <= 18.44t\\n///         bytes4 __DEPRECATED;    // UNSAFE UNTIL RESET\\n///     }\\n///\\nlibrary LocalStorageLib {\\n    // sig: 0xc83d08ec\\n    error LocalStorageInvalidError();\\n\\n    function read(LocalStorage storage self) internal view returns (Local memory) {\\n        uint256 slot0 = self.slot0;\\n        return Local(\\n            uint256(slot0 << (256 - 32)) >> (256 - 32),\\n            uint256(slot0 << (256 - 32 - 32)) >> (256 - 32),\\n            Fixed6.wrap(int256(slot0 << (256 - 32 - 32 - 64)) >> (256 - 64)),\\n            UFixed6.wrap(uint256(slot0 << (256 - 32 - 32 - 64 - 64)) >> (256 - 64))\\n        );\\n    }\\n\\n    function store(LocalStorage storage self, Local memory newValue) internal {\\n        if (newValue.currentId > uint256(type(uint32).max)) revert LocalStorageInvalidError();\\n        if (newValue.latestId > uint256(type(uint32).max)) revert LocalStorageInvalidError();\\n        if (newValue.collateral.gt(Fixed6.wrap(type(int64).max))) revert LocalStorageInvalidError();\\n        if (newValue.collateral.lt(Fixed6.wrap(type(int64).min))) revert LocalStorageInvalidError();\\n        if (newValue.claimable.gt(UFixed6.wrap(type(uint64).max))) revert LocalStorageInvalidError();\\n\\n        uint256 encoded0 =\\n            uint256(newValue.currentId << (256 - 32)) >> (256 - 32) |\\n            uint256(newValue.latestId << (256 - 32)) >> (256 - 32 - 32) |\\n            uint256(Fixed6.unwrap(newValue.collateral) << (256 - 64)) >> (256 - 32 - 32 - 64) |\\n            uint256(UFixed6.unwrap(newValue.claimable) << (256 - 64)) >> (256 - 32 - 32 - 64 - 64);\\n\\n        assembly {\\n            sstore(self.slot, encoded0)\\n        }\\n    }\\n}\",\"keccak256\":\"0x813782df64338a7aec64164e5deeed64b10ba4a3656d63fb05083778045fef4d\",\"license\":\"Apache-2.0\"},\"@equilibria/perennial-v2/contracts/types/MarketParameter.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.13;\\n\\nimport \\\"@equilibria/root/token/types/Token18.sol\\\";\\nimport \\\"@equilibria/root/number/types/UFixed6.sol\\\";\\nimport \\\"./ProtocolParameter.sol\\\";\\n\\n/// @dev MarketParameter type\\nstruct MarketParameter {\\n    /// @dev The fee that is taken out of funding\\n    UFixed6 fundingFee;\\n\\n    /// @dev The fee that is taken out of interest\\n    UFixed6 interestFee;\\n\\n    /// @dev The fee that is taken out of maker and taker fees\\n    UFixed6 makerFee;\\n\\n    /// @dev The fee that is taken out of maker and taker fees\\n    UFixed6 takerFee;\\n\\n    /// @dev The share of the collected fees that is paid to the risk coordinator\\n    UFixed6 riskFee;\\n\\n    /// @dev The maximum amount of orders that can be pending at one time globally\\n    uint256 maxPendingGlobal;\\n\\n    /// @dev The maximum amount of orders that can be pending at one time per account\\n    uint256 maxPendingLocal;\\n\\n    /// @dev Whether the market is in close-only mode\\n    bool closed;\\n\\n     /// @dev Whether the market is in settle-only mode\\n    bool settle;\\n}\\nstruct MarketParameterStorage { uint256 slot0; uint256 slot1; } // SECURITY: must remain at (2) slots\\nusing MarketParameterStorageLib for MarketParameterStorage global;\\n\\n/// @dev Manually encodes and decodes the MarketParameter struct into storage.\\n///      (external-safe): this library is safe to externalize\\n///\\n///    struct StoredMarketParameter {\\n///        /* slot 0 */\\n///        uint24 fundingFee;          // <= 1677%\\n///        uint24 interestFee;         // <= 1677%\\n///        uint24 makerFee;            // <= 1677%\\n///        uint24 takerFee;            // <= 1677%\\n///        uint24 __unallocated__;     // <= 1677%\\n///        uint24 riskFee;             // <= 1677%\\n///        uint16 maxPendingGlobal;    // <= 65k\\n///        uint16 maxPendingLocal;     // <= 65k\\n///        uint48 __unallocated__;     // <= 281m\\n///        uint8 flags;\\n///    }\\n///\\nlibrary MarketParameterStorageLib {\\n    // sig: 0x7c53e926\\n    error MarketParameterStorageInvalidError();\\n\\n    function read(MarketParameterStorage storage self) internal view returns (MarketParameter memory) {\\n        uint256 slot0 = self.slot0;\\n\\n        uint256 flags = uint256(slot0 << (256 - 24 - 24 - 24 - 24 - 24 - 24 - 16 - 16 - 48 - 8)) >> (256 - 8);\\n        (bool closed, bool settle) =\\n            (flags & 0x04 == 0x04, flags & 0x08 == 0x08);\\n\\n        return MarketParameter(\\n            UFixed6.wrap(uint256(slot0 << (256 - 24)) >> (256 - 24)),\\n            UFixed6.wrap(uint256(slot0 << (256 - 24 - 24)) >> (256 - 24)),\\n            UFixed6.wrap(uint256(slot0 << (256 - 24 - 24 - 24)) >> (256 - 24)),\\n            UFixed6.wrap(uint256(slot0 << (256 - 24 - 24 - 24 - 24)) >> (256 - 24)),\\n            UFixed6.wrap(uint256(slot0 << (256 - 24 - 24 - 24 - 24 - 24 - 24)) >> (256 - 24)),\\n            uint256(slot0 << (256 - 24 - 24 - 24 - 24 - 24 - 24 - 16)) >> (256 - 16),\\n            uint256(slot0 << (256 - 24 - 24 - 24 - 24 - 24 - 24 - 16 - 16)) >> (256 - 16),\\n            closed,\\n            settle\\n        );\\n    }\\n\\n    function validate(MarketParameter memory self, ProtocolParameter memory protocolParameter) private pure {\\n        if (self.fundingFee.max(self.interestFee).max(self.makerFee).max(self.takerFee).gt(protocolParameter.maxCut))\\n            revert MarketParameterStorageInvalidError();\\n\\n        if (self.riskFee.gt(UFixed6Lib.ONE))\\n            revert MarketParameterStorageInvalidError();\\n    }\\n\\n    function validateAndStore(\\n        MarketParameterStorage storage self,\\n        MarketParameter memory newValue,\\n        ProtocolParameter memory protocolParameter\\n    ) external {\\n        validate(newValue, protocolParameter);\\n\\n        if (newValue.maxPendingGlobal > uint256(type(uint16).max)) revert MarketParameterStorageInvalidError();\\n        if (newValue.maxPendingLocal > uint256(type(uint16).max)) revert MarketParameterStorageInvalidError();\\n\\n        _store(self, newValue);\\n    }\\n\\n    function _store(MarketParameterStorage storage self, MarketParameter memory newValue) private {\\n        uint256 flags = (newValue.closed ? 0x04 : 0x00) |\\n            (newValue.settle ? 0x08 : 0x00);\\n\\n        uint256 encoded0 =\\n            uint256(UFixed6.unwrap(newValue.fundingFee) << (256 - 24)) >> (256 - 24) |\\n            uint256(UFixed6.unwrap(newValue.interestFee) << (256 - 24)) >> (256 - 24 - 24) |\\n            uint256(UFixed6.unwrap(newValue.makerFee) << (256 - 24)) >> (256 - 24 - 24 - 24) |\\n            uint256(UFixed6.unwrap(newValue.takerFee) << (256 - 24)) >> (256 - 24 - 24 - 24 - 24) |\\n            uint256(UFixed6.unwrap(newValue.riskFee) << (256 - 24)) >> (256 - 24 - 24 - 24 - 24 - 24 - 24) |\\n            uint256(newValue.maxPendingGlobal << (256 - 16)) >> (256 - 24 - 24 - 24 - 24 - 24 - 24 - 16) |\\n            uint256(newValue.maxPendingLocal << (256 - 16)) >> (256 - 24 - 24 - 24 - 24 - 24 - 24 - 16 - 16) |\\n            uint256(flags << (256 - 8)) >> (256 - 24 - 24 - 24 - 24 - 24 - 24 - 16 - 16 - 48 - 8);\\n\\n        assembly {\\n            sstore(self.slot, encoded0)\\n        }\\n    }\\n}\",\"keccak256\":\"0x95338665ec5f9b4f85492ca8c02f5a2a29cf08933bd899f072f062eb966dcc23\",\"license\":\"Apache-2.0\"},\"@equilibria/perennial-v2/contracts/types/OracleReceipt.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.13;\\n\\nimport { UFixed6 } from \\\"@equilibria/root/number/types/UFixed6.sol\\\";\\n\\n/// @dev The cost receipt of for a corresponding oracle version\\nstruct OracleReceipt {\\n    /// @dev The fixed settlement fee of the request\\n    UFixed6 settlementFee;\\n\\n    /// @dev The relative oracle fee percentage of the request\\n    UFixed6 oracleFee;\\n}\\n\",\"keccak256\":\"0x686ef41f5b492f41fdbfe8b27afd42beac4d70b08e90e6f93e6ecffbe9b175a2\",\"license\":\"Apache-2.0\"},\"@equilibria/perennial-v2/contracts/types/OracleVersion.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.13;\\n\\nimport \\\"@equilibria/root/number/types/Fixed6.sol\\\";\\n\\n/// @dev A singular oracle version with its corresponding data\\nstruct OracleVersion {\\n    /// @dev the timestamp of the oracle update\\n    uint256 timestamp;\\n\\n    /// @dev The oracle price of the corresponding version\\n    Fixed6 price;\\n\\n    /// @dev Whether the version is valid\\n    bool valid;\\n}\\n\",\"keccak256\":\"0x543d36affe7b862bf72fac9cfb40a639d2b3fe1b32d9181552d523bc64d9a0f7\",\"license\":\"Apache-2.0\"},\"@equilibria/perennial-v2/contracts/types/Order.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.13;\\n\\nimport \\\"./OracleVersion.sol\\\";\\nimport \\\"./RiskParameter.sol\\\";\\nimport \\\"./Global.sol\\\";\\nimport \\\"./Local.sol\\\";\\nimport \\\"./Position.sol\\\";\\nimport \\\"./MarketParameter.sol\\\";\\n\\n/// @dev Order type\\nstruct Order {\\n    /// @dev The timestamp of the order\\n    uint256 timestamp;\\n\\n    /// @dev The quantity of orders that are included in this order\\n    uint256 orders;\\n\\n    /// @dev The change in the collateral\\n    Fixed6 collateral;\\n\\n    /// @dev The positive skew maker order size\\n    UFixed6 makerPos;\\n\\n    /// @dev The negative skew maker order size\\n    UFixed6 makerNeg;\\n\\n    /// @dev The positive skew long order size\\n    UFixed6 longPos;\\n\\n    /// @dev The negative skew long order size\\n    UFixed6 longNeg;\\n\\n    /// @dev The positive skew short order size\\n    UFixed6 shortPos;\\n\\n    /// @dev The negative skew short order size\\n    UFixed6 shortNeg;\\n\\n    /// @dev The protection status semaphore (local only)\\n    uint256 protection;\\n\\n    /// @dev The referral fee multiplied by the size applicable to the referral\\n    UFixed6 makerReferral;\\n\\n    /// @dev The referral fee multiplied by the size applicable to the referral\\n    UFixed6 takerReferral;\\n}\\nusing OrderLib for Order global;\\nstruct OrderStorageGlobal { uint256 slot0; uint256 slot1; uint256 slot2; } // SECURITY: must remain at (3) slots\\nusing OrderStorageGlobalLib for OrderStorageGlobal global;\\nstruct OrderStorageLocal { uint256 slot0; uint256 slot1; } // SECURITY: must remain at (2) slots\\nusing OrderStorageLocalLib for OrderStorageLocal global;\\n\\n/// @title Order\\n/// @dev (external-unsafe): this library must be used internally only\\n/// @notice Holds the state for an account's update order\\nlibrary OrderLib {\\n    /// @notice Returns whether the order is ready to be settled\\n    /// @param self The order object to check\\n    /// @param latestVersion The latest oracle version\\n    /// @return Whether the order is ready to be settled\\n    function ready(Order memory self, OracleVersion memory latestVersion) internal pure returns (bool) {\\n        return latestVersion.timestamp >= self.timestamp;\\n    }\\n\\n    /// @notice Prepares the next order from the current order\\n    /// @param self The order object to update\\n    /// @param timestamp The current timestamp\\n    function next(Order memory self, uint256 timestamp) internal pure  {\\n        invalidate(self);\\n        (self.timestamp, self.orders, self.collateral, self.protection) = (timestamp, 0, Fixed6Lib.ZERO, 0);\\n    }\\n\\n    /// @notice Invalidates the order\\n    /// @param self The order object to update\\n    function invalidate(Order memory self) internal pure {\\n        (self.makerReferral, self.takerReferral) =\\n            (UFixed6Lib.ZERO, UFixed6Lib.ZERO);\\n        (self.makerPos, self.makerNeg, self.longPos, self.longNeg, self.shortPos, self.shortNeg) =\\n            (UFixed6Lib.ZERO, UFixed6Lib.ZERO, UFixed6Lib.ZERO, UFixed6Lib.ZERO, UFixed6Lib.ZERO, UFixed6Lib.ZERO);\\n    }\\n\\n    /// @notice Creates a new order from the an intent order request\\n    /// @param timestamp The current timestamp\\n    /// @param position The current position\\n    /// @param amount The magnitude and direction of the order\\n    /// @param collateral The change in the collateral\\n    /// @param referralFee The referral fee\\n    /// @return newOrder The resulting order\\n    function from(\\n        uint256 timestamp,\\n        Position memory position,\\n        Fixed6 amount,\\n        Fixed6 collateral,\\n        UFixed6 referralFee\\n    ) internal pure returns (Order memory newOrder) {\\n        newOrder.timestamp = timestamp;\\n        newOrder.collateral = collateral;\\n        newOrder.orders = amount.isZero() ? 0 : 1;\\n        newOrder.takerReferral = amount.abs().mul(referralFee);\\n\\n        // If the order is not counter to the current position, it is opening\\n        if (amount.sign() == 0 || position.skew().sign() == 0 || position.skew().sign() == amount.sign()) {\\n            newOrder.longPos = amount.max(Fixed6Lib.ZERO).abs();\\n            newOrder.shortPos = amount.min(Fixed6Lib.ZERO).abs();\\n\\n        // If the order is counter to the current position, it is closing\\n        } else {\\n            newOrder.shortNeg = amount.max(Fixed6Lib.ZERO).abs();\\n            newOrder.longNeg = amount.min(Fixed6Lib.ZERO).abs();\\n        }\\n    }\\n\\n    /// @notice Creates a new order from the current position and an update request\\n    /// @param timestamp The current timestamp\\n    /// @param position The current position\\n    /// @param collateral The change in the collateral\\n    /// @param newMaker The new maker\\n    /// @param newLong The new long\\n    /// @param newShort The new short\\n    /// @param protect Whether to protect the order\\n    /// @param referralFee The referral fee\\n    /// @return newOrder The resulting order\\n    function from(\\n        uint256 timestamp,\\n        Position memory position,\\n        Fixed6 collateral,\\n        UFixed6 newMaker,\\n        UFixed6 newLong,\\n        UFixed6 newShort,\\n        bool protect,\\n        UFixed6 referralFee\\n    ) internal pure returns (Order memory newOrder) {\\n        (Fixed6 makerAmount, Fixed6 longAmount, Fixed6 shortAmount) = (\\n            Fixed6Lib.from(newMaker).sub(Fixed6Lib.from(position.maker)),\\n            Fixed6Lib.from(newLong).sub(Fixed6Lib.from(position.long)),\\n            Fixed6Lib.from(newShort).sub(Fixed6Lib.from(position.short))\\n        );\\n\\n        UFixed6 referral = makerAmount.abs().add(longAmount.abs()).add(shortAmount.abs()).mul(referralFee);\\n\\n        newOrder = Order(\\n            timestamp,\\n            0,\\n            collateral,\\n            makerAmount.max(Fixed6Lib.ZERO).abs(),\\n            makerAmount.min(Fixed6Lib.ZERO).abs(),\\n            longAmount.max(Fixed6Lib.ZERO).abs(),\\n            longAmount.min(Fixed6Lib.ZERO).abs(),\\n            shortAmount.max(Fixed6Lib.ZERO).abs(),\\n            shortAmount.min(Fixed6Lib.ZERO).abs(),\\n            protect ? 1 : 0,\\n            makerAmount.isZero() ? UFixed6Lib.ZERO : referral,\\n            makerAmount.isZero() ? referral : UFixed6Lib.ZERO\\n        );\\n        if (!isEmpty(newOrder)) newOrder.orders = 1;\\n    }\\n\\n    /// @notice Returns whether the order increases any of the account's positions\\n    /// @return Whether the order increases any of the account's positions\\n    function increasesPosition(Order memory self) internal pure returns (bool) {\\n        return increasesMaker(self) || increasesTaker(self);\\n    }\\n\\n    /// @notice Returns whether the order increases the account's long or short positions\\n    /// @return Whether the order increases the account's long or short positions\\n    function increasesTaker(Order memory self) internal pure returns (bool) {\\n        return !self.longPos.isZero() || !self.shortPos.isZero();\\n    }\\n\\n    /// @notice Returns whether the order increases the account's maker position\\n    /// @return Whether the order increases the account's maker positions\\n    function increasesMaker(Order memory self) internal pure returns (bool) {\\n        return !self.makerPos.isZero();\\n    }\\n\\n    /// @notice Returns whether the order decreases the liquidity of the market\\n    /// @return Whether the order decreases the liquidity of the market\\n    function decreasesLiquidity(Order memory self, Position memory currentPosition) internal pure returns (bool) {\\n        Fixed6 currentSkew = currentPosition.skew();\\n        Fixed6 latestSkew = currentSkew.sub(long(self)).add(short(self));\\n        return !self.makerNeg.isZero() || currentSkew.abs().gt(latestSkew.abs());\\n    }\\n\\n    /// @notice Returns whether the order decreases the efficieny of the market\\n    /// @dev Decreased efficiency ratio intuitively means that the market is \\\"more efficient\\\" on an OI to LP basis.\\n    /// @return Whether the order decreases the liquidity of the market\\n    function decreasesEfficiency(Order memory self, Position memory currentPosition) internal pure returns (bool) {\\n        UFixed6 currentMajor = currentPosition.major();\\n        UFixed6 latestMajor = UFixed6Lib.from(Fixed6Lib.from(currentPosition.long).sub(long(self)))\\n            .max(UFixed6Lib.from(Fixed6Lib.from(currentPosition.short).sub(short(self))));\\n        return !self.makerNeg.isZero() || currentMajor.gt(latestMajor);\\n    }\\n\\n    /// @notice Returns whether the order is applicable for liquidity checks\\n    /// @param self The Order object to check\\n    /// @param marketParameter The market parameter\\n    /// @return Whether the order is applicable for liquidity checks\\n    function liquidityCheckApplicable(\\n        Order memory self,\\n        MarketParameter memory marketParameter\\n    ) internal pure returns (bool) {\\n        return !marketParameter.closed &&\\n        // not \\\"a taker order that is increasing\\\" ->\\n        // not (any of the following)\\n        //  - taker is empty (not a taker order)\\n        //  - taker is increasing (position going more long or short)\\n            ((long(self).isZero() && short(self).isZero()) || increasesTaker(self));\\n    }\\n\\n    /// @notice Returns whether the order is protected\\n    /// @param self The order object to check\\n    /// @return Whether the order is protected\\n    function protected(Order memory self) internal pure returns (bool) {\\n        return self.protection != 0;\\n    }\\n\\n    /// @notice Returns whether the order is empty\\n    /// @param self The order object to check\\n    /// @return Whether the order is empty\\n    function isEmpty(Order memory self) internal pure returns (bool) {\\n        return pos(self).isZero() && neg(self).isZero();\\n    }\\n\\n     /// @notice Returns the direction of the order\\n    /// @dev 0 = maker, 1 = long, 2 = short\\n    /// @param self The position object to check\\n    /// @return The direction of the position\\n    function direction(Order memory self) internal pure returns (uint256) {\\n        if (!self.longPos.isZero() || !self.longNeg.isZero()) return 1;\\n        if (!self.shortPos.isZero() || !self.shortNeg.isZero()) return 2;\\n\\n        return 0;\\n    }\\n\\n    /// @notice Returns the magnitude of the order\\n    /// @param self The order object to check\\n    /// @return The magnitude of the order\\n    function magnitude(Order memory self) internal pure returns (Fixed6) {\\n        return maker(self).add(long(self)).add(short(self));\\n    }\\n\\n    /// @notice Returns the maker delta of the order\\n    /// @param self The order object to check\\n    /// @return The maker delta of the order\\n    function maker(Order memory self) internal pure returns (Fixed6) {\\n        return Fixed6Lib.from(self.makerPos).sub(Fixed6Lib.from(self.makerNeg));\\n    }\\n\\n    /// @notice Returns the long delta of the order\\n    /// @param self The order object to check\\n    /// @return The long delta of the order\\n    function long(Order memory self) internal pure returns (Fixed6) {\\n        return Fixed6Lib.from(self.longPos).sub(Fixed6Lib.from(self.longNeg));\\n    }\\n\\n    /// @notice Returns the short delta of the order\\n    /// @param self The order object to check\\n    /// @return The short delta of the order\\n    function short(Order memory self) internal pure returns (Fixed6) {\\n        return Fixed6Lib.from(self.shortPos).sub(Fixed6Lib.from(self.shortNeg));\\n    }\\n\\n    /// @notice Returns the positive taker delta of the order\\n    /// @param self The order object to check\\n    /// @return The positive taker delta of the order\\n    function takerPos(Order memory self) internal pure returns (UFixed6) {\\n        return self.longPos.add(self.shortNeg);\\n    }\\n\\n    /// @notice Returns the negative taker delta of the order\\n    /// @param self The order object to check\\n    /// @return The negative taker delta of the order\\n    function takerNeg(Order memory self) internal pure returns (UFixed6) {\\n        return self.shortPos.add(self.longNeg);\\n    }\\n\\n    /// @notice Returns the total maker delta of the order\\n    /// @param self The order object to check\\n    /// @return The total maker delta of the order\\n    function makerTotal(Order memory self) internal pure returns (UFixed6) {\\n        return self.makerPos.add(self.makerNeg);\\n    }\\n\\n    /// @notice Returns the total taker delta of the order\\n    /// @param self The order object to check\\n    /// @return The total taker delta of the order\\n    function takerTotal(Order memory self) internal pure returns (UFixed6) {\\n        return self.takerPos().add(self.takerNeg());\\n    }\\n\\n    /// @notice Returns the positive delta of the order\\n    /// @param self The order object to check\\n    /// @return The positive delta of the order\\n    function pos(Order memory self) internal pure returns (UFixed6) {\\n        return self.makerPos.add(self.longPos).add(self.shortPos);\\n    }\\n\\n    /// @notice Returns the positive delta of the order\\n    /// @param self The order object to check\\n    /// @return The positive delta of the order\\n    function neg(Order memory self) internal pure returns (UFixed6) {\\n        return self.makerNeg.add(self.longNeg).add(self.shortNeg);\\n    }\\n\\n    /// @notice Updates the current global order with a new local order\\n    /// @param self The order object to update\\n    /// @param order The new order\\n    function add(Order memory self, Order memory order) internal pure {\\n        (self.orders, self.collateral, self.protection, self.makerReferral, self.takerReferral) = (\\n            self.orders + order.orders,\\n            self.collateral.add(order.collateral),\\n            self.protection + order.protection,\\n            self.makerReferral.add(order.makerReferral),\\n            self.takerReferral.add(order.takerReferral)\\n        );\\n\\n        (self.makerPos, self.makerNeg, self.longPos, self.longNeg, self.shortPos, self.shortNeg) = (\\n            self.makerPos.add(order.makerPos),\\n            self.makerNeg.add(order.makerNeg),\\n            self.longPos.add(order.longPos),\\n            self.longNeg.add(order.longNeg),\\n            self.shortPos.add(order.shortPos),\\n            self.shortNeg.add(order.shortNeg)\\n        );\\n    }\\n\\n    /// @notice Subtracts the latest local order from current global order\\n    /// @param self The order object to update\\n    /// @param order The latest order\\n    function sub(Order memory self, Order memory order) internal pure {\\n        (self.orders, self.collateral, self.protection, self.makerReferral, self.takerReferral) = (\\n            self.orders - order.orders,\\n            self.collateral.sub(order.collateral),\\n            self.protection - order.protection,\\n            self.makerReferral.sub(order.makerReferral),\\n            self.takerReferral.sub(order.takerReferral)\\n        );\\n\\n        (self.makerPos, self.makerNeg, self.longPos, self.longNeg, self.shortPos, self.shortNeg) = (\\n            self.makerPos.sub(order.makerPos),\\n            self.makerNeg.sub(order.makerNeg),\\n            self.longPos.sub(order.longPos),\\n            self.longNeg.sub(order.longNeg),\\n            self.shortPos.sub(order.shortPos),\\n            self.shortNeg.sub(order.shortNeg)\\n        );\\n    }\\n}\\n\\n/// @dev Manually encodes and decodes the global Order struct into storage.\\n///      (external-safe): this library is safe to externalize\\n///\\n///     struct StoredOrderGlobal {\\n///         /* slot 0 */\\n///         uint32 timestamp;\\n///         uint32 orders;\\n///         int64 collateral;\\n///         uint64 makerPos;\\n///         uint64 makerNeg;\\n///\\n///         /* slot 1 */\\n///         uint64 longPos;\\n///         uint64 longNeg;\\n///         uint64 shortPos;\\n///         uint64 shortNeg;\\n///\\n///         /* slot 2 */\\n///         uint64 takerReferral;\\n///         uint64 makerReferral;\\n///     }\\n///\\nlibrary OrderStorageGlobalLib {\\n    function read(OrderStorageGlobal storage self) internal view returns (Order memory) {\\n        (uint256 slot0, uint256 slot1, uint256 slot2) = (self.slot0, self.slot1, self.slot2);\\n\\n        return Order(\\n            uint256(slot0 << (256 - 32)) >> (256 - 32),\\n            uint256(slot0 << (256 - 32 - 32)) >> (256 - 32),\\n            Fixed6.wrap(int256(slot0 << (256 - 32 - 32 - 64)) >> (256 - 64)),\\n            UFixed6.wrap(uint256(slot0 << (256 - 32 - 32 - 64 - 64)) >> (256 - 64)),\\n            UFixed6.wrap(uint256(slot0 << (256 - 32 - 32 - 64 - 64 - 64)) >> (256 - 64)),\\n            UFixed6.wrap(uint256(slot1 << (256 - 64)) >> (256 - 64)),\\n            UFixed6.wrap(uint256(slot1 << (256 - 64 - 64)) >> (256 - 64)),\\n            UFixed6.wrap(uint256(slot1 << (256 - 64 - 64 - 64)) >> (256 - 64)),\\n            UFixed6.wrap(uint256(slot1 << (256 - 64 - 64 - 64 - 64)) >> (256 - 64)),\\n            0,\\n            UFixed6.wrap(uint256(slot2 << (256 - 64)) >> (256 - 64)),\\n            UFixed6.wrap(uint256(slot2 << (256 - 64 - 64)) >> (256 - 64))\\n        );\\n    }\\n\\n    function store(OrderStorageGlobal storage self, Order memory newValue) internal {\\n        OrderStorageLib.validate(newValue);\\n\\n        if (newValue.makerPos.gt(UFixed6.wrap(type(uint64).max))) revert OrderStorageLib.OrderStorageInvalidError();\\n        if (newValue.makerNeg.gt(UFixed6.wrap(type(uint64).max))) revert OrderStorageLib.OrderStorageInvalidError();\\n        if (newValue.longPos.gt(UFixed6.wrap(type(uint64).max))) revert OrderStorageLib.OrderStorageInvalidError();\\n        if (newValue.longNeg.gt(UFixed6.wrap(type(uint64).max))) revert OrderStorageLib.OrderStorageInvalidError();\\n        if (newValue.shortPos.gt(UFixed6.wrap(type(uint64).max))) revert OrderStorageLib.OrderStorageInvalidError();\\n        if (newValue.shortNeg.gt(UFixed6.wrap(type(uint64).max))) revert OrderStorageLib.OrderStorageInvalidError();\\n\\n        uint256 encoded0 =\\n            uint256(newValue.timestamp << (256 - 32)) >> (256 - 32) |\\n            uint256(newValue.orders << (256 - 32)) >> (256 - 32 - 32) |\\n            uint256(Fixed6.unwrap(newValue.collateral) << (256 - 64)) >> (256 - 32 - 32 - 64) |\\n            uint256(UFixed6.unwrap(newValue.makerPos) << (256 - 64)) >> (256 - 32 - 32 - 64 - 64) |\\n            uint256(UFixed6.unwrap(newValue.makerNeg) << (256 - 64)) >> (256 - 32 - 32 - 64 - 64 - 64);\\n        uint256 encoded1 =\\n            uint256(UFixed6.unwrap(newValue.longPos) << (256 - 64)) >> (256 - 64) |\\n            uint256(UFixed6.unwrap(newValue.longNeg) << (256 - 64)) >> (256 - 64 - 64) |\\n            uint256(UFixed6.unwrap(newValue.shortPos) << (256 - 64)) >> (256 - 64 - 64 - 64) |\\n            uint256(UFixed6.unwrap(newValue.shortNeg) << (256 - 64)) >> (256 - 64 - 64 - 64 - 64);\\n        uint256 encoded2 =\\n            uint256(UFixed6.unwrap(newValue.makerReferral) << (256 - 64)) >> (256 - 64) |\\n            uint256(UFixed6.unwrap(newValue.takerReferral) << (256 - 64)) >> (256 - 64 - 64);\\n\\n        assembly {\\n            sstore(self.slot, encoded0)\\n            sstore(add(self.slot, 1), encoded1)\\n            sstore(add(self.slot, 2), encoded2)\\n        }\\n    }\\n}\\n\\n/// @dev Manually encodes and decodes the local Order struct into storage.\\n///\\n///     struct StoredOrderLocal {\\n///         /* slot 0 */\\n///         uint32 timestamp;\\n///         uint32 orders;\\n///         int64 collateral;\\n///         uint2 direction;\\n///         uint62 magnitudePos;\\n///         uint62 magnitudeNeg;\\n///         uint1 protection;\\n///\\n///         /* slot 1 */\\n///         uint64 takerReferral;\\n///         uint64 makerReferral;\\n///     }\\n///\\nlibrary OrderStorageLocalLib {\\n    function read(OrderStorageLocal storage self) internal view returns (Order memory) {\\n        (uint256 slot0, uint256 slot1) = (self.slot0, self.slot1);\\n\\n        uint256 direction = uint256(slot0 << (256 - 32 - 32 - 64 - 2)) >> (256 - 2);\\n        UFixed6 magnitudePos = UFixed6.wrap(uint256(slot0 << (256 - 32 - 32 - 64 - 2 - 62)) >> (256 - 62));\\n        UFixed6 magnitudeNeg = UFixed6.wrap(uint256(slot0 << (256 - 32 - 32 - 64 - 2 - 62 - 62)) >> (256 - 62));\\n\\n        return Order(\\n            uint256(slot0 << (256 - 32)) >> (256 - 32),\\n            uint256(slot0 << (256 - 32 - 32)) >> (256 - 32),\\n            Fixed6.wrap(int256(slot0 << (256 - 32 - 32 - 64)) >> (256 - 64)),\\n            direction == 0 ? magnitudePos : UFixed6Lib.ZERO,\\n            direction == 0 ? magnitudeNeg : UFixed6Lib.ZERO,\\n            direction == 1 ? magnitudePos : UFixed6Lib.ZERO,\\n            direction == 1 ? magnitudeNeg : UFixed6Lib.ZERO,\\n            direction == 2 ? magnitudePos : UFixed6Lib.ZERO,\\n            direction == 2 ? magnitudeNeg : UFixed6Lib.ZERO,\\n            uint256(slot0 << (256 - 32 - 32 - 64 - 2 - 62 - 62 - 1)) >> (256 - 1),\\n            UFixed6.wrap(uint256(slot1 << (256 - 64)) >> (256 - 64)),\\n            UFixed6.wrap(uint256(slot1 << (256 - 64 - 64)) >> (256 - 64))\\n        );\\n    }\\n\\n    function store(OrderStorageLocal storage self, Order memory newValue) internal {\\n        OrderStorageLib.validate(newValue);\\n\\n        (UFixed6 magnitudePos, UFixed6 magnitudeNeg) = (newValue.pos(), newValue.neg());\\n\\n        if (magnitudePos.gt(UFixed6.wrap(2 ** 62 - 1))) revert OrderStorageLib.OrderStorageInvalidError();\\n        if (magnitudeNeg.gt(UFixed6.wrap(2 ** 62 - 1))) revert OrderStorageLib.OrderStorageInvalidError();\\n        if (newValue.protection > 1) revert OrderStorageLib.OrderStorageInvalidError();\\n\\n        uint256 encoded0 =\\n            uint256(newValue.timestamp << (256 - 32)) >> (256 - 32) |\\n            uint256(newValue.orders << (256 - 32)) >> (256 - 32 - 32) |\\n            uint256(Fixed6.unwrap(newValue.collateral) << (256 - 64)) >> (256 - 32 - 32 - 64) |\\n            uint256(newValue.direction() << (256 - 2)) >> (256 - 32 - 32 - 64 - 2) |\\n            uint256(UFixed6.unwrap(magnitudePos) << (256 - 62)) >> (256 - 32 - 32 - 64 - 2 - 62) |\\n            uint256(UFixed6.unwrap(magnitudeNeg) << (256 - 62)) >> (256 - 32 - 32 - 64 - 2 - 62 - 62) |\\n            uint256(newValue.protection << (256 - 1)) >> (256 - 32 - 32 - 64 - 2 - 62 - 62 - 1);\\n        uint256 encoded1 =\\n            uint256(UFixed6.unwrap(newValue.makerReferral) << (256 - 64)) >> (256 - 64) |\\n            uint256(UFixed6.unwrap(newValue.takerReferral) << (256 - 64)) >> (256 - 64 - 64);\\n\\n        assembly {\\n            sstore(self.slot, encoded0)\\n            sstore(add(self.slot, 1), encoded1)\\n        }\\n    }\\n}\\n\\nlibrary OrderStorageLib {\\n    // sig: 0x67e45965\\n    error OrderStorageInvalidError();\\n\\n    function validate(Order memory newValue) internal pure {\\n        if (newValue.timestamp > type(uint32).max) revert OrderStorageInvalidError();\\n        if (newValue.orders > type(uint32).max) revert OrderStorageInvalidError();\\n        if (newValue.collateral.gt(Fixed6.wrap(type(int64).max))) revert OrderStorageInvalidError();\\n        if (newValue.collateral.lt(Fixed6.wrap(type(int64).min))) revert OrderStorageInvalidError();\\n        if (newValue.makerReferral.gt(UFixed6.wrap(type(uint64).max))) revert OrderStorageInvalidError();\\n        if (newValue.takerReferral.gt(UFixed6.wrap(type(uint64).max))) revert OrderStorageInvalidError();\\n    }\\n}\",\"keccak256\":\"0x91cd953e4d8fd43f71ca914ae137a844a74bb436b2f2b6d3e2b79200db4ae98e\",\"license\":\"Apache-2.0\"},\"@equilibria/perennial-v2/contracts/types/Position.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.13;\\n\\nimport \\\"./OracleVersion.sol\\\";\\nimport \\\"./RiskParameter.sol\\\";\\nimport \\\"./Global.sol\\\";\\nimport \\\"./Local.sol\\\";\\nimport \\\"./Order.sol\\\";\\n\\n/// @dev Order type\\nstruct Position {\\n    /// @dev The timestamp of the position\\n    uint256 timestamp;\\n\\n    /// @dev The maker position size\\n    UFixed6 maker;\\n\\n    /// @dev The long position size\\n    UFixed6 long;\\n\\n    /// @dev The short position size\\n    UFixed6 short;\\n}\\nusing PositionLib for Position global;\\nstruct PositionStorageGlobal { uint256 slot0; uint256 slot1; } // SECURITY: must remain at (2) slots\\nusing PositionStorageGlobalLib for PositionStorageGlobal global;\\nstruct PositionStorageLocal { uint256 slot0; uint256 slot1; } // SECURITY: must remain at (2) slots\\nusing PositionStorageLocalLib for PositionStorageLocal global;\\n\\n/// @title Position\\n/// @dev (external-unsafe): this library must be used internally only\\n/// @notice Holds the state for a position\\nlibrary PositionLib {\\n    /// @notice Returns a cloned copy of the position\\n    /// @param self The position object to clone\\n    /// @return A cloned copy of the position\\n    function clone(Position memory self) internal pure returns (Position memory) {\\n        return Position(self.timestamp, self.maker, self.long, self.short);\\n    }\\n\\n    /// @notice Updates the position with a new order\\n    /// @param self The position object to update\\n    /// @param order The new order\\n    function update(Position memory self, Order memory order) internal pure {\\n        self.timestamp = order.timestamp;\\n\\n        (self.maker, self.long, self.short) = (\\n            UFixed6Lib.from(Fixed6Lib.from(self.maker).add(order.maker())),\\n            UFixed6Lib.from(Fixed6Lib.from(self.long).add(order.long())),\\n            UFixed6Lib.from(Fixed6Lib.from(self.short).add(order.short()))\\n        );\\n    }\\n\\n    /// @notice Returns the direction of the position\\n    /// @dev 0 = maker, 1 = long, 2 = short\\n    /// @param self The position object to check\\n    /// @return The direction of the position\\n    function direction(Position memory self) internal pure returns (uint256) {\\n        return self.long.isZero() ? (self.short.isZero() ? 0 : 2) : 1;\\n    }\\n\\n    /// @notice Returns the maximum position size\\n    /// @param self The position object to check\\n    /// @return The maximum position size\\n    function magnitude(Position memory self) internal pure returns (UFixed6) {\\n        return self.long.max(self.short).max(self.maker);\\n    }\\n\\n    /// @notice Returns the maximum taker position size\\n    /// @param self The position object to check\\n    /// @return The maximum taker position size\\n    function major(Position memory self) internal pure returns (UFixed6) {\\n        return self.long.max(self.short);\\n    }\\n\\n    /// @notice Returns the minimum maker position size\\n    /// @param self The position object to check\\n    /// @return The minimum maker position size\\n    function minor(Position memory self) internal pure returns (UFixed6) {\\n        return self.long.min(self.short);\\n    }\\n\\n    /// @notice Returns the skew of the position\\n    /// @param self The position object to check\\n    /// @return The skew of the position\\n    function skew(Position memory self) internal pure returns (Fixed6) {\\n        return Fixed6Lib.from(self.long).sub(Fixed6Lib.from(self.short));\\n    }\\n\\n    /// @notice Returns the utilization of the position\\n    /// @dev utilization = major / (maker + minor)\\n    /// @param self The position object to check\\n    /// @param riskParameter The current risk parameter\\n    /// @return The utilization of the position\\n    function utilization(Position memory self, RiskParameter memory riskParameter) internal pure returns (UFixed6) {\\n        // long-short net utilization of the maker position\\n        UFixed6 netUtilization = major(self).unsafeDiv(self.maker.add(minor(self)));\\n\\n        // efficiency limit utilization of the maker position\\n        UFixed6 efficiencyUtilization = major(self).mul(riskParameter.efficiencyLimit).unsafeDiv(self.maker);\\n\\n        // maximum of the two utilizations, capped at 100%\\n        return netUtilization.max(efficiencyUtilization).min(UFixed6Lib.ONE);\\n    }\\n\\n    /// @notice Returns the portion of the position that is covered by the maker\\n    /// @param self The position object to check\\n    /// @return The portion of the position that is covered by the maker\\n    function socializedMakerPortion(Position memory self) internal pure returns (UFixed6) {\\n        return takerSocialized(self).isZero() ?\\n            UFixed6Lib.ZERO :\\n            takerSocialized(self).sub(minor(self)).div(takerSocialized(self));\\n    }\\n\\n    /// @notice Returns the long position with socialization taken into account\\n    /// @param self The position object to check\\n    /// @return The long position with socialization taken into account\\n    function longSocialized(Position memory self) internal pure returns (UFixed6) {\\n        return self.maker.add(self.short).min(self.long);\\n    }\\n\\n    /// @notice Returns the short position with socialization taken into account\\n    /// @param self The position object to check\\n    /// @return The short position with socialization taken into account\\n    function shortSocialized(Position memory self) internal pure returns (UFixed6) {\\n        return self.maker.add(self.long).min(self.short);\\n    }\\n\\n    /// @notice Returns the major position with socialization taken into account\\n    /// @param self The position object to check\\n    /// @return The major position with socialization taken into account\\n    function takerSocialized(Position memory self) internal pure returns (UFixed6) {\\n        return major(self).min(minor(self).add(self.maker));\\n    }\\n\\n    /// @notice Returns the efficiency of the position\\n    /// @dev efficiency = maker / major\\n    /// @param self The position object to check\\n    /// @return The efficiency of the position\\n    function efficiency(Position memory self) internal pure returns (UFixed6) {\\n        return self.maker.unsafeDiv(major(self)).min(UFixed6Lib.ONE);\\n    }\\n\\n    /// @notice Returns the whether the position is socialized\\n    /// @param self The position object to check\\n    /// @return Whether the position is socialized\\n    function socialized(Position memory self) internal pure returns (bool) {\\n        return self.maker.add(self.short).lt(self.long) || self.maker.add(self.long).lt(self.short);\\n    }\\n\\n    /// @notice Returns the whether the position is single-sided\\n    /// @param self The position object to check\\n    /// @return Whether the position is single-sided\\n    function singleSided(Position memory self) internal pure returns (bool) {\\n        return magnitude(self).eq(self.long.add(self.short).add(self.maker));\\n    }\\n\\n    /// @notice Returns the whether the position is empty\\n    /// @param self The position object to check\\n    /// @return Whether the position is empty\\n    function empty(Position memory self) internal pure returns (bool) {\\n        return magnitude(self).isZero();\\n    }\\n\\n    /// @notice Returns the maintenance requirement of the position\\n    /// @param positionMagnitude The position magnitude value to check\\n    /// @param latestVersion The latest oracle version\\n    /// @param riskParameter The current risk parameter\\n    /// @return The maintenance requirement of the position\\n    function maintenance(\\n        UFixed6 positionMagnitude,\\n        OracleVersion memory latestVersion,\\n        RiskParameter memory riskParameter\\n    ) internal pure returns (UFixed6) {\\n        return _collateralRequirement(positionMagnitude, latestVersion, riskParameter.maintenance, riskParameter.minMaintenance);\\n    }\\n\\n    /// @notice Returns the margin requirement of the position\\n    /// @param positionMagnitude The position magnitude value to check\\n    /// @param latestVersion The latest oracle version\\n    /// @param riskParameter The current risk parameter\\n    /// @param collateralization The collateralization requirement override provided by the caller\\n    /// @return The margin requirement of the position\\n    function margin(\\n        UFixed6 positionMagnitude,\\n        OracleVersion memory latestVersion,\\n        RiskParameter memory riskParameter,\\n        UFixed6 collateralization\\n    ) internal pure returns (UFixed6) {\\n        return _collateralRequirement(positionMagnitude, latestVersion, riskParameter.margin.max(collateralization), riskParameter.minMargin);\\n    }\\n\\n    /// @notice Returns the maintenance requirement of the position\\n    /// @param self The position object to check\\n    /// @param latestVersion The latest oracle version\\n    /// @param riskParameter The current risk parameter\\n    /// @return The maintenance requirement of the position\\n    function maintenance(\\n        Position memory self,\\n        OracleVersion memory latestVersion,\\n        RiskParameter memory riskParameter\\n    ) internal pure returns (UFixed6) {\\n        return maintenance(magnitude(self), latestVersion, riskParameter);\\n    }\\n\\n    /// @notice Returns the margin requirement of the position\\n    /// @param self The position object to check\\n    /// @param latestVersion The latest oracle version\\n    /// @param riskParameter The current risk parameter\\n    /// @return The margin requirement of the position\\n    function margin(\\n        Position memory self,\\n        OracleVersion memory latestVersion,\\n        RiskParameter memory riskParameter\\n    ) internal pure returns (UFixed6) {\\n        return margin(magnitude(self), latestVersion, riskParameter, UFixed6Lib.ZERO);\\n    }\\n\\n    /// @notice Returns the collateral requirement of the position magnitude\\n    /// @param positionMagnitude The position magnitude value to check\\n    /// @param latestVersion The latest oracle version\\n    /// @param requirementRatio The ratio requirement to the notional\\n    /// @param requirementFixed The fixed requirement\\n    /// @return The collateral requirement of the position magnitude\\n    function _collateralRequirement(\\n        UFixed6 positionMagnitude,\\n        OracleVersion memory latestVersion,\\n        UFixed6 requirementRatio,\\n        UFixed6 requirementFixed\\n    ) private pure returns (UFixed6) {\\n        if (positionMagnitude.isZero()) return UFixed6Lib.ZERO;\\n        return positionMagnitude.mul(latestVersion.price.abs()).mul(requirementRatio).max(requirementFixed);\\n    }\\n\\n    /// @notice Returns the whether the position is maintained\\n    /// @dev shortfall is considered solvent for 0-position\\n    /// @param positionMagnitude The position magnitude value to check\\n    /// @param latestVersion The latest oracle version\\n    /// @param riskParameter The current risk parameter\\n    /// @param collateral The current account's collateral\\n    /// @return Whether the position is maintained\\n    function maintained(\\n        UFixed6 positionMagnitude,\\n        OracleVersion memory latestVersion,\\n        RiskParameter memory riskParameter,\\n        Fixed6 collateral\\n    ) internal pure returns (bool) {\\n        return UFixed6Lib.unsafeFrom(collateral).gte(maintenance(positionMagnitude, latestVersion, riskParameter));\\n    }\\n\\n    /// @notice Returns the whether the position is margined\\n    /// @dev shortfall is considered solvent for 0-position\\n    /// @param positionMagnitude The position magnitude value to check\\n    /// @param latestVersion The latest oracle version\\n    /// @param riskParameter The current risk parameter\\n    /// @param collateralization The collateralization requirement override provided by the caller\\n    /// @param collateral The current account's collateral\\n    /// @return Whether the position is margined\\n    function margined(\\n        UFixed6 positionMagnitude,\\n        OracleVersion memory latestVersion,\\n        RiskParameter memory riskParameter,\\n        UFixed6 collateralization,\\n        Fixed6 collateral\\n    ) internal pure returns (bool) {\\n        return UFixed6Lib.unsafeFrom(collateral).gte(margin(positionMagnitude, latestVersion, riskParameter, collateralization));\\n    }\\n\\n    /// @notice Returns the whether the position is maintained\\n    /// @dev shortfall is considered solvent for 0-position\\n    /// @param self The position object to check\\n    /// @param latestVersion The latest oracle version\\n    /// @param riskParameter The current risk parameter\\n    /// @param collateral The current account's collateral\\n    /// @return Whether the position is maintained\\n    function maintained(\\n        Position memory self,\\n        OracleVersion memory latestVersion,\\n        RiskParameter memory riskParameter,\\n        Fixed6 collateral\\n    ) internal pure returns (bool) {\\n        return maintained(magnitude(self), latestVersion, riskParameter, collateral);\\n    }\\n\\n    /// @notice Returns the whether the position is margined\\n    /// @dev shortfall is considered solvent for 0-position\\n    /// @param self The position object to check\\n    /// @param latestVersion The latest oracle version\\n    /// @param riskParameter The current risk parameter\\n    /// @param collateralization The collateralization requirement override provided by the caller\\n    /// @param collateral The current account's collateral\\n    /// @return Whether the position is margined\\n    function margined(\\n        Position memory self,\\n        OracleVersion memory latestVersion,\\n        RiskParameter memory riskParameter,\\n        UFixed6 collateralization,\\n        Fixed6 collateral\\n    ) internal pure returns (bool) {\\n        return margined(magnitude(self), latestVersion, riskParameter, collateralization, collateral);\\n    }\\n}\\n\\n/// @dev Manually encodes and decodes the global Position struct into storage.\\n///      (external-safe): this library is safe to externalize\\n///\\n///     struct StoredPositionGlobal {\\n///         /* slot 0 */\\n///         uint32 timestamp;\\n///         uint32 __unallocated__;\\n///         uint64 maker;\\n///         uint64 long;\\n///         uint64 short;\\n///\\n///         /* slot 1 */\\n///         uint64 maker (deprecated);\\n///         uint192 __unallocated__;\\n///     }\\n///\\nlibrary PositionStorageGlobalLib {\\n    function read(PositionStorageGlobal storage self) internal view returns (Position memory) {\\n        uint256 slot0 = self.slot0;\\n        return Position(\\n            uint256(slot0 << (256 - 32)) >> (256 - 32),\\n            UFixed6.wrap(uint256(slot0 << (256 - 32 - 32 - 64)) >> (256 - 64)),\\n            UFixed6.wrap(uint256(slot0 << (256 - 32 - 32 - 64 - 64)) >> (256 - 64)),\\n            UFixed6.wrap(uint256(slot0 << (256 - 32 - 32 - 64 - 64 - 64)) >> (256 - 64))\\n        );\\n    }\\n\\n    function store(PositionStorageGlobal storage self, Position memory newValue) public {\\n        PositionStorageLib.validate(newValue);\\n\\n        if (newValue.maker.gt(UFixed6.wrap(type(uint64).max))) revert PositionStorageLib.PositionStorageInvalidError();\\n        if (newValue.long.gt(UFixed6.wrap(type(uint64).max))) revert PositionStorageLib.PositionStorageInvalidError();\\n        if (newValue.short.gt(UFixed6.wrap(type(uint64).max))) revert PositionStorageLib.PositionStorageInvalidError();\\n\\n        uint256 encoded0 =\\n            uint256(newValue.timestamp << (256 - 32)) >> (256 - 32) |\\n            uint256(UFixed6.unwrap(newValue.maker) << (256 - 64)) >> (256 - 32 - 32 - 64) |\\n            uint256(UFixed6.unwrap(newValue.long) << (256 - 64)) >> (256 - 32 - 32 - 64 - 64) |\\n            uint256(UFixed6.unwrap(newValue.short) << (256 - 64)) >> (256 - 32 - 32 - 64 - 64 - 64);\\n\\n        assembly {\\n            sstore(self.slot, encoded0)\\n        }\\n    }\\n\\n    function migrate(PositionStorageGlobal storage self) external {\\n        Position memory position = read(self);\\n        uint256 slot1 = self.slot1;\\n        UFixed6 deprecatedMaker = UFixed6.wrap(uint256(slot1 << (256 - 64)) >> (256 - 64));\\n\\n        // only migrate if the deprecated maker is set and new maker is unset to avoid double-migration\\n        if (!position.maker.isZero())\\n            revert PositionStorageLib.PositionStorageInvalidMigrationError();\\n\\n        position.maker = deprecatedMaker;\\n        store(self, position);\\n        assembly {\\n            sstore(add(self.slot, 1), 0) // Part of the v2.3 migration. Can be removed once migration is complete.\\n        }\\n    }\\n}\\n\\n/// @dev Manually encodes and decodes the local Position struct into storage.\\n///      (external-safe): this library is safe to externalize\\n///\\n///     struct StoredPositionLocal (v0) {\\n///         /* slot 0 */\\n///         uint32 timestamp;\\n///         uint216 __unallocated__;\\n///         uint8 layout;\\n///\\n///         /* slot 1 */\\n///         uint2 direction;\\n///         uint62 magnitude;\\n///         uint192 __unallocated__;\\n///     }\\n///\\n///     note: fresh Positions will still default to v0 until they are saved to, but this is safe because\\n///           slot1 is still reserved and will return correct default values.\\n///\\n///     struct StoredPositionLocal (v1) {\\n///         /* slot 0 */\\n///         uint32 timestamp;\\n///         uint2 direction;\\n///         uint62 magnitude;\\n///         uint152 __unallocated__;\\n///         uint8 layout; // v2.3 migration -- can remove once all accounts have been migrated\\n///     }\\n///\\nlibrary PositionStorageLocalLib {\\n    function read(PositionStorageLocal storage self) internal view returns (Position memory) {\\n        (uint256 slot0, uint256 slot1) = (self.slot0, self.slot1);\\n        uint256 layout = uint256(slot0 << (256 - 32 - 216 - 8)) >> (256 - 8);\\n\\n        uint256 direction = layout == 0 ?\\n            uint256(slot1 << (256 - 2)) >> (256 - 2) :\\n            uint256(slot0 << (256 - 32 - 2)) >> (256 - 2);\\n        UFixed6 magnitude = layout == 0 ?\\n            UFixed6.wrap(uint256(slot1 << (256 - 2 - 62)) >> (256 - 62)) :\\n            UFixed6.wrap(uint256(slot0 << (256 - 32 - 2 - 62)) >> (256 - 62));\\n\\n        return Position(\\n            uint256(slot0 << (256 - 32)) >> (256 - 32),\\n            direction == 0 ? magnitude : UFixed6Lib.ZERO,\\n            direction == 1 ? magnitude : UFixed6Lib.ZERO,\\n            direction == 2 ? magnitude : UFixed6Lib.ZERO\\n        );\\n    }\\n\\n    function store(PositionStorageLocal storage self, Position memory newValue) external {\\n        PositionStorageLib.validate(newValue);\\n\\n        uint256 layout = 1;\\n        UFixed6 magnitude = newValue.magnitude();\\n\\n        if (magnitude.gt(UFixed6.wrap(2 ** 62 - 1))) revert PositionStorageLib.PositionStorageInvalidError();\\n\\n        uint256 encoded0 =\\n            uint256(newValue.timestamp << (256 - 32)) >> (256 - 32) |\\n            uint256(newValue.direction() << (256 - 2)) >> (256 - 32 - 2) |\\n            uint256(UFixed6.unwrap(magnitude) << (256 - 62)) >> (256 - 32 - 2 - 62) |\\n            uint256(layout << (256 - 8)) >> (256 - 32 - 2 - 62 - 152 - 8);\\n\\n        assembly {\\n            sstore(self.slot, encoded0)\\n            sstore(add(self.slot, 1), 0) // Part of the v2.3 migration. Can be removed once migration is complete.\\n        }\\n    }\\n}\\n\\nlibrary PositionStorageLib {\\n    // sig: 0x52a8a97f\\n    error PositionStorageInvalidError();\\n    // sig: 0x1bacb3a2\\n    error PositionStorageInvalidMigrationError();\\n\\n    function validate(Position memory newValue) internal pure {\\n        if (newValue.timestamp > type(uint32).max) revert PositionStorageInvalidError();\\n    }\\n}\",\"keccak256\":\"0x36ed4d9bfacef9ebe8e1ef2dd398d66d820b06df563751f2a759626bbc8e27b2\",\"license\":\"Apache-2.0\"},\"@equilibria/perennial-v2/contracts/types/ProtocolParameter.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.13;\\n\\nimport \\\"@equilibria/root/number/types/UFixed6.sol\\\";\\n\\n/// @dev ProtocolParameter type\\nstruct ProtocolParameter {\\n    /// @dev The maximum for market fee parameters\\n    UFixed6 maxFee;\\n\\n    /// @dev The maximum for market absolute fee parameters\\n    UFixed6 maxFeeAbsolute;\\n\\n    /// @dev The maximum for market cut parameters\\n    UFixed6 maxCut;\\n\\n    /// @dev The maximum for market rate parameters\\n    UFixed6 maxRate;\\n\\n    /// @dev The minimum for market maintenance parameters\\n    UFixed6 minMaintenance;\\n\\n    /// @dev The minimum for market efficiency parameters\\n    UFixed6 minEfficiency;\\n\\n    /// @dev The default referrer fee percentage for orders\\n    UFixed6 referralFee;\\n\\n    /// @dev The minimum ratio between scale vs makerLimit / efficiencyLimit\\n    UFixed6 minScale;\\n}\\nstruct StoredProtocolParameter {\\n    /* slot 0 (28) */\\n    uint24 maxFee;                  // <= 1677%\\n    uint48 maxFeeAbsolute;          // <= 281m\\n    uint24 maxCut;                  // <= 1677%\\n    uint32 maxRate;                 // <= 214748% (capped at 31 bits to accommodate int32 rates)\\n    uint24 minMaintenance;          // <= 1677%\\n    uint24 minEfficiency;           // <= 1677%\\n    uint24 referralFee;             // <= 1677%\\n    uint24 minScale;                // <= 1677%\\n}\\nstruct ProtocolParameterStorage { StoredProtocolParameter value; } // SECURITY: must remain at (1) slots\\nusing ProtocolParameterStorageLib for ProtocolParameterStorage global;\\n\\n/// @dev (external-safe): this library is safe to externalize\\nlibrary ProtocolParameterStorageLib {\\n    // sig: 0x4dc1bc59\\n    error ProtocolParameterStorageInvalidError();\\n\\n    function read(ProtocolParameterStorage storage self) internal view returns (ProtocolParameter memory) {\\n        StoredProtocolParameter memory value = self.value;\\n        return ProtocolParameter(\\n            UFixed6.wrap(uint256(value.maxFee)),\\n            UFixed6.wrap(uint256(value.maxFeeAbsolute)),\\n            UFixed6.wrap(uint256(value.maxCut)),\\n            UFixed6.wrap(uint256(value.maxRate)),\\n            UFixed6.wrap(uint256(value.minMaintenance)),\\n            UFixed6.wrap(uint256(value.minEfficiency)),\\n            UFixed6.wrap(uint256(value.referralFee)),\\n            UFixed6.wrap(uint256(value.minScale))\\n        );\\n    }\\n\\n    function validate(ProtocolParameter memory self) internal pure {\\n        if (self.maxCut.gt(UFixed6Lib.ONE)) revert ProtocolParameterStorageInvalidError();\\n        if (self.referralFee.gt(UFixed6Lib.ONE)) revert ProtocolParameterStorageInvalidError();\\n        if (self.minScale.gt(UFixed6Lib.ONE)) revert ProtocolParameterStorageInvalidError();\\n    }\\n\\n    function validateAndStore(ProtocolParameterStorage storage self, ProtocolParameter memory newValue) internal {\\n        validate(newValue);\\n\\n        if (newValue.maxFee.gt(UFixed6.wrap(type(uint24).max))) revert ProtocolParameterStorageInvalidError();\\n        if (newValue.maxFeeAbsolute.gt(UFixed6.wrap(type(uint48).max))) revert ProtocolParameterStorageInvalidError();\\n        if (newValue.maxRate.gt(UFixed6.wrap(type(uint32).max / 2))) revert ProtocolParameterStorageInvalidError();\\n        if (newValue.minMaintenance.gt(UFixed6.wrap(type(uint24).max))) revert ProtocolParameterStorageInvalidError();\\n        if (newValue.minEfficiency.gt(UFixed6.wrap(type(uint24).max))) revert ProtocolParameterStorageInvalidError();\\n\\n        self.value = StoredProtocolParameter(\\n            uint24(UFixed6.unwrap(newValue.maxFee)),\\n            uint48(UFixed6.unwrap(newValue.maxFeeAbsolute)),\\n            uint24(UFixed6.unwrap(newValue.maxCut)),\\n            uint32(UFixed6.unwrap(newValue.maxRate)),\\n            uint24(UFixed6.unwrap(newValue.minMaintenance)),\\n            uint24(UFixed6.unwrap(newValue.minEfficiency)),\\n            uint24(UFixed6.unwrap(newValue.referralFee)),\\n            uint24(UFixed6.unwrap(newValue.minScale))\\n        );\\n    }\\n}\",\"keccak256\":\"0x5579346699f5dbf17553654cd03ed38e6f4503452120c2afe2998354a17c002e\",\"license\":\"Apache-2.0\"},\"@equilibria/perennial-v2/contracts/types/RiskParameter.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.13;\\n\\nimport \\\"@equilibria/root/number/types/UFixed6.sol\\\";\\nimport \\\"@equilibria/root/utilization/types/UJumpRateUtilizationCurve6.sol\\\";\\nimport \\\"@equilibria/root/pid/types/PController6.sol\\\";\\nimport \\\"@equilibria/root/adiabatic/types/LinearAdiabatic6.sol\\\";\\nimport \\\"@equilibria/root/adiabatic/types/NoopAdiabatic6.sol\\\";\\nimport \\\"../interfaces/IOracleProvider.sol\\\";\\nimport \\\"./ProtocolParameter.sol\\\";\\n\\n/// @dev RiskParameter type\\nstruct RiskParameter {\\n    /// @dev The minimum amount of collateral required to open a new position as a percentage of notional\\n    UFixed6 margin;\\n\\n    /// @dev The minimum amount of collateral that must be maintained as a percentage of notional\\n    UFixed6 maintenance;\\n\\n    /// @dev The taker impact fee\\n    LinearAdiabatic6 takerFee;\\n\\n    /// @dev The maker fee configuration\\n    NoopAdiabatic6 makerFee;\\n\\n    /// @dev The maximum amount of maker positions that opened\\n    UFixed6 makerLimit;\\n\\n    /// @dev The minimum limit of the efficiency metric\\n    UFixed6 efficiencyLimit;\\n\\n    /// @dev The percentage fee on the notional that is charged when a position is liquidated\\n    UFixed6 liquidationFee;\\n\\n    /// @dev The utilization curve that is used to compute maker interest\\n    UJumpRateUtilizationCurve6 utilizationCurve;\\n\\n    /// @dev The p controller that is used to compute long-short funding\\n    PController6 pController;\\n\\n    /// @dev The minimum fixed amount that is required to open a position\\n    UFixed6 minMargin;\\n\\n    /// @dev The minimum fixed amount that is required for maintenance\\n    UFixed6 minMaintenance;\\n\\n    /// @dev The maximum amount of time since the latest oracle version that update may still be called\\n    uint256 staleAfter;\\n\\n    /// @dev Whether or not the maker should always receive positive funding\\n    bool makerReceiveOnly;\\n}\\nstruct RiskParameterStorage { uint256 slot0; uint256 slot1; uint256 slot2; } // SECURITY: must remain at (3) slots\\nusing RiskParameterStorageLib for RiskParameterStorage global;\\n\\n/// @dev Manually encodes and decodes the local Position struct into storage.\\n///      (external-safe): this library is safe to externalize\\n///\\n///    struct StoredRiskParameter {\\n///        /* slot 0 */ (30)\\n///        uint24 margin;                              // <= 1677%\\n///        uint24 maintenance;                         // <= 1677%\\n///        uint24 takerLinearFee;                      // <= 1677%\\n///        uint24 takerProportionalFee;                // <= 1677%\\n///        uint24 takerAdiabaticFee;                   // <= 1677% (must maintain location due to updateRiskParameter)\\n///        uint24 makerLinearFee;                      // <= 1677%\\n///        uint24 makerProportionalFee;                // <= 1677%\\n///        uint48 makerLimit;                          // <= 281t (no decimals)\\n///        uint24 efficiencyLimit;                     // <= 1677%\\n///\\n///        /* slot 1 */ (28)\\n///        bytes3 __unallocated__;\\n///        uint48 takerSkewScale;                      // <= 281t (no decimals) (must maintain location due to updateRiskParameter)\\n///        uint24 utilizationCurveMinRate;             // <= 1677%\\n///        uint24 utilizationCurveMaxRate;             // <= 1677%\\n///        uint24 utilizationCurveTargetRate;          // <= 1677%\\n///        uint24 utilizationCurveTargetUtilization;   // <= 1677%\\n///        int32 pControllerMin;                       // <= 214748%\\n///\\n///        /* slot 2 */ (32)\\n///        uint48 pControllerK;                        // <= 281m\\n///        int32 pControllerMax;                       // <= 214748%\\n///        uint48 minMargin;                           // <= 281m\\n///        uint48 minMaintenance;                      // <= 281m\\n///        uint48 liquidationFee;                      // <= 281m\\n///        uint24 staleAfter;                          // <= 16m s\\n///        bool makerReceiveOnly;\\n///    }\\nlibrary RiskParameterStorageLib {\\n    // sig: 0x7ecd083f\\n    error RiskParameterStorageInvalidError();\\n\\n    function read(RiskParameterStorage storage self) internal view returns (RiskParameter memory) {\\n        (uint256 slot0, uint256 slot1, uint256 slot2) = (self.slot0, self.slot1, self.slot2);\\n        return RiskParameter(\\n            UFixed6.wrap(uint256(       slot0 << (256 - 24)) >> (256 - 24)),\\n            UFixed6.wrap(uint256(       slot0 << (256 - 24 - 24)) >> (256 - 24)),\\n            LinearAdiabatic6(\\n                UFixed6.wrap(uint256(   slot0 << (256 - 24 - 24 - 24)) >> (256 - 24)),\\n                UFixed6.wrap(uint256(   slot0 << (256 - 24 - 24 - 24 - 24)) >> (256 - 24)),\\n                UFixed6.wrap(uint256(   slot0 << (256 - 24 - 24 - 24 - 24 - 24)) >> (256 - 24)),\\n                UFixed6Lib.from(uint256(slot1 << (256 - 24 - 48 - 48)) >> (256 - 48))\\n            ),\\n            NoopAdiabatic6(\\n                UFixed6.wrap(uint256(   slot0 << (256 - 24 - 24 - 24 - 24 - 24 - 24)) >> (256 - 24)),\\n                UFixed6.wrap(uint256(   slot0 << (256 - 24 - 24 - 24 - 24 - 24 - 24 - 24)) >> (256 - 24)),\\n                UFixed6Lib.from(uint256(slot1 << (256 - 24 - 48)) >> (256 - 48))\\n            ),\\n            UFixed6Lib.from(uint256(    slot0 << (256 - 24 - 24 - 24 - 24 - 24 - 24 - 24 - 48)) >> (256 - 48)),\\n            UFixed6.wrap(uint256(       slot0 << (256 - 24 - 24 - 24 - 24 - 24 - 24 - 24 - 48 - 24)) >> (256 - 24)),\\n\\n            UFixed6.wrap(uint256(       slot2 << (256 - 48 - 32 - 48 - 48 - 48)) >> (256 - 48)),\\n            UJumpRateUtilizationCurve6(\\n                UFixed6.wrap(uint256(   slot1 << (256 - 24 - 48 - 48 - 24)) >> (256 - 24)),\\n                UFixed6.wrap(uint256(   slot1 << (256 - 24 - 48 - 48 - 24 - 24)) >> (256 - 24)),\\n                UFixed6.wrap(uint256(   slot1 << (256 - 24 - 48 - 48 - 24 - 24 - 24)) >> (256 - 24)),\\n                UFixed6.wrap(uint256(   slot1 << (256 - 24 - 48 - 48 - 24 - 24 - 24 - 24)) >> (256 - 24))\\n            ),\\n\\n            PController6(\\n                UFixed6.wrap(uint256(   slot2 << (256 - 48)) >> (256 - 48)),\\n                Fixed6.wrap(int256(     slot1 << (256 - 24 - 48 - 48 - 24 - 24 - 24 - 24 - 32)) >> (256 - 32)),\\n                Fixed6.wrap(int256(     slot2 << (256 - 48 - 32)) >> (256 - 32))\\n            ),\\n            UFixed6.wrap(uint256(       slot2 << (256 - 48 - 32 - 48)) >> (256 - 48)),\\n            UFixed6.wrap(uint256(       slot2 << (256 - 48 - 32 - 48 - 48)) >> (256 - 48)),\\n                         uint256(       slot2 << (256 - 48 - 32 - 48 - 48 - 48 - 24)) >> (256 - 24),\\n            0 !=        (uint256(       slot2 << (256 - 48 - 32 - 48 - 48 - 48 - 24 - 8)) >> (256 - 8))\\n        );\\n    }\\n\\n    function validate(RiskParameter memory self, ProtocolParameter memory protocolParameter) private pure {\\n        if (\\n            self.takerFee.linearFee.max(self.takerFee.proportionalFee).max(self.takerFee.adiabaticFee)\\n                .max(self.makerFee.linearFee).max(self.makerFee.proportionalFee)\\n                .gt(protocolParameter.maxFee)\\n        ) revert RiskParameterStorageInvalidError();\\n\\n        if (self.liquidationFee.gt(protocolParameter.maxFeeAbsolute)) revert RiskParameterStorageInvalidError();\\n\\n        if (\\n            self.utilizationCurve.minRate.max(self.utilizationCurve.maxRate).max(self.utilizationCurve.targetRate)\\n                .max(self.pController.max.abs()).max(self.pController.min.abs())\\n                .gt(protocolParameter.maxRate)\\n        ) revert RiskParameterStorageInvalidError();\\n\\n        if (self.maintenance.lt(protocolParameter.minMaintenance)) revert RiskParameterStorageInvalidError();\\n\\n        if (self.margin.lt(self.maintenance)) revert RiskParameterStorageInvalidError();\\n\\n        if (self.efficiencyLimit.lt(protocolParameter.minEfficiency)) revert RiskParameterStorageInvalidError();\\n\\n        if (self.utilizationCurve.targetUtilization.gt(UFixed6Lib.ONE)) revert RiskParameterStorageInvalidError();\\n\\n        if (self.minMaintenance.lt(self.liquidationFee)) revert RiskParameterStorageInvalidError();\\n\\n        if (self.minMargin.lt(self.minMaintenance)) revert RiskParameterStorageInvalidError();\\n\\n        UFixed6 scaleLimit = self.makerLimit.div(self.efficiencyLimit).mul(protocolParameter.minScale);\\n        if (self.takerFee.scale.lt(scaleLimit) || self.makerFee.scale.lt(scaleLimit))\\n            revert RiskParameterStorageInvalidError();\\n    }\\n\\n    function validateAndStore(\\n        RiskParameterStorage storage self,\\n        RiskParameter memory newValue,\\n        ProtocolParameter memory protocolParameter\\n    ) external {\\n        validate(newValue, protocolParameter);\\n\\n        if (newValue.margin.gt(UFixed6.wrap(type(uint24).max))) revert RiskParameterStorageInvalidError();\\n        if (newValue.minMargin.gt(UFixed6.wrap(type(uint48).max))) revert RiskParameterStorageInvalidError();\\n        if (newValue.efficiencyLimit.gt(UFixed6.wrap(type(uint24).max))) revert RiskParameterStorageInvalidError();\\n        if (newValue.makerLimit.gt(UFixed6Lib.from(type(uint48).max))) revert RiskParameterStorageInvalidError();\\n        if (newValue.pController.k.gt(UFixed6.wrap(type(uint48).max))) revert RiskParameterStorageInvalidError();\\n        if (newValue.takerFee.scale.gt(UFixed6Lib.from(type(uint48).max))) revert RiskParameterStorageInvalidError();\\n        if (newValue.makerFee.scale.gt(UFixed6Lib.from(type(uint48).max))) revert RiskParameterStorageInvalidError();\\n        if (newValue.staleAfter > uint256(type(uint24).max)) revert RiskParameterStorageInvalidError();\\n\\n        uint256 encoded0 =\\n            uint256(UFixed6.unwrap(newValue.margin)                    << (256 - 24)) >> (256 - 24) |\\n            uint256(UFixed6.unwrap(newValue.maintenance)               << (256 - 24)) >> (256 - 24 - 24) |\\n            uint256(UFixed6.unwrap(newValue.takerFee.linearFee)        << (256 - 24)) >> (256 - 24 - 24 - 24) |\\n            uint256(UFixed6.unwrap(newValue.takerFee.proportionalFee)  << (256 - 24)) >> (256 - 24 - 24 - 24 - 24) |\\n            uint256(UFixed6.unwrap(newValue.takerFee.adiabaticFee)     << (256 - 24)) >> (256 - 24 - 24 - 24 - 24 - 24) |\\n            uint256(UFixed6.unwrap(newValue.makerFee.linearFee)        << (256 - 24)) >> (256 - 24 - 24 - 24 - 24 - 24 - 24) |\\n            uint256(UFixed6.unwrap(newValue.makerFee.proportionalFee)  << (256 - 24)) >> (256 - 24 - 24 - 24 - 24 - 24 - 24 - 24) |\\n            uint256(newValue.makerLimit.truncate()                     << (256 - 48)) >> (256 - 24 - 24 - 24 - 24 - 24 - 24 - 24 - 48) |\\n            uint256(UFixed6.unwrap(newValue.efficiencyLimit)           << (256 - 24)) >> (256 - 24 - 24 - 24 - 24 - 24 - 24 - 24 - 48 - 24);\\n\\n        uint256 encoded1 =\\n            uint256(newValue.makerFee.scale.truncate()                          << (256 - 48)) >> (256 - 24 - 48) |\\n            uint256(newValue.takerFee.scale.truncate()                          << (256 - 48)) >> (256 - 24 - 48 - 48) |\\n            uint256(UFixed6.unwrap(newValue.utilizationCurve.minRate)           << (256 - 24)) >> (256 - 24 - 48 - 48 - 24) |\\n            uint256(UFixed6.unwrap(newValue.utilizationCurve.maxRate)           << (256 - 24)) >> (256 - 24 - 48 - 48 - 24 - 24) |\\n            uint256(UFixed6.unwrap(newValue.utilizationCurve.targetRate)        << (256 - 24)) >> (256 - 24 - 48 - 48 - 24 - 24 - 24) |\\n            uint256(UFixed6.unwrap(newValue.utilizationCurve.targetUtilization) << (256 - 24)) >> (256 - 24 - 48 - 48 - 24 - 24 - 24 - 24) |\\n            uint256(Fixed6.unwrap(newValue.pController.min)                     << (256 - 32)) >> (256 - 24 - 48 - 48 - 24 - 24 - 24 - 24 - 32);\\n\\n        uint256 encoded2 =\\n            uint256(UFixed6.unwrap(newValue.pController.k)                  << (256 - 48)) >> (256 - 48) |\\n            uint256(Fixed6.unwrap(newValue.pController.max)                 << (256 - 32)) >> (256 - 48 - 32) |\\n            uint256(UFixed6.unwrap(newValue.minMargin)                      << (256 - 48)) >> (256 - 48 - 32 - 48) |\\n            uint256(UFixed6.unwrap(newValue.minMaintenance)                 << (256 - 48)) >> (256 - 48 - 32 - 48 - 48) |\\n            uint256(UFixed6.unwrap(newValue.liquidationFee)                 << (256 - 48)) >> (256 - 48 - 32 - 48 - 48 - 48) |\\n            uint256(newValue.staleAfter                                     << (256 - 24)) >> (256 - 48 - 32 - 48 - 48 - 48 - 24) |\\n            uint256((newValue.makerReceiveOnly ? uint256(1) : uint256(0))   << (256 - 8))  >> (256 - 48 - 32 - 48 - 48 - 48 - 24 - 8);\\n\\n        assembly {\\n            sstore(self.slot, encoded0)\\n            sstore(add(self.slot, 1), encoded1)\\n            sstore(add(self.slot, 2), encoded2)\\n        }\\n    }\\n}\",\"keccak256\":\"0x90af6779c06bcca0c852369861872b5df6ff3e2091bbad2286516b65e624afcd\",\"license\":\"Apache-2.0\"},\"@equilibria/perennial-v2/contracts/types/Version.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.13;\\n\\nimport \\\"@equilibria/root/accumulator/types/Accumulator6.sol\\\";\\nimport \\\"./ProtocolParameter.sol\\\";\\nimport \\\"./MarketParameter.sol\\\";\\nimport \\\"./RiskParameter.sol\\\";\\nimport \\\"./Global.sol\\\";\\nimport \\\"./Position.sol\\\";\\nimport \\\"./Order.sol\\\";\\n\\n/// @dev Version type\\nstruct Version {\\n    /// @dev whether this version had a valid oracle price\\n    bool valid;\\n\\n    /// @dev The price of the version\\n    Fixed6 price;\\n\\n    /// @dev The maker accumulator value\\n    Accumulator6 makerValue;\\n\\n    /// @dev The long accumulator value\\n    Accumulator6 longValue;\\n\\n    /// @dev The short accumulator value\\n    Accumulator6 shortValue;\\n\\n    /// @dev The accumulated fee for maker orders\\n    Accumulator6 makerFee;\\n\\n    /// @dev The accumulated fee for taker orders\\n    Accumulator6 takerFee;\\n\\n    /// @dev The accumulated offset for maker orders\\n    Accumulator6 makerOffset;\\n\\n    /// @dev The accumulated offset for positive taker orders (open long / close short)\\n    Accumulator6 takerPosOffset;\\n\\n    /// @dev The accumulated offset for negative taker orders (close long / open short)\\n    Accumulator6 takerNegOffset;\\n\\n    /// @dev The accumulated settlement fee for each individual order\\n    Accumulator6 settlementFee;\\n\\n    /// @dev The accumulated liquidation fee for each individual order\\n    Accumulator6 liquidationFee;\\n}\\nstruct VersionStorage { uint256 slot0; uint256 slot1; uint256 slot2; }\\nusing VersionStorageLib for VersionStorage global;\\n\\n/// @dev Manually encodes and decodes the Version struct into storage.\\n///      (external-safe): this library is safe to externalize\\n///\\n///     struct StoredVersion {\\n///         /* slot 0 */\\n///         bool valid;\\n///         int64 makerValue;\\n///         int64 longValue;\\n///         int64 shortValue;\\n///         uint48 liquidationFee;\\n///\\n///         /* slot 1 */\\n///         int64 price;\\n///         int48 makerOffset;\\n///         int48 takerPosOffset;\\n///         int48 takerNegOffset;\\n///         uint48 settlementFee;\\n///\\n///         /* slot 2 */\\n///         int48 makerFee;\\n///         int48 takerFee;\\n///     }\\n///\\nlibrary VersionStorageLib {\\n    // sig: 0xd2777e72\\n    error VersionStorageInvalidError();\\n\\n    function read(VersionStorage storage self) internal view returns (Version memory) {\\n        (uint256 slot0, uint256 slot1, uint256 slot2) = (self.slot0, self.slot1, self.slot2);\\n        return Version(\\n            (uint256(slot0 << (256 - 8)) >> (256 - 8)) != 0,\\n            Fixed6.wrap(int256(slot1 << (256 - 64)) >> (256 - 64)),\\n\\n            Accumulator6(Fixed6.wrap(int256(slot0 << (256 - 8 - 64)) >> (256 - 64))),\\n            Accumulator6(Fixed6.wrap(int256(slot0 << (256 - 8 - 64 - 64)) >> (256 - 64))),\\n            Accumulator6(Fixed6.wrap(int256(slot0 << (256 - 8 - 64 - 64 - 64)) >> (256 - 64))),\\n\\n            Accumulator6(Fixed6.wrap(int256(slot2 << (256 - 48)) >> (256 - 48))),\\n            Accumulator6(Fixed6.wrap(int256(slot2 << (256 - 48 - 48)) >> (256 - 48))),\\n\\n            Accumulator6(Fixed6.wrap(int256(slot1 << (256 - 64 - 48)) >> (256 - 48))),\\n            Accumulator6(Fixed6.wrap(int256(slot1 << (256 - 64 - 48 - 48)) >> (256 - 48))),\\n            Accumulator6(Fixed6.wrap(int256(slot1 << (256 - 64 - 48 - 48 - 48)) >> (256 - 48))),\\n\\n            Accumulator6(Fixed6.wrap(int256(slot1 << (256 - 64 - 48 - 48 - 48 - 48)) >> (256 - 48))),\\n            Accumulator6(Fixed6.wrap(int256(slot0 << (256 - 8 - 64 - 64 - 64 - 48)) >> (256 - 48)))\\n        );\\n    }\\n\\n    function store(VersionStorage storage self, Version memory newValue) external {\\n        if (newValue.price.gt(Fixed6.wrap(type(int64).max))) revert VersionStorageInvalidError();\\n        if (newValue.price.lt(Fixed6.wrap(type(int64).min))) revert VersionStorageInvalidError();\\n        if (newValue.makerValue._value.gt(Fixed6.wrap(type(int64).max))) revert VersionStorageInvalidError();\\n        if (newValue.makerValue._value.lt(Fixed6.wrap(type(int64).min))) revert VersionStorageInvalidError();\\n        if (newValue.longValue._value.gt(Fixed6.wrap(type(int64).max))) revert VersionStorageInvalidError();\\n        if (newValue.longValue._value.lt(Fixed6.wrap(type(int64).min))) revert VersionStorageInvalidError();\\n        if (newValue.shortValue._value.gt(Fixed6.wrap(type(int64).max))) revert VersionStorageInvalidError();\\n        if (newValue.shortValue._value.lt(Fixed6.wrap(type(int64).min))) revert VersionStorageInvalidError();\\n        if (newValue.makerFee._value.gt(Fixed6.wrap(type(int48).max))) revert VersionStorageInvalidError();\\n        if (newValue.makerFee._value.lt(Fixed6.wrap(type(int48).min))) revert VersionStorageInvalidError();\\n        if (newValue.takerFee._value.gt(Fixed6.wrap(type(int48).max))) revert VersionStorageInvalidError();\\n        if (newValue.takerFee._value.lt(Fixed6.wrap(type(int48).min))) revert VersionStorageInvalidError();\\n        if (newValue.makerOffset._value.gt(Fixed6.wrap(type(int48).max))) revert VersionStorageInvalidError();\\n        if (newValue.makerOffset._value.lt(Fixed6.wrap(type(int48).min))) revert VersionStorageInvalidError();\\n        if (newValue.takerPosOffset._value.gt(Fixed6.wrap(type(int48).max))) revert VersionStorageInvalidError();\\n        if (newValue.takerPosOffset._value.lt(Fixed6.wrap(type(int48).min))) revert VersionStorageInvalidError();\\n        if (newValue.takerNegOffset._value.gt(Fixed6.wrap(type(int48).max))) revert VersionStorageInvalidError();\\n        if (newValue.takerNegOffset._value.lt(Fixed6.wrap(type(int48).min))) revert VersionStorageInvalidError();\\n        if (newValue.settlementFee._value.gt(Fixed6.wrap(type(int48).max))) revert VersionStorageInvalidError();\\n        if (newValue.settlementFee._value.lt(Fixed6.wrap(type(int48).min))) revert VersionStorageInvalidError();\\n        if (newValue.liquidationFee._value.gt(Fixed6.wrap(type(int48).max))) revert VersionStorageInvalidError();\\n        if (newValue.liquidationFee._value.lt(Fixed6.wrap(type(int48).min))) revert VersionStorageInvalidError();\\n\\n        uint256 encoded0 =\\n            uint256((newValue.valid ? uint256(1) : uint256(0)) << (256 - 8)) >> (256 - 8) |\\n            uint256(Fixed6.unwrap(newValue.makerValue._value) << (256 - 64)) >> (256 - 8 - 64) |\\n            uint256(Fixed6.unwrap(newValue.longValue._value) << (256 - 64)) >> (256 - 8 - 64 - 64) |\\n            uint256(Fixed6.unwrap(newValue.shortValue._value) << (256 - 64)) >> (256 - 8 - 64 - 64 - 64) |\\n            uint256(Fixed6.unwrap(newValue.liquidationFee._value) << (256 - 48)) >> (256 - 8 - 64 - 64 - 64 - 48);\\n        uint256 encoded1 =\\n            uint256(Fixed6.unwrap(newValue.price) << (256 - 64)) >> (256 - 64) |\\n            uint256(Fixed6.unwrap(newValue.makerOffset._value) << (256 - 48)) >> (256 - 64 - 48) |\\n            uint256(Fixed6.unwrap(newValue.takerPosOffset._value) << (256 - 48)) >> (256 - 64 - 48 - 48) |\\n            uint256(Fixed6.unwrap(newValue.takerNegOffset._value) << (256 - 48)) >> (256 - 64 - 48 - 48 - 48) |\\n            uint256(Fixed6.unwrap(newValue.settlementFee._value) << (256 - 48)) >> (256 - 64 - 48 - 48 - 48 - 48);\\n        uint256 encoded2 =\\n            uint256(Fixed6.unwrap(newValue.makerFee._value) << (256 - 48)) >> (256 - 48) |\\n            uint256(Fixed6.unwrap(newValue.takerFee._value) << (256 - 48)) >> (256 - 48 - 48);\\n\\n        assembly {\\n            sstore(self.slot, encoded0)\\n            sstore(add(self.slot, 1), encoded1)\\n            sstore(add(self.slot, 2), encoded2)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc09b897e589a729fa89bf183515fba9808a2d5a5a6cd4e4b92360d2a522ad060\",\"license\":\"Apache-2.0\"},\"@equilibria/root/accumulator/types/Accumulator6.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.13;\\n\\nimport \\\"../../number/types/Fixed6.sol\\\";\\nimport \\\"../../number/types/UFixed6.sol\\\";\\n\\n/// @dev Accumulator6 type\\nstruct Accumulator6 {\\n    Fixed6 _value;\\n}\\n\\nusing Accumulator6Lib for Accumulator6 global;\\nstruct StoredAccumulator6 {\\n    int256 _value;\\n}\\nstruct Accumulator6Storage { StoredAccumulator6 value; }\\nusing Accumulator6StorageLib for Accumulator6Storage global;\\n\\n\\n/**\\n * @title Accumulator6Lib\\n * @notice Library that surfaces math operations for the signed Accumulator type.\\n * @dev This accumulator tracks cumulative changes to a value over time. Using the `accumulated` function, one\\n * can determine how much a value has changed between two points in time. The `increment` and `decrement` functions\\n * can be used to update the accumulator.\\n */\\nlibrary Accumulator6Lib {\\n    /**\\n     * Returns how much has been accumulated between two accumulators\\n     * @param self The current point of the accumulation to compare with `from`\\n     * @param from The starting point of the accumulation\\n     * @param total Demoninator of the ratio (see `increment` and `decrement` functions)\\n     */\\n    function accumulated(Accumulator6 memory self, Accumulator6 memory from, UFixed6 total) internal pure returns (Fixed6) {\\n        return _mul(self._value.sub(from._value), total);\\n    }\\n\\n    /**\\n     * @notice Increments an accumulator by a given ratio\\n     * @dev Always rounds down in order to prevent overstating the accumulated value\\n     * @param self The accumulator to increment\\n     * @param amount Numerator of the ratio\\n     * @param total Denominator of the ratio\\n     */\\n    function increment(Accumulator6 memory self, Fixed6 amount, UFixed6 total) internal pure {\\n        if (amount.isZero()) return;\\n        self._value = self._value.add(_div(amount, total));\\n    }\\n\\n    /**\\n     * @notice Decrements an accumulator by a given ratio\\n     * @dev Always rounds down in order to prevent overstating the accumulated value\\n     * @param self The accumulator to decrement\\n     * @param amount Numerator of the ratio\\n     * @param total Denominator of the ratio\\n     */\\n    function decrement(Accumulator6 memory self, Fixed6 amount, UFixed6 total) internal pure {\\n        if (amount.isZero()) return;\\n        self._value = self._value.add(_div(amount.mul(Fixed6Lib.NEG_ONE), total));\\n    }\\n\\n    function _div(Fixed6 amount, UFixed6 total) private pure returns (Fixed6) {\\n        return amount.sign() == -1 ? amount.divOut(Fixed6Lib.from(total)) : amount.div(Fixed6Lib.from(total));\\n    }\\n\\n    function _mul(Fixed6 amount, UFixed6 total) private pure returns (Fixed6) {\\n        return amount.sign() == -1 ? amount.mulOut(Fixed6Lib.from(total)) : amount.mul(Fixed6Lib.from(total));\\n    }\\n}\\n\\nlibrary Accumulator6StorageLib {\\n    function read(Accumulator6Storage storage self) internal view returns (Accumulator6 memory) {\\n        StoredAccumulator6 memory storedValue = self.value;\\n        return Accumulator6(Fixed6.wrap(int256(storedValue._value)));\\n    }\\n\\n    function store(Accumulator6Storage storage self, Accumulator6 memory newValue) internal {\\n        self.value = StoredAccumulator6(Fixed6.unwrap(newValue._value));\\n    }\\n}\\n\",\"keccak256\":\"0x21202b20328506bda86043889dca7b699732a9bf6ec735cc50ac8a444e643724\",\"license\":\"Apache-2.0\"},\"@equilibria/root/accumulator/types/UAccumulator6.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.13;\\n\\nimport \\\"../../number/types/UFixed6.sol\\\";\\n\\n/// @dev UAccumulator6 type\\nstruct UAccumulator6 {\\n    UFixed6 _value;\\n}\\n\\nusing UAccumulator6Lib for UAccumulator6 global;\\nstruct StoredUAccumulator6 {\\n    uint256 _value;\\n}\\nstruct UAccumulator6Storage { StoredUAccumulator6 value; }\\nusing UAccumulator6StorageLib for UAccumulator6Storage global;\\n\\n\\n/**\\n * @title UAccumulator6Lib\\n * @notice Library that surfaces math operations for the unsigned Accumulator type.\\n * @dev This accumulator tracks cumulative changes to a monotonically increasing value over time. Using the `accumulated` function, one\\n * can determine how much a value has changed between two points in time. The `increment` function can be used to update the accumulator.\\n */\\nlibrary UAccumulator6Lib {\\n    /**\\n     * Returns how much has been accumulated between two accumulators\\n     * @param self The current point of the accumulation to compare with `from`\\n     * @param from The starting point of the accumulation\\n     * @param total Demoninator of the ratio (see `increment` function)\\n     */\\n    function accumulated(UAccumulator6 memory self, UAccumulator6 memory from, UFixed6 total) internal pure returns (UFixed6) {\\n        return self._value.sub(from._value).mul(total);\\n    }\\n\\n    /**\\n     * @notice Increments an accumulator by a given ratio\\n     * @dev Always rounds down in order to prevent overstating the accumulated value\\n     * @param self The accumulator to increment\\n     * @param amount Numerator of the ratio\\n     * @param total Denominator of the ratio\\n     */\\n    function increment(UAccumulator6 memory self, UFixed6 amount, UFixed6 total) internal pure {\\n        if (amount.isZero()) return;\\n        self._value = self._value.add(amount.div(total));\\n    }\\n}\\n\\nlibrary UAccumulator6StorageLib {\\n    function read(UAccumulator6Storage storage self) internal view returns (UAccumulator6 memory) {\\n        StoredUAccumulator6 memory storedValue = self.value;\\n        return UAccumulator6(UFixed6.wrap(uint256(storedValue._value)));\\n    }\\n\\n    function store(UAccumulator6Storage storage self, UAccumulator6 memory newValue) internal {\\n        self.value = StoredUAccumulator6(UFixed6.unwrap(newValue._value));\\n    }\\n}\\n\",\"keccak256\":\"0x6c8f1e358099c02e441e396172c0d8920e85185946a72eff0af9a678588d0636\",\"license\":\"Apache-2.0\"},\"@equilibria/root/adiabatic/AdiabaticMath6.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.13;\\n\\nimport \\\"../number/types/UFixed6.sol\\\";\\nimport \\\"../number/types/Fixed6.sol\\\";\\n\\n/**\\n * @title AdiabaticMath6\\n * @notice Library for managing math operations for adiabatic fees.\\n */\\nlibrary AdiabaticMath6 {\\n    error Adiabatic6ZeroScaleError();\\n\\n    /// @notice Computes the base fees for an order\\n    /// @param fee The linear fee percentage\\n    /// @param change The change in skew in asset terms\\n    /// @param price The price of the underlying asset\\n    /// @return The linear fee in underlying terms\\n    function linearFee(UFixed6 fee, Fixed6 change, UFixed6 price) internal pure returns (UFixed6) {\\n        return change.abs().mul(price).mul(fee);\\n    }\\n\\n    /// @notice Computes the base fees for an order\\n    /// @param scale The scale of the skew\\n    /// @param fee The proportional fee percentage\\n    /// @param change The change in skew in asset terms\\n    /// @param price The price of the underlying asset\\n    /// @return The proportional fee in underlying terms\\n    function proportionalFee(UFixed6 scale, UFixed6 fee, Fixed6 change, UFixed6 price) internal pure returns (UFixed6) {\\n        return change.abs().mul(price).muldiv(change.abs(), scale).mul(fee);\\n    }\\n\\n    /// @notice Computes the adiabatic fee from a latest skew and change in skew over a linear function\\n    /// @param scale The scale of the skew\\n    /// @param adiabaticFee The adiabatic fee percentage\\n    /// @param latest The latest skew in asset terms\\n    /// @param change The change in skew in asset terms\\n    /// @param price The price of the underlying asset\\n    /// @return The adiabatic fee in underlying terms\\n    function linearCompute(\\n        UFixed6 scale,\\n        UFixed6 adiabaticFee,\\n        Fixed6 latest,\\n        Fixed6 change,\\n        UFixed6 price\\n    ) internal pure returns (Fixed6) {\\n        if (latest.isZero() && change.isZero()) return Fixed6Lib.ZERO;\\n        if (scale.isZero()) revert Adiabatic6ZeroScaleError();\\n\\n        // normalize for skew scale\\n        (Fixed6 latestScaled, Fixed6 changeScaled) =\\n            (latest.div(Fixed6Lib.from(scale)), change.div(Fixed6Lib.from(scale)));\\n\\n        // adiabatic fee = notional * fee percentage * mean of skew range\\n        return change.mul(Fixed6Lib.from(price)).mul(Fixed6Lib.from(adiabaticFee))\\n            .mul(_linearMean(latestScaled, latestScaled.add(changeScaled)));\\n    }\\n\\n    /// @notice Finds the mean value of the function f(x) = x over `from` to `to`\\n    /// @param from The lower bound\\n    /// @param to The upper bound\\n    /// @return The mean value\\n    function _linearMean(Fixed6 from, Fixed6 to) private pure returns (Fixed6) {\\n        return from.add(to).div(Fixed6Lib.from(2));\\n    }\\n}\\n\",\"keccak256\":\"0x9fea7ff94667e1ce3c4666940d21ad2fcc57058ec456f326e35f98b59a724433\",\"license\":\"Apache-2.0\"},\"@equilibria/root/adiabatic/types/LinearAdiabatic6.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.13;\\n\\nimport \\\"../../number/types/Fixed6.sol\\\";\\nimport \\\"../../number/types/UFixed6.sol\\\";\\nimport \\\"../AdiabaticMath6.sol\\\";\\n\\n/// @dev LinearAdiabatic6 type\\nstruct LinearAdiabatic6 {\\n    UFixed6 linearFee;\\n    UFixed6 proportionalFee;\\n    UFixed6 adiabaticFee;\\n    UFixed6 scale;\\n}\\nusing LinearAdiabatic6Lib for LinearAdiabatic6 global;\\n\\n/**\\n * @title LinearAdiabatic6Lib\\n * @notice Library that that manages the linear adiabatic fee algorithm\\n * @dev This algorithm specifies an adiatatic fee over the function:\\n *\\n *      f(skew) = adiabaticFee * skew\\n *\\n *      This is used to reward or penalize actions that move skew up or down this curve accordingly with net-zero\\n *      value to the system with respect to the underlying asset.\\n */\\nlibrary LinearAdiabatic6Lib {\\n    /// @notice Computes the adiabatic fee from a latest skew and change in skew\\n    /// @param self The adiabatic configuration\\n    /// @param latest The latest skew in asset terms\\n    /// @param change The change in skew in asset terms\\n    /// @param price The price of the underlying asset\\n    /// @return The adiabatic fee in underlying terms\\n    function compute(\\n        LinearAdiabatic6 memory self,\\n        Fixed6 latest,\\n        Fixed6 change,\\n        UFixed6 price\\n    ) internal pure returns (Fixed6) {\\n        return AdiabaticMath6.linearCompute(\\n            self.scale,\\n            self.adiabaticFee,\\n            latest,\\n            change,\\n            price\\n        );\\n    }\\n\\n    /// @notice Computes the latest exposure along with all fees\\n    /// @param self The adiabatic configuration\\n    /// @param latest The latest skew in asset terms\\n    /// @return The latest total exposure in asset terms\\n    function exposure(LinearAdiabatic6 memory self, Fixed6 latest) internal pure returns (Fixed6) {\\n        return compute(self, Fixed6Lib.ZERO, latest, UFixed6Lib.ONE);\\n    }\\n\\n    /// @dev Computes the change in exposure from a new configuration\\n    /// @param self The latest fee configuration\\n    /// @param newConfig The new fee configuration\\n    /// @param latest The latest skew in asset terms\\n    /// @param price The price of the underlying asset\\n    /// @return The update fee in underlying terms\\n    function exposure(\\n        LinearAdiabatic6 memory self,\\n        LinearAdiabatic6 memory newConfig,\\n        Fixed6 latest,\\n        UFixed6 price\\n    ) internal pure returns (Fixed6) {\\n        return compute(newConfig, Fixed6Lib.ZERO, latest, price).sub(compute(self, Fixed6Lib.ZERO, latest, price));\\n    }\\n\\n    /// @notice Computes the linear fee\\n    /// @param self The adiabatic configuration\\n    /// @param change The change in skew in asset terms\\n    /// @param price The price of the underlying asset\\n    /// @return The linear fee in underlying terms\\n    function linear(LinearAdiabatic6 memory self, Fixed6 change, UFixed6 price) internal pure returns (UFixed6) {\\n        return AdiabaticMath6.linearFee(self.linearFee, change, price);\\n    }\\n\\n    /// @notice Computes the proportional fee\\n    /// @param self The adiabatic configuration\\n    /// @param change The change in skew in asset terms\\n    /// @param price The price of the underlying asset\\n    /// @return The proportional fee in underlying terms\\n    function proportional(LinearAdiabatic6 memory self, Fixed6 change, UFixed6 price) internal pure returns (UFixed6) {\\n        return AdiabaticMath6.proportionalFee(self.scale, self.proportionalFee, change, price);\\n    }\\n\\n    /// @notice Computes the adiabatic fee\\n    /// @param self The adiabatic configuration\\n    /// @param latest The latest skew in asset terms\\n    /// @param change The change in skew in asset terms\\n    /// @param price The price of the underlying asset\\n    /// @return The adiabatic fee in underlying terms\\n    function adiabatic(\\n        LinearAdiabatic6 memory self,\\n        Fixed6 latest,\\n        Fixed6 change,\\n        UFixed6 price\\n    ) internal pure returns (Fixed6) {\\n        return compute(self, latest, change, price);\\n    }\\n}\\n\",\"keccak256\":\"0x5cb33ae31f4c44194e9fd8576eb15af0e29c0ff7cb91fd54c1f8010f125993a6\",\"license\":\"Apache-2.0\"},\"@equilibria/root/adiabatic/types/NoopAdiabatic6.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.13;\\n\\nimport \\\"../../number/types/Fixed6.sol\\\";\\nimport \\\"../../number/types/UFixed6.sol\\\";\\nimport \\\"../AdiabaticMath6.sol\\\";\\n\\n/// @dev NoopAdiabatic6 type\\nstruct NoopAdiabatic6 {\\n    UFixed6 linearFee;\\n    UFixed6 proportionalFee;\\n    UFixed6 scale;\\n}\\nusing NoopAdiabatic6Lib for NoopAdiabatic6 global;\\n\\n/**\\n * @title NoopAdiabatic6Lib\\n * @notice Library that that manages the no-op adiabatic fee algorithm\\n * @dev This algorithm specifies a fee schedule without an adiabatic fee. This is used for fees that need unsigned\\n *      fee impact without a signed shift fee based on skew.\\n */\\nlibrary NoopAdiabatic6Lib {\\n    /// @notice Computes the linear fee\\n    /// @param self The adiabatic configuration\\n    /// @param change The change in skew in asset terms\\n    /// @param price The price of the underlying asset\\n    /// @return The linear fee in underlying terms\\n    function linear(NoopAdiabatic6 memory self, Fixed6 change, UFixed6 price) internal pure returns (UFixed6) {\\n        return AdiabaticMath6.linearFee(self.linearFee, change, price);\\n    }\\n\\n    /// @notice Computes the proportional fee\\n    /// @param self The adiabatic configuration\\n    /// @param change The change in skew in asset terms\\n    /// @param price The price of the underlying asset\\n    /// @return The proportional fee in underlying terms\\n    function proportional(NoopAdiabatic6 memory self, Fixed6 change, UFixed6 price) internal pure returns (UFixed6) {\\n        return AdiabaticMath6.proportionalFee(self.scale, self.proportionalFee, change, price);\\n    }\\n}\\n\",\"keccak256\":\"0x711415003ec7bbb170c5d6afc7ccb884b059dab8c4908d930573ccaa4c22ed9d\",\"license\":\"Apache-2.0\"},\"@equilibria/root/attribute/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"./interfaces/IInitializable.sol\\\";\\nimport \\\"../storage/Storage.sol\\\";\\n\\n/**\\n * @title Initializable\\n * @notice Library to manage the initialization lifecycle of upgradeable contracts\\n * @dev `Initializable.sol` allows the creation of pseudo-constructors for upgradeable contracts. One\\n *      `initializer` should be declared per top-level contract. Child contracts can use the `onlyInitializer`\\n *      modifier to tag their internal initialization functions to ensure that they can only be called\\n *      from a top-level `initializer` or a constructor.\\n */\\nabstract contract Initializable is IInitializable {\\n    /// @dev The initialized flag\\n    Uint256Storage private constant _version = Uint256Storage.wrap(keccak256(\\\"equilibria.root.Initializable.version\\\"));\\n\\n    /// @dev The initializing flag\\n    BoolStorage private constant _initializing = BoolStorage.wrap(keccak256(\\\"equilibria.root.Initializable.initializing\\\"));\\n\\n    /// @dev Can only be called once per version, `version` is 1-indexed\\n    modifier initializer(uint256 version) {\\n        if (version == 0) revert InitializableZeroVersionError();\\n        if (_version.read() >= version) revert InitializableAlreadyInitializedError(version);\\n\\n        _version.store(version);\\n        _initializing.store(true);\\n\\n        _;\\n\\n        _initializing.store(false);\\n        emit Initialized(version);\\n    }\\n\\n    /// @dev Can only be called from an initializer or constructor\\n    modifier onlyInitializer() {\\n        if (!_constructing() && !_initializing.read()) revert InitializableNotInitializingError();\\n        _;\\n    }\\n\\n    /**\\n     * @notice Returns whether the contract is currently being constructed\\n     * @dev {Address.isContract} returns false for contracts currently in the process of being constructed\\n     * @return Whether the contract is currently being constructed\\n     */\\n    function _constructing() private view returns (bool) {\\n        return !Address.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0xaae151abc669fe2ec33a80e4e62da1849b7863034aeb9c16122c728d041cfb0b\",\"license\":\"Apache-2.0\"},\"@equilibria/root/attribute/Kept/Kept.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.13;\\n\\nimport \\\"../Initializable.sol\\\";\\nimport \\\"../interfaces/IKept.sol\\\";\\nimport \\\"../../storage/Storage.sol\\\";\\n\\n/// @title Kept\\n/// @notice Library to manage keeper incentivization.\\n/// @dev Surfaces a keep() modifier that handles measuring job gas costs and paying out rewards the keeper.\\nabstract contract Kept is IKept, Initializable {\\n    /// @dev The legacy Chainlink feed that is used to convert price ETH relative to the keeper token\\n    AddressStorage private constant _ethTokenOracleFeed = AddressStorage.wrap(keccak256(\\\"equilibria.root.Kept.ethTokenOracleFeed\\\"));\\n    function ethTokenOracleFeed() public view returns (AggregatorV3Interface) { return AggregatorV3Interface(_ethTokenOracleFeed.read()); }\\n\\n    /// @dev The token that the keeper is paid in\\n    Token18Storage private constant _keeperToken = Token18Storage.wrap(keccak256(\\\"equilibria.root.Kept.keeperToken\\\"));\\n    function keeperToken() public view returns (Token18) { return _keeperToken.read(); }\\n\\n    /// @notice Initializes the contract\\n    /// @param ethTokenOracleFeed_ The legacy Chainlink feed that is used to convert price ETH relative to the keeper token\\n    /// @param keeperToken_ The token that the keeper is paid in\\n    function __Kept__initialize(\\n        AggregatorV3Interface ethTokenOracleFeed_,\\n        Token18 keeperToken_\\n    ) internal onlyInitializer {\\n        _ethTokenOracleFeed.store(address(ethTokenOracleFeed_));\\n        _keeperToken.store(keeperToken_);\\n    }\\n\\n    /// @notice Called by the keep modifier to raise the optionally raise the keeper fee\\n    /// @param amount The amount of keeper fee to raise\\n    /// @param data Arbitrary data passed in from the keep modifier\\n    /// @return The amount of keeper fee that was actually raised\\n    function _raiseKeeperFee(UFixed18 amount, bytes memory data) internal virtual returns (UFixed18) { return amount; }\\n\\n    /// @notice Computes the calldata portion of the keeper fee\\n    /// @dev Used for L2 implementation with significant calldata costs\\n    /// @param applicableCalldata The applicable calldata\\n    /// @param multiplierCalldata The multiplier to apply to the calldata cost\\n    /// @param bufferCalldata The buffer to apply to the calldata cost\\n    /// @return The calldata portion of the keeper fee\\n    function _calldataFee(\\n        bytes memory applicableCalldata,\\n        UFixed18 multiplierCalldata,\\n        uint256 bufferCalldata\\n    ) internal view virtual returns (UFixed18) { return UFixed18Lib.ZERO; }\\n\\n    /// @notice Computes the base gas portion of the keeper fee\\n    /// @param applicableGas The applicable gas cost\\n    /// @param multiplierBase The multiplier to apply to the gas cost\\n    /// @param bufferBase The buffer to apply to the gas cost\\n    /// @return The gas cost portion of the keeper fee\\n    function _baseFee(\\n        uint256 applicableGas,\\n        UFixed18 multiplierBase,\\n        uint256 bufferBase\\n    ) internal view returns (UFixed18) {\\n        return _fee(applicableGas, multiplierBase, bufferBase, block.basefee);\\n    }\\n\\n    /// @notice Computes a generic keeper fee based on parameters\\n    /// @dev Helper function to consolidate keeper fee computation logic\\n    /// @param gas The gas cost\\n    /// @param multiplier The multiplier to apply to the gas cost\\n    /// @param buffer The buffer to apply to the gas cost\\n    /// @return The resulting keeper fee\\n    function _fee(uint256 gas, UFixed18 multiplier, uint256 buffer, uint256 baseFee) internal pure returns (UFixed18) {\\n        return UFixed18Lib.from(gas).mul(multiplier).add(UFixed18Lib.from(buffer)).mul(UFixed18.wrap(baseFee));\\n    }\\n\\n    /// @notice Placed on a function to incentivize keepers to call it\\n    /// @param config The multiplier and buffer configuration to apply\\n    /// @param data Arbitrary data to pass to the _raiseKeeperFee function\\n    /// @param applicableCalldata The applicable calldata\\n    /// @param applicableValue The applicable value\\n    /// @param data Arbitrary data to pass to the _raiseKeeperFee function\\n    modifier keep(\\n        KeepConfig memory config,\\n        bytes memory applicableCalldata,\\n        uint256 applicableValue,\\n        bytes memory data\\n    ) {\\n        uint256 startGas = gasleft();\\n\\n        _;\\n\\n        uint256 applicableGas = startGas - gasleft();\\n\\n        _handleKeeperFee(config, applicableGas, applicableCalldata, applicableValue, data);\\n    }\\n\\n    /// @notice Called by the keep modifier to handle keeper fee computation and payment\\n    /// @param config The multiplier and buffer configuration to apply\\n    /// @param applicableGas The applicable gas cost\\n    /// @param applicableCalldata The applicable calldata\\n    /// @param applicableValue The applicable value\\n    /// @param data Arbitrary data to pass to the _raiseKeeperFee function\\n    function _handleKeeperFee(\\n        KeepConfig memory config,\\n        uint256 applicableGas,\\n        bytes memory applicableCalldata,\\n        uint256 applicableValue,\\n        bytes memory data\\n    ) internal {\\n        (UFixed18 baseFee, UFixed18 calldataFee) = (\\n            _baseFee(applicableGas, config.multiplierBase, config.bufferBase),\\n            _calldataFee(applicableCalldata, config.multiplierCalldata, config.bufferCalldata)\\n        );\\n\\n        UFixed18 keeperFee = UFixed18.wrap(applicableValue).add(baseFee).add(calldataFee).mul(_etherPrice());\\n        keeperFee = _raiseKeeperFee(keeperFee, data);\\n        keeperToken().push(msg.sender, keeperFee);\\n\\n        emit KeeperCall(msg.sender, applicableGas, applicableValue, baseFee, calldataFee, keeperFee);\\n    }\\n\\n    /// @notice Returns the price of ETH in terms of the keeper token\\n    /// @return The price of ETH in terms of the keeper token\\n    function _etherPrice() private view returns (UFixed18) {\\n        (, int256 answer, , ,) = ethTokenOracleFeed().latestRoundData();\\n        return UFixed18Lib.from(Fixed18Lib.ratio(answer, 1e8)); // chainlink eth-usd feed uses 8 decimals\\n    }\\n}\\n\",\"keccak256\":\"0x02b283032d840d309fa8109b1c578553e6b8c37f6291e10a7b6a9413e60df03b\",\"license\":\"Apache-2.0\"},\"@equilibria/root/attribute/Kept/Kept_Arbitrum.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.13;\\n\\nimport \\\"./Kept.sol\\\";\\nimport { ArbGasInfo } from \\\"../../gas/GasOracle_Arbitrum.sol\\\";\\n\\n/// @dev Arbitrum Kept implementation\\nabstract contract Kept_Arbitrum is Kept {\\n    ArbGasInfo constant ARB_GAS = ArbGasInfo(0x000000000000000000000000000000000000006C);\\n    uint256 public constant ARB_GAS_MULTIPLIER = 16;\\n    uint256 public constant ARB_FIXED_OVERHEAD = 140;\\n\\n    // https://docs.arbitrum.io/devs-how-tos/how-to-estimate-gas#breaking-down-the-formula\\n    // Tx Fee = block.baseFee * l2GasUsed + ArbGasInfo.getL1BaseFeeEstimate() * 16 * (calldataLength + fixedOverhead)\\n    // Dynamic buffer = (ArbGasInfo.getL1BaseFeeEstimate() * 16 * (calldataLength + fixedOverhead))\\n    function _calldataFee(\\n        bytes memory applicableCalldata,\\n        UFixed18 multiplierCalldata,\\n        uint256 bufferCalldata\\n    ) internal view virtual override returns (UFixed18) {\\n        return _fee(\\n            ARB_GAS_MULTIPLIER * (applicableCalldata.length + ARB_FIXED_OVERHEAD),\\n            multiplierCalldata,\\n            bufferCalldata,\\n            ARB_GAS.getL1BaseFeeEstimate()\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x8b4447cd9bd95e01422980c303dc10cb5164d5b4e9ba639e0a7215e9f1f6bc5a\",\"license\":\"Apache-2.0\"},\"@equilibria/root/attribute/interfaces/IFactory.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/proxy/beacon/IBeacon.sol\\\";\\nimport \\\"./IPausable.sol\\\";\\nimport \\\"./IInstance.sol\\\";\\n\\ninterface IFactory is IBeacon, IOwnable, IPausable {\\n    event InstanceRegistered(IInstance indexed instance);\\n\\n    error FactoryNotInstanceError();\\n\\n    function instances(IInstance instance) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x64c821ff5b6ff536a295bc0a24bf76dac44cd67b89183d224903f9fe1d6d3e65\",\"license\":\"Apache-2.0\"},\"@equilibria/root/attribute/interfaces/IInitializable.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.13;\\n\\ninterface IInitializable {\\n    error InitializableZeroVersionError();\\n    error InitializableAlreadyInitializedError(uint256 version);\\n    error InitializableNotInitializingError();\\n\\n    event Initialized(uint256 version);\\n}\\n\",\"keccak256\":\"0xa626c401aab111b5ccdaa280b4d0137e2f4261a71796cd89a1435025083b4035\",\"license\":\"Apache-2.0\"},\"@equilibria/root/attribute/interfaces/IInstance.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.13;\\n\\nimport \\\"./IFactory.sol\\\";\\nimport \\\"./IInitializable.sol\\\";\\n\\ninterface IInstance is IInitializable {\\n    error InstanceNotOwnerError(address sender);\\n    error InstanceNotFactoryError(address sender);\\n    error InstancePausedError();\\n\\n    function factory() external view returns (IFactory);\\n}\\n\",\"keccak256\":\"0x9c25e710af0e06bde4bc5b63a8fb4c020a55e7f2dc93ca061d0b74318cd4a8a0\",\"license\":\"Apache-2.0\"},\"@equilibria/root/attribute/interfaces/IKept.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.13;\\n\\nimport { AggregatorV3Interface } from \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\nimport \\\"../interfaces/IInitializable.sol\\\";\\nimport \\\"../../number/types/UFixed18.sol\\\";\\nimport \\\"../../token/types/Token18.sol\\\";\\n\\ninterface IKept is IInitializable {\\n    struct KeepConfig {\\n        UFixed18 multiplierBase;\\n        uint256 bufferBase;\\n        UFixed18 multiplierCalldata;\\n        uint256 bufferCalldata;\\n    }\\n\\n    event KeeperCall(address indexed sender, uint256 applicableGas, uint256 applicableValue, UFixed18 baseFee, UFixed18 calldataFee, UFixed18 keeperFee);\\n\\n    function ethTokenOracleFeed() external view returns (AggregatorV3Interface);\\n    function keeperToken() external view returns (Token18);\\n}\\n\",\"keccak256\":\"0xf4e1f5a6d115bca2636223d6516ddec2b92c9f587b416a737aff120fd02d6c5d\",\"license\":\"Apache-2.0\"},\"@equilibria/root/attribute/interfaces/IOwnable.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.13;\\n\\nimport \\\"./IInitializable.sol\\\";\\n\\ninterface IOwnable is IInitializable {\\n    event OwnerUpdated(address indexed newOwner);\\n    event PendingOwnerUpdated(address indexed newPendingOwner);\\n\\n    error OwnableNotOwnerError(address sender);\\n    error OwnableNotPendingOwnerError(address sender);\\n    error OwnableAlreadyInitializedError();\\n\\n    function owner() external view returns (address);\\n    function pendingOwner() external view returns (address);\\n    function updatePendingOwner(address newPendingOwner) external;\\n    function acceptOwner() external;\\n}\\n\",\"keccak256\":\"0x6b3d8a25d98d049ba4cfdbf36dd7f0e8b9ab8c3d514c2b2b730b459e0092717a\",\"license\":\"Apache-2.0\"},\"@equilibria/root/attribute/interfaces/IPausable.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.13;\\n\\nimport \\\"./IInitializable.sol\\\";\\nimport \\\"./IOwnable.sol\\\";\\n\\ninterface IPausable is IInitializable, IOwnable {\\n    event PauserUpdated(address indexed newPauser);\\n    event Paused();\\n    event Unpaused();\\n\\n    error PausablePausedError();\\n    error PausableNotPauserError(address sender);\\n\\n    function pauser() external view returns (address);\\n    function paused() external view returns (bool);\\n    function updatePauser(address newPauser) external;\\n    function pause() external;\\n    function unpause() external;\\n}\\n\",\"keccak256\":\"0x8ae48b036875291c763787ba6730d56f4a9cb30d7d4132ec8711544b99689338\",\"license\":\"Apache-2.0\"},\"@equilibria/root/gas/GasOracle.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.13;\\n\\nimport { AggregatorV3Interface } from \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\nimport { UFixed18, UFixed18Lib } from \\\"../number/types/UFixed18.sol\\\";\\nimport { Fixed18Lib } from \\\"../number/types/Fixed18.sol\\\";\\nimport { IGasOracle } from \\\"./interfaces/IGasOracle.sol\\\";\\n\\n/// @title GasOracle\\n/// @notice Standalone gas oracle for externally computing keeper rewards based on ether gas costs\\ncontract GasOracle is IGasOracle {\\n    /// @notice The total compute gas rewarded\\n    UFixed18 public immutable COMPUTE_GAS;\\n\\n    /// @notice The total calldata gas rewarded\\n    UFixed18 public immutable CALLDATA_GAS;\\n\\n    /// @notice Chainlink ETH-Token feed, where cost is expressed in terms of Token\\n    AggregatorV3Interface public immutable FEED;\\n\\n    /// @notice The precomputed offset of the Chainlink feed (10 ^ decimals)\\n    int256 public immutable FEED_OFFSET;\\n\\n    constructor(\\n        AggregatorV3Interface feed,\\n        uint256 decimals,\\n        uint256 computeGas,\\n        UFixed18 computeMultiplier,\\n        uint256 computeBase,\\n        uint256 calldataGas,\\n        UFixed18 calldataMultiplier,\\n        uint256 calldataBase\\n    ) {\\n        FEED = feed;\\n        FEED_OFFSET = int256(10 ** decimals);\\n        COMPUTE_GAS = _precompute(computeGas, computeMultiplier, computeBase);\\n        CALLDATA_GAS = _precompute(calldataGas, calldataMultiplier, calldataBase);\\n    }\\n\\n   /// @inheritdoc IGasOracle\\n    function cost(uint256 value) external view returns (UFixed18) {\\n        (UFixed18 baseFee, UFixed18 calldataFee) =\\n            (UFixed18.wrap(block.basefee).mul(COMPUTE_GAS), UFixed18.wrap(_calldataBaseFee()).mul(CALLDATA_GAS));\\n\\n        return UFixed18.wrap(value).add(baseFee).add(calldataFee).mul(_etherPrice());\\n    }\\n\\n    /// @notice Precomputes the total rewarded gas cost\\n    /// @param gas The applicable gas cost\\n    /// @param multiplier The reward multiplier to apply to the gas cost\\n    /// @param base The base gas reward to add on to the gas cost\\n    /// @return The total rewarded gas cost\\n    function _precompute(uint256 gas, UFixed18 multiplier, uint256 base) private pure returns (UFixed18) {\\n        return UFixed18Lib.from(gas).mul(multiplier).add(UFixed18Lib.from(base));\\n    }\\n\\n    /// @notice Returns the price of ether in terms of the underlying token\\n    /// @return The price of ether in terms of the underlyingtoken\\n    function _etherPrice() private view returns (UFixed18) {\\n        (, int256 answer, , ,) = FEED.latestRoundData();\\n        return UFixed18Lib.from(Fixed18Lib.ratio(answer, FEED_OFFSET));\\n    }\\n\\n    /// @notice Returns the base fee of the calldata\\n    /// @dev Can be overridden to provide a non-zero calldata base fee for L2 implementations\\n    /// @return The base fee of the calldata\\n    function _calldataBaseFee() internal virtual view returns (uint256) { return 0; }\\n}\\n\",\"keccak256\":\"0x7a7bcdf2d8f5aad3a520eb2d35388bd74787f3ea7c83ad9d003960b05d2973c5\",\"license\":\"Apache-2.0\"},\"@equilibria/root/gas/GasOracle_Arbitrum.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.13;\\n\\nimport { AggregatorV3Interface } from \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\nimport { UFixed18, UFixed18Lib } from \\\"../number/types/UFixed18.sol\\\";\\nimport { Fixed18Lib } from \\\"../number/types/Fixed18.sol\\\";\\nimport { GasOracle } from \\\"./GasOracle.sol\\\";\\n\\n// https://github.com/OffchainLabs/nitro/blob/v2.0.14/contracts/src/precompiles/ArbGasInfo.sol#L93\\ninterface ArbGasInfo {\\n    /// @notice Get ArbOS's estimate of the L1 basefee in wei\\n    function getL1BaseFeeEstimate() external view returns (uint256);\\n}\\n\\ncontract GasOracle_Arbitrum is GasOracle {\\n    ArbGasInfo constant ARB_GAS = ArbGasInfo(0x000000000000000000000000000000000000006C);\\n\\n    constructor(\\n        AggregatorV3Interface feed,\\n        uint256 decimals,\\n        uint256 computeGas,\\n        UFixed18 computeMultiplier,\\n        uint256 computeBase,\\n        uint256 calldataGas,\\n        UFixed18 calldataMultiplier,\\n        uint256 calldataBase\\n    ) GasOracle(feed, decimals, computeGas, computeMultiplier, computeBase, calldataGas, calldataMultiplier, calldataBase) { }\\n\\n    function _calldataBaseFee() internal override view returns (uint256) { return ARB_GAS.getL1BaseFeeEstimate(); }\\n}\\n\",\"keccak256\":\"0xb29dadf9642713b3d30278106cef01528360025f4acfdebbd56952899d3b3bc4\",\"license\":\"Apache-2.0\"},\"@equilibria/root/gas/interfaces/IGasOracle.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.13;\\n\\nimport { AggregatorV3Interface } from \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\nimport { UFixed18 } from \\\"../../number/types/UFixed18.sol\\\";\\n\\ninterface IGasOracle {\\n    function COMPUTE_GAS() external view returns (UFixed18);\\n    function CALLDATA_GAS() external view returns (UFixed18);\\n    function FEED() external view returns (AggregatorV3Interface);\\n    function FEED_OFFSET() external view returns (int256);\\n\\n    /// @notice Computes the reward of a transaction\\n    /// @param value The ether value of the transaction in addition to the gas cost rewarded\\n    /// @return The reward of the transaction\\n    function cost(uint256 value) external view returns (UFixed18);\\n}\\n\",\"keccak256\":\"0xcfbc5523e5c152b031d1b2152702d2e5665c9b9e39a9330bdb9a0940974939ac\",\"license\":\"Apache-2.0\"},\"@equilibria/root/number/NumberMath.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SignedMath.sol\\\";\\n\\n/**\\n * @title NumberMath\\n * @notice Library for additional math functions that are not included in the OpenZeppelin libraries.\\n */\\nlibrary NumberMath {\\n    error DivisionByZero();\\n\\n    /**\\n     * @notice Divides `a` by `b`, rounding the result away from zero if there is a remainder\\n     * @param a Dividend\\n     * @param b Divisor\\n     * @return Resulting quotient\\n     */\\n    function divOut(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) revert DivisionByZero();\\n        return Math.ceilDiv(a, b);\\n    }\\n\\n    /**\\n     * @notice Divides `a` by `b`, rounding the result away from zero if there is a remainder\\n     * @param a Dividend\\n     * @param b Divisor\\n     * @return Resulting quotient\\n     */\\n    function divOut(int256 a, int256 b) internal pure returns (int256) {\\n        return sign(a) * sign(b) * int256(divOut(SignedMath.abs(a), SignedMath.abs(b)));\\n    }\\n\\n    /**\\n     * @notice Returns the sign of an int256\\n     * @dev Returns: -1 for negative\\n     *                0 for zero\\n     *                1 for positive\\n     * @param a int256 to find the sign of\\n     * @return Sign of the int256\\n     */\\n    function sign(int256 a) internal pure returns (int256) {\\n        if (a > 0) return 1;\\n        if (a < 0) return -1;\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x8d3578ce6e74ee6589ba0468e2c539ef1eb51d6687b508e637620926eb8396b4\",\"license\":\"Apache-2.0\"},\"@equilibria/root/number/types/Fixed18.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/SignedMath.sol\\\";\\nimport \\\"../NumberMath.sol\\\";\\nimport \\\"./Fixed6.sol\\\";\\nimport \\\"./UFixed18.sol\\\";\\n\\n/// @dev Fixed18 type\\ntype Fixed18 is int256;\\nusing Fixed18Lib for Fixed18 global;\\ntype Fixed18Storage is bytes32;\\nusing Fixed18StorageLib for Fixed18Storage global;\\n\\n/**\\n * @title Fixed18Lib\\n * @notice Library for the signed fixed-decimal type.\\n */\\nlibrary Fixed18Lib {\\n    error Fixed18OverflowError(uint256 value);\\n\\n    int256 private constant BASE = 1e18;\\n    Fixed18 public constant ZERO = Fixed18.wrap(0);\\n    Fixed18 public constant ONE = Fixed18.wrap(BASE);\\n    Fixed18 public constant NEG_ONE = Fixed18.wrap(-1 * BASE);\\n    Fixed18 public constant MAX = Fixed18.wrap(type(int256).max);\\n    Fixed18 public constant MIN = Fixed18.wrap(type(int256).min);\\n\\n    /**\\n     * @notice Creates a signed fixed-decimal from an unsigned fixed-decimal\\n     * @param a Unsigned fixed-decimal\\n     * @return New signed fixed-decimal\\n     */\\n    function from(UFixed18 a) internal pure returns (Fixed18) {\\n        uint256 value = UFixed18.unwrap(a);\\n        if (value > uint256(type(int256).max)) revert Fixed18OverflowError(value);\\n        return Fixed18.wrap(int256(value));\\n    }\\n\\n    /**\\n     * @notice Creates a signed fixed-decimal from a sign and an unsigned fixed-decimal\\n     * @param s Sign\\n     * @param m Unsigned fixed-decimal magnitude\\n     * @return New signed fixed-decimal\\n     */\\n    function from(int256 s, UFixed18 m) internal pure returns (Fixed18) {\\n        if (s > 0) return from(m);\\n        if (s < 0) {\\n            // Since from(m) multiplies m by BASE, from(m) cannot be type(int256).min\\n            // which is the only value that would overflow when negated. Therefore,\\n            // we can safely negate from(m) without checking for overflow.\\n            unchecked { return Fixed18.wrap(-1 * Fixed18.unwrap(from(m))); }\\n        }\\n        return ZERO;\\n    }\\n\\n    /**\\n     * @notice Creates a signed fixed-decimal from a signed integer\\n     * @param a Signed number\\n     * @return New signed fixed-decimal\\n     */\\n    function from(int256 a) internal pure returns (Fixed18) {\\n        return Fixed18.wrap(a * BASE);\\n    }\\n\\n    /**\\n     * @notice Creates a signed fixed-decimal from a base-6 signed fixed-decimal\\n     * @param a Base-6 signed fixed-decimal\\n     * @return New signed fixed-decimal\\n     */\\n    function from(Fixed6 a) internal pure returns (Fixed18) {\\n        return Fixed18.wrap(Fixed6.unwrap(a) * 1e12);\\n    }\\n\\n    /**\\n     * @notice Returns whether the signed fixed-decimal is equal to zero.\\n     * @param a Signed fixed-decimal\\n     * @return Whether the signed fixed-decimal is zero.\\n     */\\n    function isZero(Fixed18 a) internal pure returns (bool) {\\n        return Fixed18.unwrap(a) == 0;\\n    }\\n\\n    /**\\n     * @notice Adds two signed fixed-decimals `a` and `b` together\\n     * @param a First signed fixed-decimal\\n     * @param b Second signed fixed-decimal\\n     * @return Resulting summed signed fixed-decimal\\n     */\\n    function add(Fixed18 a, Fixed18 b) internal pure returns (Fixed18) {\\n        return Fixed18.wrap(Fixed18.unwrap(a) + Fixed18.unwrap(b));\\n    }\\n\\n    /**\\n     * @notice Subtracts signed fixed-decimal `b` from `a`\\n     * @param a Signed fixed-decimal to subtract from\\n     * @param b Signed fixed-decimal to subtract\\n     * @return Resulting subtracted signed fixed-decimal\\n     */\\n    function sub(Fixed18 a, Fixed18 b) internal pure returns (Fixed18) {\\n        return Fixed18.wrap(Fixed18.unwrap(a) - Fixed18.unwrap(b));\\n    }\\n\\n    /**\\n     * @notice Multiplies two signed fixed-decimals `a` and `b` together\\n     * @param a First signed fixed-decimal\\n     * @param b Second signed fixed-decimal\\n     * @return Resulting multiplied signed fixed-decimal\\n     */\\n    function mul(Fixed18 a, Fixed18 b) internal pure returns (Fixed18) {\\n        return Fixed18.wrap(Fixed18.unwrap(a) * Fixed18.unwrap(b) / BASE);\\n    }\\n\\n    /**\\n     * @notice Multiplies two signed fixed-decimals `a` and `b` together, rounding the result away from zero if there is a remainder\\n     * @param a First signed fixed-decimal\\n     * @param b Second signed fixed-decimal\\n     * @return Resulting multiplied signed fixed-decimal\\n     */\\n    function mulOut(Fixed18 a, Fixed18 b) internal pure returns (Fixed18) {\\n        return Fixed18.wrap(NumberMath.divOut(Fixed18.unwrap(a) * Fixed18.unwrap(b), BASE));\\n    }\\n\\n    /**\\n     * @notice Divides signed fixed-decimal `a` by `b`\\n     * @param a Signed fixed-decimal to divide\\n     * @param b Signed fixed-decimal to divide by\\n     * @return Resulting divided signed fixed-decimal\\n     */\\n    function div(Fixed18 a, Fixed18 b) internal pure returns (Fixed18) {\\n        return Fixed18.wrap(Fixed18.unwrap(a) * BASE / Fixed18.unwrap(b));\\n    }\\n\\n    /**\\n     * @notice Divides signed fixed-decimal `a` by `b`, rounding the result away from zero if there is a remainder\\n     * @param a Signed fixed-decimal to divide\\n     * @param b Signed fixed-decimal to divide by\\n     * @return Resulting divided signed fixed-decimal\\n     */\\n    function divOut(Fixed18 a, Fixed18 b) internal pure returns (Fixed18) {\\n        return Fixed18Lib.from(sign(a) * sign(b), a.abs().divOut(b.abs()));\\n    }\\n\\n    /**\\n     * @notice Divides unsigned fixed-decimal `a` by `b`\\n     * @dev Does not revert on divide-by-0, instead returns `ONE` for `0/0`, `MAX` for `n/0`, and `MIN` for `-n/0`.\\n     * @param a Unsigned fixed-decimal to divide\\n     * @param b Unsigned fixed-decimal to divide by\\n     * @return Resulting divided unsigned fixed-decimal\\n     */\\n    function unsafeDiv(Fixed18 a, Fixed18 b) internal pure returns (Fixed18) {\\n        if (isZero(b)) {\\n            if (gt(a, ZERO)) return MAX;\\n            if (lt(a, ZERO)) return MIN;\\n            return ONE;\\n        } else {\\n            return div(a, b);\\n        }\\n    }\\n\\n    /**\\n     * @notice Divides unsigned fixed-decimal `a` by `b`, rounding the result away from zero if there is a remainder\\n     * @dev Does not revert on divide-by-0, instead returns `ONE` for `0/0`, `MAX` for `n/0`, and `MIN` for `-n/0`.\\n     * @param a Unsigned fixed-decimal to divide\\n     * @param b Unsigned fixed-decimal to divide by\\n     * @return Resulting divided unsigned fixed-decimal\\n     */\\n    function unsafeDivOut(Fixed18 a, Fixed18 b) internal pure returns (Fixed18) {\\n        if (isZero(b)) {\\n            if (gt(a, ZERO)) return MAX;\\n            if (lt(a, ZERO)) return MIN;\\n            return ONE;\\n        } else {\\n            return divOut(a, b);\\n        }\\n    }\\n\\n    /**\\n     * @notice Computes a * b / c without loss of precision due to BASE conversion\\n     * @param a First signed fixed-decimal\\n     * @param b Signed number to multiply by\\n     * @param c Signed number to divide by\\n     * @return Resulting computation\\n     */\\n    function muldiv(Fixed18 a, int256 b, int256 c) internal pure returns (Fixed18) {\\n        return muldiv(a, Fixed18.wrap(b), Fixed18.wrap(c));\\n    }\\n\\n    /**\\n     * @notice Computes a * b / c without loss of precision due to BASE conversion, rounding the result up to the next integer if there is a remainder\\n     * @param a First signed fixed-decimal\\n     * @param b Signed number to multiply by\\n     * @param c Signed number to divide by\\n     * @return Resulting computation\\n     */\\n    function muldivOut(Fixed18 a, int256 b, int256 c) internal pure returns (Fixed18) {\\n        return muldivOut(a, Fixed18.wrap(b), Fixed18.wrap(c));\\n    }\\n\\n    /**\\n     * @notice Computes a * b / c without loss of precision due to BASE conversion\\n     * @param a First signed fixed-decimal\\n     * @param b Signed fixed-decimal to multiply by\\n     * @param c Signed fixed-decimal to divide by\\n     * @return Resulting computation\\n     */\\n    function muldiv(Fixed18 a, Fixed18 b, Fixed18 c) internal pure returns (Fixed18) {\\n        return Fixed18.wrap(Fixed18.unwrap(a) * Fixed18.unwrap(b) / Fixed18.unwrap(c));\\n    }\\n\\n    /**\\n     * @notice Computes a * b / c without loss of precision due to BASE conversion, rounding the result up to the next integer if there is a remainder\\n     * @param a First signed fixed-decimal\\n     * @param b Signed fixed-decimal to multiply by\\n     * @param c Signed fixed-decimal to divide by\\n     * @return Resulting computation\\n     */\\n    function muldivOut(Fixed18 a, Fixed18 b, Fixed18 c) internal pure returns (Fixed18) {\\n        return Fixed18.wrap(NumberMath.divOut(Fixed18.unwrap(a) * Fixed18.unwrap(b), Fixed18.unwrap(c)));\\n    }\\n\\n    /**\\n     * @notice Returns whether signed fixed-decimal `a` is equal to `b`\\n     * @param a First signed fixed-decimal\\n     * @param b Second signed fixed-decimal\\n     * @return Whether `a` is equal to `b`\\n     */\\n    function eq(Fixed18 a, Fixed18 b) internal pure returns (bool) {\\n        return compare(a, b) == 1;\\n    }\\n\\n    /**\\n     * @notice Returns whether signed fixed-decimal `a` is greater than `b`\\n     * @param a First signed fixed-decimal\\n     * @param b Second signed fixed-decimal\\n     * @return Whether `a` is greater than `b`\\n     */\\n    function gt(Fixed18 a, Fixed18 b) internal pure returns (bool) {\\n        return compare(a, b) == 2;\\n    }\\n\\n    /**\\n     * @notice Returns whether signed fixed-decimal `a` is less than `b`\\n     * @param a First signed fixed-decimal\\n     * @param b Second signed fixed-decimal\\n     * @return Whether `a` is less than `b`\\n     */\\n    function lt(Fixed18 a, Fixed18 b) internal pure returns (bool) {\\n        return compare(a, b) == 0;\\n    }\\n\\n    /**\\n     * @notice Returns whether signed fixed-decimal `a` is greater than or equal to `b`\\n     * @param a First signed fixed-decimal\\n     * @param b Second signed fixed-decimal\\n     * @return Whether `a` is greater than or equal to `b`\\n     */\\n    function gte(Fixed18 a, Fixed18 b) internal pure returns (bool) {\\n        return gt(a, b) || eq(a, b);\\n    }\\n\\n    /**\\n     * @notice Returns whether signed fixed-decimal `a` is less than or equal to `b`\\n     * @param a First signed fixed-decimal\\n     * @param b Second signed fixed-decimal\\n     * @return Whether `a` is less than or equal to `b`\\n     */\\n    function lte(Fixed18 a, Fixed18 b) internal pure returns (bool) {\\n        return lt(a, b) || eq(a, b);\\n    }\\n\\n    /**\\n     * @notice Compares the signed fixed-decimals `a` and `b`\\n     * @dev Returns: 2 for greater than\\n     *               1 for equal to\\n     *               0 for less than\\n     * @param a First signed fixed-decimal\\n     * @param b Second signed fixed-decimal\\n     * @return Compare result of `a` and `b`\\n     */\\n    function compare(Fixed18 a, Fixed18 b) internal pure returns (uint256) {\\n        (int256 au, int256 bu) = (Fixed18.unwrap(a), Fixed18.unwrap(b));\\n        if (au > bu) return 2;\\n        if (au < bu) return 0;\\n        return 1;\\n    }\\n\\n    /**\\n     * @notice Returns a signed fixed-decimal representing the ratio of `a` over `b`\\n     * @param a First signed number\\n     * @param b Second signed number\\n     * @return Ratio of `a` over `b`\\n     */\\n    function ratio(int256 a, int256 b) internal pure returns (Fixed18) {\\n        return Fixed18.wrap(a * BASE / b);\\n    }\\n\\n    /**\\n     * @notice Returns the minimum of signed fixed-decimals `a` and `b`\\n     * @param a First signed fixed-decimal\\n     * @param b Second signed fixed-decimal\\n     * @return Minimum of `a` and `b`\\n     */\\n    function min(Fixed18 a, Fixed18 b) internal pure returns (Fixed18) {\\n        return Fixed18.wrap(SignedMath.min(Fixed18.unwrap(a), Fixed18.unwrap(b)));\\n    }\\n\\n    /**\\n     * @notice Returns the maximum of signed fixed-decimals `a` and `b`\\n     * @param a First signed fixed-decimal\\n     * @param b Second signed fixed-decimal\\n     * @return Maximum of `a` and `b`\\n     */\\n    function max(Fixed18 a, Fixed18 b) internal pure returns (Fixed18) {\\n        return Fixed18.wrap(SignedMath.max(Fixed18.unwrap(a), Fixed18.unwrap(b)));\\n    }\\n\\n    /**\\n     * @notice Converts the signed fixed-decimal into an integer, truncating any decimal portion\\n     * @param a Signed fixed-decimal\\n     * @return Truncated signed number\\n     */\\n    function truncate(Fixed18 a) internal pure returns (int256) {\\n        return Fixed18.unwrap(a) / BASE;\\n    }\\n\\n    /**\\n     * @notice Returns the sign of the signed fixed-decimal\\n     * @dev Returns: -1 for negative\\n     *                0 for zero\\n     *                1 for positive\\n     * @param a Signed fixed-decimal\\n     * @return Sign of the signed fixed-decimal\\n     */\\n    function sign(Fixed18 a) internal pure returns (int256) {\\n        if (Fixed18.unwrap(a) > 0) return 1;\\n        if (Fixed18.unwrap(a) < 0) return -1;\\n        return 0;\\n    }\\n\\n    /**\\n     * @notice Returns the absolute value of the signed fixed-decimal\\n     * @param a Signed fixed-decimal\\n     * @return Absolute value of the signed fixed-decimal\\n     */\\n    function abs(Fixed18 a) internal pure returns (UFixed18) {\\n        return UFixed18.wrap(SignedMath.abs(Fixed18.unwrap(a)));\\n    }\\n}\\n\\nlibrary Fixed18StorageLib {\\n    function read(Fixed18Storage self) internal view returns (Fixed18 value) {\\n        assembly (\\\"memory-safe\\\") {\\n            value := sload(self)\\n        }\\n    }\\n\\n    function store(Fixed18Storage self, Fixed18 value) internal {\\n        assembly (\\\"memory-safe\\\") {\\n            sstore(self, value)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xdd3541bc1dbe5ca81f996a1ed5a05a7b8c74247426aab221d1a8f37be91d0e4f\",\"license\":\"Apache-2.0\"},\"@equilibria/root/number/types/Fixed6.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/SignedMath.sol\\\";\\nimport \\\"../NumberMath.sol\\\";\\nimport \\\"./Fixed18.sol\\\";\\nimport \\\"./UFixed6.sol\\\";\\n\\n/// @dev Fixed6 type\\ntype Fixed6 is int256;\\nusing Fixed6Lib for Fixed6 global;\\ntype Fixed6Storage is bytes32;\\nusing Fixed6StorageLib for Fixed6Storage global;\\n\\n/**\\n * @title Fixed6Lib\\n * @notice Library for the signed fixed-decimal type.\\n */\\nlibrary Fixed6Lib {\\n    error Fixed6OverflowError(uint256 value);\\n\\n    int256 private constant BASE = 1e6;\\n    Fixed6 public constant ZERO = Fixed6.wrap(0);\\n    Fixed6 public constant ONE = Fixed6.wrap(BASE);\\n    Fixed6 public constant NEG_ONE = Fixed6.wrap(-1 * BASE);\\n    Fixed6 public constant MAX = Fixed6.wrap(type(int256).max);\\n    Fixed6 public constant MIN = Fixed6.wrap(type(int256).min);\\n\\n    /**\\n     * @notice Creates a signed fixed-decimal from an unsigned fixed-decimal\\n     * @param a Unsigned fixed-decimal\\n     * @return New signed fixed-decimal\\n     */\\n    function from(UFixed6 a) internal pure returns (Fixed6) {\\n        uint256 value = UFixed6.unwrap(a);\\n        if (value > uint256(type(int256).max)) revert Fixed6OverflowError(value);\\n        return Fixed6.wrap(int256(value));\\n    }\\n\\n    /**\\n     * @notice Creates a signed fixed-decimal from a sign and an unsigned fixed-decimal\\n     * @param s Sign\\n     * @param m Unsigned fixed-decimal magnitude\\n     * @return New signed fixed-decimal\\n     */\\n    function from(int256 s, UFixed6 m) internal pure returns (Fixed6) {\\n        if (s > 0) return from(m);\\n        if (s < 0) {\\n            // Since from(m) multiplies m by BASE, from(m) cannot be type(int256).min\\n            // which is the only value that would overflow when negated. Therefore,\\n            // we can safely negate from(m) without checking for overflow.\\n            unchecked { return Fixed6.wrap(-1 * Fixed6.unwrap(from(m))); }\\n        }\\n        return ZERO;\\n    }\\n\\n    /**\\n     * @notice Creates a signed fixed-decimal from a signed integer\\n     * @param a Signed number\\n     * @return New signed fixed-decimal\\n     */\\n    function from(int256 a) internal pure returns (Fixed6) {\\n        return Fixed6.wrap(a * BASE);\\n    }\\n\\n    /**\\n     * @notice Creates a signed fixed-decimal from a base-18 signed fixed-decimal\\n     * @param a Base-18 signed fixed-decimal\\n     * @return New signed fixed-decimal\\n     */\\n    function from(Fixed18 a) internal pure returns (Fixed6) {\\n        return Fixed6.wrap(Fixed18.unwrap(a) / 1e12);\\n    }\\n\\n    /**\\n     * @notice Creates a signed fixed-decimal from a base-18 signed fixed-decimal\\n     * @param a Base-18 signed fixed-decimal\\n     * @param roundOut Whether to round the result away from zero if there is a remainder\\n     * @return New signed fixed-decimal\\n     */\\n    function from(Fixed18 a, bool roundOut) internal pure returns (Fixed6) {\\n        return roundOut ? Fixed6.wrap(NumberMath.divOut(Fixed18.unwrap(a), 1e12)): from(a);\\n    }\\n\\n    /**\\n     * @notice Returns whether the signed fixed-decimal is equal to zero.\\n     * @param a Signed fixed-decimal\\n     * @return Whether the signed fixed-decimal is zero.\\n     */\\n    function isZero(Fixed6 a) internal pure returns (bool) {\\n        return Fixed6.unwrap(a) == 0;\\n    }\\n\\n    /**\\n     * @notice Adds two signed fixed-decimals `a` and `b` together\\n     * @param a First signed fixed-decimal\\n     * @param b Second signed fixed-decimal\\n     * @return Resulting summed signed fixed-decimal\\n     */\\n    function add(Fixed6 a, Fixed6 b) internal pure returns (Fixed6) {\\n        return Fixed6.wrap(Fixed6.unwrap(a) + Fixed6.unwrap(b));\\n    }\\n\\n    /**\\n     * @notice Subtracts signed fixed-decimal `b` from `a`\\n     * @param a Signed fixed-decimal to subtract from\\n     * @param b Signed fixed-decimal to subtract\\n     * @return Resulting subtracted signed fixed-decimal\\n     */\\n    function sub(Fixed6 a, Fixed6 b) internal pure returns (Fixed6) {\\n        return Fixed6.wrap(Fixed6.unwrap(a) - Fixed6.unwrap(b));\\n    }\\n\\n    /**\\n     * @notice Multiplies two signed fixed-decimals `a` and `b` together\\n     * @param a First signed fixed-decimal\\n     * @param b Second signed fixed-decimal\\n     * @return Resulting multiplied signed fixed-decimal\\n     */\\n    function mul(Fixed6 a, Fixed6 b) internal pure returns (Fixed6) {\\n        return Fixed6.wrap(Fixed6.unwrap(a) * Fixed6.unwrap(b) / BASE);\\n    }\\n\\n    /**\\n     * @notice Multiplies two signed fixed-decimals `a` and `b` together, rounding the result away from zero if there is a remainder\\n     * @param a First signed fixed-decimal\\n     * @param b Second signed fixed-decimal\\n     * @return Resulting multiplied signed fixed-decimal\\n     */\\n    function mulOut(Fixed6 a, Fixed6 b) internal pure returns (Fixed6) {\\n        return Fixed6.wrap(NumberMath.divOut(Fixed6.unwrap(a) * Fixed6.unwrap(b), BASE));\\n    }\\n\\n    /**\\n     * @notice Divides signed fixed-decimal `a` by `b`\\n     * @param a Signed fixed-decimal to divide\\n     * @param b Signed fixed-decimal to divide by\\n     * @return Resulting divided signed fixed-decimal\\n     */\\n    function div(Fixed6 a, Fixed6 b) internal pure returns (Fixed6) {\\n        return Fixed6.wrap(Fixed6.unwrap(a) * BASE / Fixed6.unwrap(b));\\n    }\\n\\n    /**\\n     * @notice Divides signed fixed-decimal `a` by `b`, rounding the result away from zero if there is a remainder\\n     * @param a Signed fixed-decimal to divide\\n     * @param b Signed fixed-decimal to divide by\\n     * @return Resulting divided signed fixed-decimal\\n     */\\n    function divOut(Fixed6 a, Fixed6 b) internal pure returns (Fixed6) {\\n        return Fixed6Lib.from(sign(a) * sign(b), a.abs().divOut(b.abs()));\\n    }\\n\\n    /**\\n     * @notice Divides unsigned fixed-decimal `a` by `b`\\n     * @dev Does not revert on divide-by-0, instead returns `ONE` for `0/0`, `MAX` for `n/0`, and `MIN` for `-n/0`.\\n     * @param a Unsigned fixed-decimal to divide\\n     * @param b Unsigned fixed-decimal to divide by\\n     * @return Resulting divided unsigned fixed-decimal\\n     */\\n    function unsafeDiv(Fixed6 a, Fixed6 b) internal pure returns (Fixed6) {\\n        if (isZero(b)) {\\n            if (gt(a, ZERO)) return MAX;\\n            if (lt(a, ZERO)) return MIN;\\n            return ONE;\\n        } else {\\n            return div(a, b);\\n        }\\n    }\\n\\n    /**\\n     * @notice Divides unsigned fixed-decimal `a` by `b`, rounding the result away from zero if there is a remainder\\n     * @dev Does not revert on divide-by-0, instead returns `ONE` for `0/0`, `MAX` for `n/0`, and `MIN` for `-n/0`.\\n     * @param a Unsigned fixed-decimal to divide\\n     * @param b Unsigned fixed-decimal to divide by\\n     * @return Resulting divided unsigned fixed-decimal\\n     */\\n    function unsafeDivOut(Fixed6 a, Fixed6 b) internal pure returns (Fixed6) {\\n        if (isZero(b)) {\\n            if (gt(a, ZERO)) return MAX;\\n            if (lt(a, ZERO)) return MIN;\\n            return ONE;\\n        } else {\\n            return divOut(a, b);\\n        }\\n    }\\n\\n    /**\\n     * @notice Computes a * b / c without loss of precision due to BASE conversion\\n     * @param a First signed fixed-decimal\\n     * @param b Signed number to multiply by\\n     * @param c Signed number to divide by\\n     * @return Resulting computation\\n     */\\n    function muldiv(Fixed6 a, int256 b, int256 c) internal pure returns (Fixed6) {\\n        return muldiv(a, Fixed6.wrap(b), Fixed6.wrap(c));\\n    }\\n\\n    /**\\n     * @notice Computes a * b / c without loss of precision due to BASE conversion, rounding the result up to the next integer if there is a remainder\\n     * @param a First signed fixed-decimal\\n     * @param b Signed number to multiply by\\n     * @param c Signed number to divide by\\n     * @return Resulting computation\\n     */\\n    function muldivOut(Fixed6 a, int256 b, int256 c) internal pure returns (Fixed6) {\\n        return muldivOut(a, Fixed6.wrap(b), Fixed6.wrap(c));\\n    }\\n\\n    /**\\n     * @notice Computes a * b / c without loss of precision due to BASE conversion\\n     * @param a First signed fixed-decimal\\n     * @param b Signed fixed-decimal to multiply by\\n     * @param c Signed fixed-decimal to divide by\\n     * @return Resulting computation\\n     */\\n    function muldiv(Fixed6 a, Fixed6 b, Fixed6 c) internal pure returns (Fixed6) {\\n        return Fixed6.wrap(Fixed6.unwrap(a) * Fixed6.unwrap(b) / Fixed6.unwrap(c));\\n    }\\n\\n    /**\\n     * @notice Computes a * b / c without loss of precision due to BASE conversion, rounding the result up to the next integer if there is a remainder\\n     * @param a First signed fixed-decimal\\n     * @param b Signed fixed-decimal to multiply by\\n     * @param c Signed fixed-decimal to divide by\\n     * @return Resulting computation\\n     */\\n    function muldivOut(Fixed6 a, Fixed6 b, Fixed6 c) internal pure returns (Fixed6) {\\n        return Fixed6.wrap(NumberMath.divOut(Fixed6.unwrap(a) * Fixed6.unwrap(b), Fixed6.unwrap(c)));\\n    }\\n\\n    /**\\n     * @notice Returns whether signed fixed-decimal `a` is equal to `b`\\n     * @param a First signed fixed-decimal\\n     * @param b Second signed fixed-decimal\\n     * @return Whether `a` is equal to `b`\\n     */\\n    function eq(Fixed6 a, Fixed6 b) internal pure returns (bool) {\\n        return compare(a, b) == 1;\\n    }\\n\\n    /**\\n     * @notice Returns whether signed fixed-decimal `a` is greater than `b`\\n     * @param a First signed fixed-decimal\\n     * @param b Second signed fixed-decimal\\n     * @return Whether `a` is greater than `b`\\n     */\\n    function gt(Fixed6 a, Fixed6 b) internal pure returns (bool) {\\n        return compare(a, b) == 2;\\n    }\\n\\n    /**\\n     * @notice Returns whether signed fixed-decimal `a` is less than `b`\\n     * @param a First signed fixed-decimal\\n     * @param b Second signed fixed-decimal\\n     * @return Whether `a` is less than `b`\\n     */\\n    function lt(Fixed6 a, Fixed6 b) internal pure returns (bool) {\\n        return compare(a, b) == 0;\\n    }\\n\\n    /**\\n     * @notice Returns whether signed fixed-decimal `a` is greater than or equal to `b`\\n     * @param a First signed fixed-decimal\\n     * @param b Second signed fixed-decimal\\n     * @return Whether `a` is greater than or equal to `b`\\n     */\\n    function gte(Fixed6 a, Fixed6 b) internal pure returns (bool) {\\n        return gt(a, b) || eq(a, b);\\n    }\\n\\n    /**\\n     * @notice Returns whether signed fixed-decimal `a` is less than or equal to `b`\\n     * @param a First signed fixed-decimal\\n     * @param b Second signed fixed-decimal\\n     * @return Whether `a` is less than or equal to `b`\\n     */\\n    function lte(Fixed6 a, Fixed6 b) internal pure returns (bool) {\\n        return lt(a, b) || eq(a, b);\\n    }\\n\\n    /**\\n     * @notice Compares the signed fixed-decimals `a` and `b`\\n     * @dev Returns: 2 for greater than\\n     *               1 for equal to\\n     *               0 for less than\\n     * @param a First signed fixed-decimal\\n     * @param b Second signed fixed-decimal\\n     * @return Compare result of `a` and `b`\\n     */\\n    function compare(Fixed6 a, Fixed6 b) internal pure returns (uint256) {\\n        (int256 au, int256 bu) = (Fixed6.unwrap(a), Fixed6.unwrap(b));\\n        if (au > bu) return 2;\\n        if (au < bu) return 0;\\n        return 1;\\n    }\\n\\n    /**\\n     * @notice Returns a signed fixed-decimal representing the ratio of `a` over `b`\\n     * @param a First signed number\\n     * @param b Second signed number\\n     * @return Ratio of `a` over `b`\\n     */\\n    function ratio(int256 a, int256 b) internal pure returns (Fixed6) {\\n        return Fixed6.wrap(a * BASE / b);\\n    }\\n\\n    /**\\n     * @notice Returns the minimum of signed fixed-decimals `a` and `b`\\n     * @param a First signed fixed-decimal\\n     * @param b Second signed fixed-decimal\\n     * @return Minimum of `a` and `b`\\n     */\\n    function min(Fixed6 a, Fixed6 b) internal pure returns (Fixed6) {\\n        return Fixed6.wrap(SignedMath.min(Fixed6.unwrap(a), Fixed6.unwrap(b)));\\n    }\\n\\n    /**\\n     * @notice Returns the maximum of signed fixed-decimals `a` and `b`\\n     * @param a First signed fixed-decimal\\n     * @param b Second signed fixed-decimal\\n     * @return Maximum of `a` and `b`\\n     */\\n    function max(Fixed6 a, Fixed6 b) internal pure returns (Fixed6) {\\n        return Fixed6.wrap(SignedMath.max(Fixed6.unwrap(a), Fixed6.unwrap(b)));\\n    }\\n\\n    /**\\n     * @notice Converts the signed fixed-decimal into an integer, truncating any decimal portion\\n     * @param a Signed fixed-decimal\\n     * @return Truncated signed number\\n     */\\n    function truncate(Fixed6 a) internal pure returns (int256) {\\n        return Fixed6.unwrap(a) / BASE;\\n    }\\n\\n    /**\\n     * @notice Returns the sign of the signed fixed-decimal\\n     * @dev Returns: -1 for negative\\n     *                0 for zero\\n     *                1 for positive\\n     * @param a Signed fixed-decimal\\n     * @return Sign of the signed fixed-decimal\\n     */\\n    function sign(Fixed6 a) internal pure returns (int256) {\\n        if (Fixed6.unwrap(a) > 0) return 1;\\n        if (Fixed6.unwrap(a) < 0) return -1;\\n        return 0;\\n    }\\n\\n    /**\\n     * @notice Returns the absolute value of the signed fixed-decimal\\n     * @param a Signed fixed-decimal\\n     * @return Absolute value of the signed fixed-decimal\\n     */\\n    function abs(Fixed6 a) internal pure returns (UFixed6) {\\n        return UFixed6.wrap(SignedMath.abs(Fixed6.unwrap(a)));\\n    }\\n}\\n\\nlibrary Fixed6StorageLib {\\n    function read(Fixed6Storage self) internal view returns (Fixed6 value) {\\n        assembly (\\\"memory-safe\\\") {\\n            value := sload(self)\\n        }\\n    }\\n\\n    function store(Fixed6Storage self, Fixed6 value) internal {\\n        assembly (\\\"memory-safe\\\") {\\n            sstore(self, value)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xba2715da2fdf9393cc5e3ce7f9a38f7bfd3b271dcbf9a7fac5245f7c3ecc4522\",\"license\":\"Apache-2.0\"},\"@equilibria/root/number/types/UFixed18.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport \\\"../NumberMath.sol\\\";\\nimport \\\"./Fixed18.sol\\\";\\nimport \\\"./UFixed6.sol\\\";\\n\\n/// @dev UFixed18 type\\ntype UFixed18 is uint256;\\nusing UFixed18Lib for UFixed18 global;\\ntype UFixed18Storage is bytes32;\\nusing UFixed18StorageLib for UFixed18Storage global;\\n\\n/**\\n * @title UFixed18Lib\\n * @notice Library for the unsigned fixed-decimal type.\\n */\\nlibrary UFixed18Lib {\\n    error UFixed18UnderflowError(int256 value);\\n\\n    uint256 private constant BASE = 1e18;\\n    UFixed18 public constant ZERO = UFixed18.wrap(0);\\n    UFixed18 public constant ONE = UFixed18.wrap(BASE);\\n    UFixed18 public constant MAX = UFixed18.wrap(type(uint256).max);\\n\\n    /**\\n     * @notice Creates a unsigned fixed-decimal from a signed fixed-decimal\\n     * @param a Signed fixed-decimal\\n     * @return New unsigned fixed-decimal\\n     */\\n    function from(Fixed18 a) internal pure returns (UFixed18) {\\n        int256 value = Fixed18.unwrap(a);\\n        if (value < 0) revert UFixed18UnderflowError(value);\\n        return UFixed18.wrap(uint256(value));\\n    }\\n\\n    /**\\n     * @notice Creates a unsigned fixed-decimal from a signed fixed-decimal\\n     * @dev Does not revert on underflow, instead returns `ZERO`\\n     * @param a Signed fixed-decimal\\n     * @return New unsigned fixed-decimal\\n     */\\n    function unsafeFrom(Fixed18 a) internal pure returns (UFixed18) {\\n        return a.lt(Fixed18Lib.ZERO) ? ZERO : from(a);\\n    }\\n\\n    /**\\n     * @notice Creates a unsigned fixed-decimal from a unsigned integer\\n     * @param a Unsigned number\\n     * @return New unsigned fixed-decimal\\n     */\\n    function from(uint256 a) internal pure returns (UFixed18) {\\n        return UFixed18.wrap(a * BASE);\\n    }\\n\\n    /**\\n     * @notice Creates a signed fixed-decimal from a base-6 signed fixed-decimal\\n     * @param a Base-6 signed fixed-decimal\\n     * @return New signed fixed-decimal\\n     */\\n    function from(UFixed6 a) internal pure returns (UFixed18) {\\n        return UFixed18.wrap(UFixed6.unwrap(a) * 1e12);\\n    }\\n\\n    /**\\n     * @notice Returns whether the unsigned fixed-decimal is equal to zero.\\n     * @param a Unsigned fixed-decimal\\n     * @return Whether the unsigned fixed-decimal is zero.\\n     */\\n    function isZero(UFixed18 a) internal pure returns (bool) {\\n        return UFixed18.unwrap(a) == 0;\\n    }\\n\\n    /**\\n     * @notice Adds two unsigned fixed-decimals `a` and `b` together\\n     * @param a First unsigned fixed-decimal\\n     * @param b Second unsigned fixed-decimal\\n     * @return Resulting summed unsigned fixed-decimal\\n     */\\n    function add(UFixed18 a, UFixed18 b) internal pure returns (UFixed18) {\\n        return UFixed18.wrap(UFixed18.unwrap(a) + UFixed18.unwrap(b));\\n    }\\n\\n    /**\\n     * @notice Subtracts unsigned fixed-decimal `b` from `a`\\n     * @param a Unsigned fixed-decimal to subtract from\\n     * @param b Unsigned fixed-decimal to subtract\\n     * @return Resulting subtracted unsigned fixed-decimal\\n     */\\n    function sub(UFixed18 a, UFixed18 b) internal pure returns (UFixed18) {\\n        return UFixed18.wrap(UFixed18.unwrap(a) - UFixed18.unwrap(b));\\n    }\\n\\n    /**\\n     * @notice Subtracts unsigned fixed-decimal `a` by `b`\\n     * @dev Does not revert on underflow, instead returns `ZERO`\\n     * @param a Unsigned fixed-decimal to subtract from\\n     * @param b Unsigned fixed-decimal to subtract\\n     * @return Resulting subtracted unsigned fixed-decimal\\n     */\\n    function unsafeSub(UFixed18 a, UFixed18 b) internal pure returns (UFixed18) {\\n        return gt(b, a) ? ZERO : sub(a, b);\\n    }\\n\\n    /**\\n     * @notice Multiplies two unsigned fixed-decimals `a` and `b` together\\n     * @param a First unsigned fixed-decimal\\n     * @param b Second unsigned fixed-decimal\\n     * @return Resulting multiplied unsigned fixed-decimal\\n     */\\n    function mul(UFixed18 a, UFixed18 b) internal pure returns (UFixed18) {\\n        return UFixed18.wrap(UFixed18.unwrap(a) * UFixed18.unwrap(b) / BASE);\\n    }\\n\\n    /**\\n     * @notice Multiplies two unsigned fixed-decimals `a` and `b` together, rounding the result up to the next integer if there is a remainder\\n     * @param a First unsigned fixed-decimal\\n     * @param b Second unsigned fixed-decimal\\n     * @return Resulting multiplied unsigned fixed-decimal\\n     */\\n    function mulOut(UFixed18 a, UFixed18 b) internal pure returns (UFixed18) {\\n        return UFixed18.wrap(NumberMath.divOut(UFixed18.unwrap(a) * UFixed18.unwrap(b), BASE));\\n    }\\n\\n    /**\\n     * @notice Divides unsigned fixed-decimal `a` by `b`\\n     * @param a Unsigned fixed-decimal to divide\\n     * @param b Unsigned fixed-decimal to divide by\\n     * @return Resulting divided unsigned fixed-decimal\\n     */\\n    function div(UFixed18 a, UFixed18 b) internal pure returns (UFixed18) {\\n        return UFixed18.wrap(UFixed18.unwrap(a) * BASE / UFixed18.unwrap(b));\\n    }\\n\\n    /**\\n     * @notice Divides unsigned fixed-decimal `a` by `b`, rounding the result up to the next integer if there is a remainder\\n     * @param a Unsigned fixed-decimal to divide\\n     * @param b Unsigned fixed-decimal to divide by\\n     * @return Resulting divided unsigned fixed-decimal\\n     */\\n    function divOut(UFixed18 a, UFixed18 b) internal pure returns (UFixed18) {\\n        return UFixed18.wrap(NumberMath.divOut(UFixed18.unwrap(a) * BASE, UFixed18.unwrap(b)));\\n    }\\n\\n    /**\\n     * @notice Divides unsigned fixed-decimal `a` by `b`\\n     * @dev Does not revert on divide-by-0, instead returns `ONE` for `0/0` and `MAX` for `n/0`.\\n     * @param a Unsigned fixed-decimal to divide\\n     * @param b Unsigned fixed-decimal to divide by\\n     * @return Resulting divided unsigned fixed-decimal\\n     */\\n    function unsafeDiv(UFixed18 a, UFixed18 b) internal pure returns (UFixed18) {\\n        if (isZero(b)) {\\n            return isZero(a) ? ONE : MAX;\\n        } else {\\n            return div(a, b);\\n        }\\n    }\\n\\n    /**\\n     * @notice Divides unsigned fixed-decimal `a` by `b`, rounding the result up to the next integer if there is a remainder\\n     * @dev Does not revert on divide-by-0, instead returns `ONE` for `0/0` and `MAX` for `n/0`.\\n     * @param a Unsigned fixed-decimal to divide\\n     * @param b Unsigned fixed-decimal to divide by\\n     * @return Resulting divided unsigned fixed-decimal\\n     */\\n    function unsafeDivOut(UFixed18 a, UFixed18 b) internal pure returns (UFixed18) {\\n        if (isZero(b)) {\\n            return isZero(a) ? ONE : MAX;\\n        } else {\\n            return divOut(a, b);\\n        }\\n    }\\n\\n    /**\\n     * @notice Computes a * b / c without loss of precision due to BASE conversion\\n     * @param a First unsigned fixed-decimal\\n     * @param b Unsigned number to multiply by\\n     * @param c Unsigned number to divide by\\n     * @return Resulting computation\\n     */\\n    function muldiv(UFixed18 a, uint256 b, uint256 c) internal pure returns (UFixed18) {\\n        return muldiv(a, UFixed18.wrap(b), UFixed18.wrap(c));\\n    }\\n\\n    /**\\n     * @notice Computes a * b / c without loss of precision due to BASE conversion, rounding the result up to the next integer if there is a remainder\\n     * @param a First unsigned fixed-decimal\\n     * @param b Unsigned number to multiply by\\n     * @param c Unsigned number to divide by\\n     * @return Resulting computation\\n     */\\n    function muldivOut(UFixed18 a, uint256 b, uint256 c) internal pure returns (UFixed18) {\\n        return muldivOut(a, UFixed18.wrap(b), UFixed18.wrap(c));\\n    }\\n\\n\\n    /**\\n     * @notice Computes a * b / c without loss of precision due to BASE conversion\\n     * @param a First unsigned fixed-decimal\\n     * @param b Unsigned fixed-decimal to multiply by\\n     * @param c Unsigned fixed-decimal to divide by\\n     * @return Resulting computation\\n     */\\n    function muldiv(UFixed18 a, UFixed18 b, UFixed18 c) internal pure returns (UFixed18) {\\n        return UFixed18.wrap(UFixed18.unwrap(a) * UFixed18.unwrap(b) / UFixed18.unwrap(c));\\n    }\\n\\n    /**\\n     * @notice Computes a * b / c without loss of precision due to BASE conversion, rounding the result up to the next integer if there is a remainder\\n     * @param a First unsigned fixed-decimal\\n     * @param b Unsigned fixed-decimal to multiply by\\n     * @param c Unsigned fixed-decimal to divide by\\n     * @return Resulting computation\\n     */\\n    function muldivOut(UFixed18 a, UFixed18 b, UFixed18 c) internal pure returns (UFixed18) {\\n        return UFixed18.wrap(NumberMath.divOut(UFixed18.unwrap(a) * UFixed18.unwrap(b), UFixed18.unwrap(c)));\\n    }\\n\\n    /**\\n     * @notice Returns whether unsigned fixed-decimal `a` is equal to `b`\\n     * @param a First unsigned fixed-decimal\\n     * @param b Second unsigned fixed-decimal\\n     * @return Whether `a` is equal to `b`\\n     */\\n    function eq(UFixed18 a, UFixed18 b) internal pure returns (bool) {\\n        return compare(a, b) == 1;\\n    }\\n\\n    /**\\n     * @notice Returns whether unsigned fixed-decimal `a` is greater than `b`\\n     * @param a First unsigned fixed-decimal\\n     * @param b Second unsigned fixed-decimal\\n     * @return Whether `a` is greater than `b`\\n     */\\n    function gt(UFixed18 a, UFixed18 b) internal pure returns (bool) {\\n        return compare(a, b) == 2;\\n    }\\n\\n    /**\\n     * @notice Returns whether unsigned fixed-decimal `a` is less than `b`\\n     * @param a First unsigned fixed-decimal\\n     * @param b Second unsigned fixed-decimal\\n     * @return Whether `a` is less than `b`\\n     */\\n    function lt(UFixed18 a, UFixed18 b) internal pure returns (bool) {\\n        return compare(a, b) == 0;\\n    }\\n\\n    /**\\n     * @notice Returns whether unsigned fixed-decimal `a` is greater than or equal to `b`\\n     * @param a First unsigned fixed-decimal\\n     * @param b Second unsigned fixed-decimal\\n     * @return Whether `a` is greater than or equal to `b`\\n     */\\n    function gte(UFixed18 a, UFixed18 b) internal pure returns (bool) {\\n        return gt(a, b) || eq(a, b);\\n    }\\n\\n    /**\\n     * @notice Returns whether unsigned fixed-decimal `a` is less than or equal to `b`\\n     * @param a First unsigned fixed-decimal\\n     * @param b Second unsigned fixed-decimal\\n     * @return Whether `a` is less than or equal to `b`\\n     */\\n    function lte(UFixed18 a, UFixed18 b) internal pure returns (bool) {\\n        return lt(a, b) || eq(a, b);\\n    }\\n\\n    /**\\n     * @notice Compares the unsigned fixed-decimals `a` and `b`\\n     * @dev Returns: 2 for greater than\\n     *               1 for equal to\\n     *               0 for less than\\n     * @param a First unsigned fixed-decimal\\n     * @param b Second unsigned fixed-decimal\\n     * @return Compare result of `a` and `b`\\n     */\\n    function compare(UFixed18 a, UFixed18 b) internal pure returns (uint256) {\\n        (uint256 au, uint256 bu) = (UFixed18.unwrap(a), UFixed18.unwrap(b));\\n        if (au > bu) return 2;\\n        if (au < bu) return 0;\\n        return 1;\\n    }\\n\\n    /**\\n     * @notice Returns a unsigned fixed-decimal representing the ratio of `a` over `b`\\n     * @param a First unsigned number\\n     * @param b Second unsigned number\\n     * @return Ratio of `a` over `b`\\n     */\\n    function ratio(uint256 a, uint256 b) internal pure returns (UFixed18) {\\n        return UFixed18.wrap(a * BASE / b);\\n    }\\n\\n    /**\\n     * @notice Returns the minimum of unsigned fixed-decimals `a` and `b`\\n     * @param a First unsigned fixed-decimal\\n     * @param b Second unsigned fixed-decimal\\n     * @return Minimum of `a` and `b`\\n     */\\n    function min(UFixed18 a, UFixed18 b) internal pure returns (UFixed18) {\\n        return UFixed18.wrap(Math.min(UFixed18.unwrap(a), UFixed18.unwrap(b)));\\n    }\\n\\n    /**\\n     * @notice Returns the maximum of unsigned fixed-decimals `a` and `b`\\n     * @param a First unsigned fixed-decimal\\n     * @param b Second unsigned fixed-decimal\\n     * @return Maximum of `a` and `b`\\n     */\\n    function max(UFixed18 a, UFixed18 b) internal pure returns (UFixed18) {\\n        return UFixed18.wrap(Math.max(UFixed18.unwrap(a), UFixed18.unwrap(b)));\\n    }\\n\\n    /**\\n     * @notice Converts the unsigned fixed-decimal into an integer, truncating any decimal portion\\n     * @param a Unsigned fixed-decimal\\n     * @return Truncated unsigned number\\n     */\\n    function truncate(UFixed18 a) internal pure returns (uint256) {\\n        return UFixed18.unwrap(a) / BASE;\\n    }\\n}\\n\\nlibrary UFixed18StorageLib {\\n    function read(UFixed18Storage self) internal view returns (UFixed18 value) {\\n        assembly (\\\"memory-safe\\\") {\\n            value := sload(self)\\n        }\\n    }\\n\\n    function store(UFixed18Storage self, UFixed18 value) internal {\\n        assembly (\\\"memory-safe\\\") {\\n            sstore(self, value)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x42ce82e3622fdea0b8044a68a25f6df5102b3a25e1d26a2aaec1f928815c1d56\",\"license\":\"Apache-2.0\"},\"@equilibria/root/number/types/UFixed6.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport \\\"../NumberMath.sol\\\";\\nimport \\\"./Fixed6.sol\\\";\\nimport \\\"./UFixed18.sol\\\";\\n\\n/// @dev UFixed6 type\\ntype UFixed6 is uint256;\\nusing UFixed6Lib for UFixed6 global;\\ntype UFixed6Storage is bytes32;\\nusing UFixed6StorageLib for UFixed6Storage global;\\n\\n/**\\n * @title UFixed6Lib\\n * @notice Library for the unsigned fixed-decimal type.\\n */\\nlibrary UFixed6Lib {\\n    error UFixed6UnderflowError(int256 value);\\n\\n    uint256 private constant BASE = 1e6;\\n    UFixed6 public constant ZERO = UFixed6.wrap(0);\\n    UFixed6 public constant ONE = UFixed6.wrap(BASE);\\n    UFixed6 public constant MAX = UFixed6.wrap(type(uint256).max);\\n\\n    /**\\n     * @notice Creates a unsigned fixed-decimal from a signed fixed-decimal\\n     * @param a Signed fixed-decimal\\n     * @return New unsigned fixed-decimal\\n     */\\n    function from(Fixed6 a) internal pure returns (UFixed6) {\\n        int256 value = Fixed6.unwrap(a);\\n        if (value < 0) revert UFixed6UnderflowError(value);\\n        return UFixed6.wrap(uint256(value));\\n    }\\n\\n    /**\\n     * @notice Creates a unsigned fixed-decimal from a signed fixed-decimal\\n     * @dev Does not revert on underflow, instead returns `ZERO`\\n     * @param a Signed fixed-decimal\\n     * @return New unsigned fixed-decimal\\n     */\\n    function unsafeFrom(Fixed6 a) internal pure returns (UFixed6) {\\n        return a.lt(Fixed6Lib.ZERO) ? ZERO : from(a);\\n    }\\n\\n    /**\\n     * @notice Creates a unsigned fixed-decimal from a unsigned integer\\n     * @param a Unsigned number\\n     * @return New unsigned fixed-decimal\\n     */\\n    function from(uint256 a) internal pure returns (UFixed6) {\\n        return UFixed6.wrap(a * BASE);\\n    }\\n\\n    /**\\n     * @notice Creates an unsigned fixed-decimal from a base-18 unsigned fixed-decimal\\n     * @param a Base-18 unsigned fixed-decimal\\n     * @return New unsigned fixed-decimal\\n     */\\n    function from(UFixed18 a) internal pure returns (UFixed6) {\\n        return UFixed6.wrap(UFixed18.unwrap(a) / 1e12);\\n    }\\n\\n    /**\\n     * @notice Creates an unsigned fixed-decimal from a base-18 unsigned fixed-decimal\\n     * @param a Base-18 unsigned fixed-decimal\\n     * @param roundOut Whether to round the result away from zero if there is a remainder\\n     * @return New unsigned fixed-decimal\\n     */\\n    function from(UFixed18 a, bool roundOut) internal pure returns (UFixed6) {\\n        return roundOut ? UFixed6.wrap(NumberMath.divOut(UFixed18.unwrap(a), 1e12)): from(a);\\n    }\\n\\n    /**\\n     * @notice Returns whether the unsigned fixed-decimal is equal to zero.\\n     * @param a Unsigned fixed-decimal\\n     * @return Whether the unsigned fixed-decimal is zero.\\n     */\\n    function isZero(UFixed6 a) internal pure returns (bool) {\\n        return UFixed6.unwrap(a) == 0;\\n    }\\n\\n    /**\\n     * @notice Adds two unsigned fixed-decimals `a` and `b` together\\n     * @param a First unsigned fixed-decimal\\n     * @param b Second unsigned fixed-decimal\\n     * @return Resulting summed unsigned fixed-decimal\\n     */\\n    function add(UFixed6 a, UFixed6 b) internal pure returns (UFixed6) {\\n        return UFixed6.wrap(UFixed6.unwrap(a) + UFixed6.unwrap(b));\\n    }\\n\\n    /**\\n     * @notice Subtracts unsigned fixed-decimal `b` from `a`\\n     * @param a Unsigned fixed-decimal to subtract from\\n     * @param b Unsigned fixed-decimal to subtract\\n     * @return Resulting subtracted unsigned fixed-decimal\\n     */\\n    function sub(UFixed6 a, UFixed6 b) internal pure returns (UFixed6) {\\n        return UFixed6.wrap(UFixed6.unwrap(a) - UFixed6.unwrap(b));\\n    }\\n\\n    /**\\n     * @notice Subtracts unsigned fixed-decimal `a` by `b`\\n     * @dev Does not revert on underflow, instead returns `ZERO`\\n     * @param a Unsigned fixed-decimal to subtract from\\n     * @param b Unsigned fixed-decimal to subtract\\n     * @return Resulting subtracted unsigned fixed-decimal\\n     */\\n    function unsafeSub(UFixed6 a, UFixed6 b) internal pure returns (UFixed6) {\\n        return gt(b, a) ? ZERO : sub(a, b);\\n    }\\n\\n    /**\\n     * @notice Multiplies two unsigned fixed-decimals `a` and `b` together\\n     * @param a First unsigned fixed-decimal\\n     * @param b Second unsigned fixed-decimal\\n     * @return Resulting multiplied unsigned fixed-decimal\\n     */\\n    function mul(UFixed6 a, UFixed6 b) internal pure returns (UFixed6) {\\n        return UFixed6.wrap(UFixed6.unwrap(a) * UFixed6.unwrap(b) / BASE);\\n    }\\n\\n    /**\\n     * @notice Multiplies two unsigned fixed-decimals `a` and `b` together, rounding the result up to the next integer if there is a remainder\\n     * @param a First unsigned fixed-decimal\\n     * @param b Second unsigned fixed-decimal\\n     * @return Resulting multiplied unsigned fixed-decimal\\n     */\\n    function mulOut(UFixed6 a, UFixed6 b) internal pure returns (UFixed6) {\\n        return UFixed6.wrap(NumberMath.divOut(UFixed6.unwrap(a) * UFixed6.unwrap(b), BASE));\\n    }\\n\\n    /**\\n     * @notice Divides unsigned fixed-decimal `a` by `b`\\n     * @param a Unsigned fixed-decimal to divide\\n     * @param b Unsigned fixed-decimal to divide by\\n     * @return Resulting divided unsigned fixed-decimal\\n     */\\n    function div(UFixed6 a, UFixed6 b) internal pure returns (UFixed6) {\\n        return UFixed6.wrap(UFixed6.unwrap(a) * BASE / UFixed6.unwrap(b));\\n    }\\n\\n    /**\\n     * @notice Divides unsigned fixed-decimal `a` by `b`, rounding the result up to the next integer if there is a remainder\\n     * @param a Unsigned fixed-decimal to divide\\n     * @param b Unsigned fixed-decimal to divide by\\n     * @return Resulting divided unsigned fixed-decimal\\n     */\\n    function divOut(UFixed6 a, UFixed6 b) internal pure returns (UFixed6) {\\n        return UFixed6.wrap(NumberMath.divOut(UFixed6.unwrap(a) * BASE, UFixed6.unwrap(b)));\\n    }\\n\\n    /**\\n     * @notice Divides unsigned fixed-decimal `a` by `b`\\n     * @dev Does not revert on divide-by-0, instead returns `ONE` for `0/0` and `MAX` for `n/0`.\\n     * @param a Unsigned fixed-decimal to divide\\n     * @param b Unsigned fixed-decimal to divide by\\n     * @return Resulting divided unsigned fixed-decimal\\n     */\\n    function unsafeDiv(UFixed6 a, UFixed6 b) internal pure returns (UFixed6) {\\n        if (isZero(b)) {\\n            return isZero(a) ? ONE : MAX;\\n        } else {\\n            return div(a, b);\\n        }\\n    }\\n\\n    /**\\n     * @notice Divides unsigned fixed-decimal `a` by `b`, rounding the result up to the next integer if there is a remainder\\n     * @dev Does not revert on divide-by-0, instead returns `ONE` for `0/0` and `MAX` for `n/0`.\\n     * @param a Unsigned fixed-decimal to divide\\n     * @param b Unsigned fixed-decimal to divide by\\n     * @return Resulting divided unsigned fixed-decimal\\n     */\\n    function unsafeDivOut(UFixed6 a, UFixed6 b) internal pure returns (UFixed6) {\\n        if (isZero(b)) {\\n            return isZero(a) ? ONE : MAX;\\n        } else {\\n            return divOut(a, b);\\n        }\\n    }\\n\\n    /**\\n     * @notice Computes a * b / c without loss of precision due to BASE conversion\\n     * @param a First unsigned fixed-decimal\\n     * @param b Unsigned number to multiply by\\n     * @param c Unsigned number to divide by\\n     * @return Resulting computation\\n     */\\n    function muldiv(UFixed6 a, uint256 b, uint256 c) internal pure returns (UFixed6) {\\n        return muldiv(a, UFixed6.wrap(b), UFixed6.wrap(c));\\n    }\\n\\n    /**\\n     * @notice Computes a * b / c without loss of precision due to BASE conversion, rounding the result up to the next integer if there is a remainder\\n     * @param a First unsigned fixed-decimal\\n     * @param b Unsigned number to multiply by\\n     * @param c Unsigned number to divide by\\n     * @return Resulting computation\\n     */\\n    function muldivOut(UFixed6 a, uint256 b, uint256 c) internal pure returns (UFixed6) {\\n        return muldivOut(a, UFixed6.wrap(b), UFixed6.wrap(c));\\n    }\\n\\n\\n    /**\\n     * @notice Computes a * b / c without loss of precision due to BASE conversion\\n     * @param a First unsigned fixed-decimal\\n     * @param b Unsigned fixed-decimal to multiply by\\n     * @param c Unsigned fixed-decimal to divide by\\n     * @return Resulting computation\\n     */\\n    function muldiv(UFixed6 a, UFixed6 b, UFixed6 c) internal pure returns (UFixed6) {\\n        return UFixed6.wrap(UFixed6.unwrap(a) * UFixed6.unwrap(b) / UFixed6.unwrap(c));\\n    }\\n\\n    /**\\n     * @notice Computes a * b / c without loss of precision due to BASE conversion, rounding the result up to the next integer if there is a remainder\\n     * @param a First unsigned fixed-decimal\\n     * @param b Unsigned fixed-decimal to multiply by\\n     * @param c Unsigned fixed-decimal to divide by\\n     * @return Resulting computation\\n     */\\n    function muldivOut(UFixed6 a, UFixed6 b, UFixed6 c) internal pure returns (UFixed6) {\\n        return UFixed6.wrap(NumberMath.divOut(UFixed6.unwrap(a) * UFixed6.unwrap(b), UFixed6.unwrap(c)));\\n    }\\n\\n    /**\\n     * @notice Returns whether unsigned fixed-decimal `a` is equal to `b`\\n     * @param a First unsigned fixed-decimal\\n     * @param b Second unsigned fixed-decimal\\n     * @return Whether `a` is equal to `b`\\n     */\\n    function eq(UFixed6 a, UFixed6 b) internal pure returns (bool) {\\n        return compare(a, b) == 1;\\n    }\\n\\n    /**\\n     * @notice Returns whether unsigned fixed-decimal `a` is greater than `b`\\n     * @param a First unsigned fixed-decimal\\n     * @param b Second unsigned fixed-decimal\\n     * @return Whether `a` is greater than `b`\\n     */\\n    function gt(UFixed6 a, UFixed6 b) internal pure returns (bool) {\\n        return compare(a, b) == 2;\\n    }\\n\\n    /**\\n     * @notice Returns whether unsigned fixed-decimal `a` is less than `b`\\n     * @param a First unsigned fixed-decimal\\n     * @param b Second unsigned fixed-decimal\\n     * @return Whether `a` is less than `b`\\n     */\\n    function lt(UFixed6 a, UFixed6 b) internal pure returns (bool) {\\n        return compare(a, b) == 0;\\n    }\\n\\n    /**\\n     * @notice Returns whether unsigned fixed-decimal `a` is greater than or equal to `b`\\n     * @param a First unsigned fixed-decimal\\n     * @param b Second unsigned fixed-decimal\\n     * @return Whether `a` is greater than or equal to `b`\\n     */\\n    function gte(UFixed6 a, UFixed6 b) internal pure returns (bool) {\\n        return gt(a, b) || eq(a, b);\\n    }\\n\\n    /**\\n     * @notice Returns whether unsigned fixed-decimal `a` is less than or equal to `b`\\n     * @param a First unsigned fixed-decimal\\n     * @param b Second unsigned fixed-decimal\\n     * @return Whether `a` is less than or equal to `b`\\n     */\\n    function lte(UFixed6 a, UFixed6 b) internal pure returns (bool) {\\n        return lt(a, b) || eq(a, b);\\n    }\\n\\n    /**\\n     * @notice Compares the unsigned fixed-decimals `a` and `b`\\n     * @dev Returns: 2 for greater than\\n     *               1 for equal to\\n     *               0 for less than\\n     * @param a First unsigned fixed-decimal\\n     * @param b Second unsigned fixed-decimal\\n     * @return Compare result of `a` and `b`\\n     */\\n    function compare(UFixed6 a, UFixed6 b) internal pure returns (uint256) {\\n        (uint256 au, uint256 bu) = (UFixed6.unwrap(a), UFixed6.unwrap(b));\\n        if (au > bu) return 2;\\n        if (au < bu) return 0;\\n        return 1;\\n    }\\n\\n    /**\\n     * @notice Returns a unsigned fixed-decimal representing the ratio of `a` over `b`\\n     * @param a First unsigned number\\n     * @param b Second unsigned number\\n     * @return Ratio of `a` over `b`\\n     */\\n    function ratio(uint256 a, uint256 b) internal pure returns (UFixed6) {\\n        return UFixed6.wrap(a * BASE / b);\\n    }\\n\\n    /**\\n     * @notice Returns the minimum of unsigned fixed-decimals `a` and `b`\\n     * @param a First unsigned fixed-decimal\\n     * @param b Second unsigned fixed-decimal\\n     * @return Minimum of `a` and `b`\\n     */\\n    function min(UFixed6 a, UFixed6 b) internal pure returns (UFixed6) {\\n        return UFixed6.wrap(Math.min(UFixed6.unwrap(a), UFixed6.unwrap(b)));\\n    }\\n\\n    /**\\n     * @notice Returns the maximum of unsigned fixed-decimals `a` and `b`\\n     * @param a First unsigned fixed-decimal\\n     * @param b Second unsigned fixed-decimal\\n     * @return Maximum of `a` and `b`\\n     */\\n    function max(UFixed6 a, UFixed6 b) internal pure returns (UFixed6) {\\n        return UFixed6.wrap(Math.max(UFixed6.unwrap(a), UFixed6.unwrap(b)));\\n    }\\n\\n    /**\\n     * @notice Converts the unsigned fixed-decimal into an integer, truncating any decimal portion\\n     * @param a Unsigned fixed-decimal\\n     * @return Truncated unsigned number\\n     */\\n    function truncate(UFixed6 a) internal pure returns (uint256) {\\n        return UFixed6.unwrap(a) / BASE;\\n    }\\n}\\n\\nlibrary UFixed6StorageLib {\\n    function read(UFixed6Storage self) internal view returns (UFixed6 value) {\\n        assembly (\\\"memory-safe\\\") {\\n            value := sload(self)\\n        }\\n    }\\n\\n    function store(UFixed6Storage self, UFixed6 value) internal {\\n        assembly (\\\"memory-safe\\\") {\\n            sstore(self, value)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x378f6c0e6a0e8b534c019d99ddaecada9816e4c8ae66deba59bee92ac13ddc7f\",\"license\":\"Apache-2.0\"},\"@equilibria/root/pid/types/PAccumulator6.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.13;\\n\\nimport \\\"../../number/types/Fixed6.sol\\\";\\nimport \\\"./PController6.sol\\\";\\n\\n/// @dev PAccumulator6 type\\nstruct PAccumulator6 {\\n    Fixed6 _value;\\n    Fixed6 _skew;\\n}\\nusing PAccumulator6Lib for PAccumulator6 global;\\n\\n/// @title PAccumulator6Lib\\n/// @notice Accumulator for a the fixed 6-decimal PID controller. This holds the \\\"last seen state\\\" of the PID controller\\n///         and works in conjunction with the PController6 to compute the current rate.\\n/// @dev This implementation is specifically a P controller, with I_k and D_k both set to 0. In between updates, it\\n///      continues to accumulate at a linear rate based on the previous skew, but the rate is capped at the max value.\\n///      Once the rate hits the max value, it will continue to accumulate at the max value until the next update.\\nlibrary PAccumulator6Lib {\\n    /// @notice Accumulates the rate against notional given the prior and current state\\n    /// @param self The controller accumulator\\n    /// @param controller The controller configuration\\n    /// @param skew The current skew\\n    /// @param fromTimestamp The timestamp of the prior accumulation\\n    /// @param toTimestamp The current timestamp\\n    /// @param notional The notional to accumulate against\\n    /// @return accumulated The total accumulated amount\\n    function accumulate(\\n        PAccumulator6 memory self,\\n        PController6 memory controller,\\n        Fixed6 skew,\\n        uint256 fromTimestamp,\\n        uint256 toTimestamp,\\n        UFixed6 notional\\n    ) internal pure returns (Fixed6 accumulated) {\\n        // compute new value and intercept\\n        (Fixed6 newValue, UFixed6 interceptTimestamp) =\\n            controller.compute(self._value, self._skew, fromTimestamp, toTimestamp);\\n\\n        // accumulate rate within max\\n        accumulated = _accumulate(\\n            self._value.add(newValue),\\n            UFixed6Lib.from(fromTimestamp),\\n            interceptTimestamp,\\n            notional\\n        ).div(Fixed6Lib.from(2)); // rate = self._value + newValue / 2 -> divide here for added precision\\n\\n        // accumulate rate outside of max\\n        accumulated = _accumulate(\\n            newValue,\\n            interceptTimestamp,\\n            UFixed6Lib.from(toTimestamp),\\n            notional\\n        ).add(accumulated);\\n\\n        // update values\\n        self._value = newValue;\\n        self._skew = skew;\\n    }\\n\\n    /// @notice Helper function to accumulate a singular rate against notional\\n    /// @param rate The rate to accumulate\\n    /// @param fromTimestamp The timestamp to accumulate from\\n    /// @param toTimestamp The timestamp to accumulate to\\n    /// @param notional The notional to accumulate against\\n    /// @return The accumulated amount\\n    function _accumulate(\\n        Fixed6 rate,\\n        UFixed6 fromTimestamp,\\n        UFixed6 toTimestamp,\\n        UFixed6 notional\\n    ) private pure returns (Fixed6) {\\n        return rate\\n            .mul(Fixed6Lib.from(toTimestamp.sub(fromTimestamp)))\\n            .mul(Fixed6Lib.from(notional))\\n            .div(Fixed6Lib.from(365 days));\\n    }\\n}\\n\",\"keccak256\":\"0xf374a9997426cc90141334cdc8f8d3d62758be7eaefd21c5885742cc18d79a3a\",\"license\":\"Apache-2.0\"},\"@equilibria/root/pid/types/PController6.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.13;\\n\\nimport \\\"../../number/types/Fixed6.sol\\\";\\n\\n/// @dev PController6 type\\nstruct PController6 {\\n    UFixed6 k;\\n    Fixed6 min;\\n    Fixed6 max;\\n}\\nusing PController6Lib for PController6 global;\\n\\n/// @title PController6Lib\\n/// @notice Configuration for a the fixed 6-decimal PID controller.\\n/// @dev Each second, the PID controller's value is incremented by `skew / k`, with `max` as the maximum value.\\nlibrary PController6Lib {\\n    /// @notice compute the new value and intercept timestamp based on the prior controller state\\n    /// @dev `interceptTimestamp` will never exceed `toTimestamp`\\n    /// @param self the controller configuration\\n    /// @param value the prior value\\n    /// @param skew The prior skew\\n    /// @param fromTimestamp The prior timestamp\\n    /// @param toTimestamp The current timestamp\\n    /// @return newValue the new value\\n    /// @return interceptTimestamp the timestamp at which the value will be at the max\\n    function compute(\\n        PController6 memory self,\\n        Fixed6 value,\\n        Fixed6 skew,\\n        uint256 fromTimestamp,\\n        uint256 toTimestamp\\n    ) internal pure returns (Fixed6 newValue, UFixed6 interceptTimestamp) {\\n        // compute the new value without considering the max\\n        Fixed6 newValueUncapped = value.add(\\n            Fixed6Lib.from(int256(toTimestamp - fromTimestamp))\\n                .mul(skew)\\n                .div(Fixed6Lib.from(self.k))\\n        );\\n\\n        // cap the new value between min and max\\n        newValue = newValueUncapped.min(self.max).max(self.min);\\n\\n        // compute distance and range to the resultant value\\n        (UFixed6 distance, Fixed6 range) = (UFixed6Lib.from(toTimestamp - fromTimestamp), newValueUncapped.sub(value));\\n\\n        // compute the amount of buffer until the value is outside the max\\n        UFixed6 buffer = value.gt(self.max) || value.lt(self.min) ?\\n            UFixed6Lib.ZERO :\\n            (range.sign() > 0 ? self.max : self.min).sub(value).abs();\\n\\n        // compute the timestamp at which the value will be at the max\\n        interceptTimestamp = range.isZero() ?\\n            UFixed6Lib.from(toTimestamp) :\\n            UFixed6Lib.from(fromTimestamp).add(distance.muldiv(buffer, range.abs())).min(UFixed6Lib.from(toTimestamp));\\n    }\\n}\\n\",\"keccak256\":\"0xd1248bd4e011e66105f6da85d63e767f2ca4a26365a177ee9322d5a4007aed0c\",\"license\":\"Apache-2.0\"},\"@equilibria/root/storage/Storage.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.13;\\n\\nimport \\\"../number/types/UFixed18.sol\\\";\\n\\n/// @dev Stored boolean slot\\ntype BoolStorage is bytes32;\\nusing BoolStorageLib for BoolStorage global;\\n\\n/// @dev Stored uint256 slot\\ntype Uint256Storage is bytes32;\\nusing Uint256StorageLib for Uint256Storage global;\\n\\n/// @dev Stored int256 slot\\ntype Int256Storage is bytes32;\\nusing Int256StorageLib for Int256Storage global;\\n\\n/// @dev Stored address slot\\ntype AddressStorage is bytes32;\\nusing AddressStorageLib for AddressStorage global;\\n\\n/// @dev Stored bytes32 slot\\ntype Bytes32Storage is bytes32;\\nusing Bytes32StorageLib for Bytes32Storage global;\\n\\n/**\\n * @title BoolStorageLib\\n * @notice Library to manage storage and retrieval of a boolean at a fixed storage slot\\n */\\nlibrary BoolStorageLib {\\n    /**\\n     * @notice Retrieves the stored value\\n     * @param self Storage slot\\n     * @return value Stored bool value\\n     */\\n    function read(BoolStorage self) internal view returns (bool value) {\\n        assembly (\\\"memory-safe\\\") {\\n            value := sload(self)\\n        }\\n    }\\n\\n    /**\\n     * @notice Stores the value at the specific slot\\n     * @param self Storage slot\\n     * @param value boolean value to store\\n     */\\n    function store(BoolStorage self, bool value) internal {\\n        assembly (\\\"memory-safe\\\") {\\n            sstore(self, value)\\n        }\\n    }\\n}\\n\\n/**\\n * @title Uint256StorageLib\\n * @notice Library to manage storage and retrieval of an uint256 at a fixed storage slot\\n */\\nlibrary Uint256StorageLib {\\n    /**\\n     * @notice Retrieves the stored value\\n     * @param self Storage slot\\n     * @return value Stored uint256 value\\n     */\\n    function read(Uint256Storage self) internal view returns (uint256 value) {\\n        assembly (\\\"memory-safe\\\") {\\n            value := sload(self)\\n        }\\n    }\\n\\n    /**\\n     * @notice Stores the value at the specific slot\\n     * @param self Storage slot\\n     * @param value uint256 value to store\\n     */\\n    function store(Uint256Storage self, uint256 value) internal {\\n        assembly (\\\"memory-safe\\\") {\\n            sstore(self, value)\\n        }\\n    }\\n}\\n\\n/**\\n * @title Int256StorageLib\\n * @notice Library to manage storage and retrieval of an int256 at a fixed storage slot\\n */\\nlibrary Int256StorageLib {\\n    /**\\n     * @notice Retrieves the stored value\\n     * @param self Storage slot\\n     * @return value Stored int256 value\\n     */\\n    function read(Int256Storage self) internal view returns (int256 value) {\\n        assembly (\\\"memory-safe\\\") {\\n            value := sload(self)\\n        }\\n    }\\n\\n    /**\\n     * @notice Stores the value at the specific slot\\n     * @param self Storage slot\\n     * @param value int256 value to store\\n     */\\n    function store(Int256Storage self, int256 value) internal {\\n        assembly (\\\"memory-safe\\\") {\\n            sstore(self, value)\\n        }\\n    }\\n}\\n\\n/**\\n * @title AddressStorageLib\\n * @notice Library to manage storage and retrieval of an address at a fixed storage slot\\n */\\nlibrary AddressStorageLib {\\n    /**\\n     * @notice Retrieves the stored value\\n     * @param self Storage slot\\n     * @return value Stored address value\\n     */\\n    function read(AddressStorage self) internal view returns (address value) {\\n        assembly (\\\"memory-safe\\\") {\\n            value := sload(self)\\n        }\\n    }\\n\\n    /**\\n     * @notice Stores the value at the specific slot\\n     * @param self Storage slot\\n     * @param value address value to store\\n     */\\n    function store(AddressStorage self, address value) internal {\\n        assembly (\\\"memory-safe\\\") {\\n            sstore(self, value)\\n        }\\n    }\\n}\\n\\n/**\\n * @title Bytes32StorageLib\\n * @notice Library to manage storage and retrieval of a bytes32 at a fixed storage slot\\n */\\nlibrary Bytes32StorageLib {\\n    /**\\n     * @notice Retrieves the stored value\\n     * @param self Storage slot\\n     * @return value Stored bytes32 value\\n     */\\n    function read(Bytes32Storage self) internal view returns (bytes32 value) {\\n        assembly (\\\"memory-safe\\\") {\\n            value := sload(self)\\n        }\\n    }\\n\\n    /**\\n     * @notice Stores the value at the specific slot\\n     * @param self Storage slot\\n     * @param value bytes32 value to store\\n     */\\n    function store(Bytes32Storage self, bytes32 value) internal {\\n        assembly (\\\"memory-safe\\\") {\\n            sstore(self, value)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf904e2f3ded161530d179eca7f405de56db377f4770e236589940b943ef0dee9\",\"license\":\"Apache-2.0\"},\"@equilibria/root/token/types/Token18.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"../../number/types/UFixed18.sol\\\";\\n\\n/// @dev Token18\\ntype Token18 is address;\\nusing Token18Lib for Token18 global;\\ntype Token18Storage is bytes32;\\nusing Token18StorageLib for Token18Storage global;\\n\\n/**\\n * @title Token18Lib\\n * @notice Library to manage 18-decimal ERC20s that is compliant with the fixed-decimal types.\\n * @dev Maintains significant gas savings over other Token implementations since no conversion take place\\n */\\nlibrary Token18Lib {\\n    using SafeERC20 for IERC20;\\n\\n    Token18 public constant ZERO = Token18.wrap(address(0));\\n\\n    /**\\n     * @notice Returns whether a token is the zero address\\n     * @param self Token to check for\\n     * @return Whether the token is the zero address\\n     */\\n    function isZero(Token18 self) internal pure returns (bool) {\\n        return Token18.unwrap(self) == Token18.unwrap(ZERO);\\n    }\\n\\n    /**\\n     * @notice Returns whether the two tokens are equal\\n     * @param a First token to compare\\n     * @param b Second token to compare\\n     * @return Whether the two tokens are equal\\n     */\\n    function eq(Token18 a, Token18 b) internal pure returns (bool) {\\n        return Token18.unwrap(a) ==  Token18.unwrap(b);\\n    }\\n\\n    /**\\n     * @notice Approves `grantee` to spend infinite tokens from the caller\\n     * @dev Uses `approve` rather than `safeApprove` since the race condition\\n     *      in safeApprove does not apply when going to an infinite approval\\n     * @param self Token to grant approval\\n     * @param grantee Address to allow spending\\n     */\\n    function approve(Token18 self, address grantee) internal {\\n        IERC20(Token18.unwrap(self)).approve(grantee, type(uint256).max);\\n    }\\n\\n    /**\\n     * @notice Approves `grantee` to spend `amount` tokens from the caller\\n     * @dev There are important race conditions to be aware of when using this function\\n            with values other than 0. This will revert if moving from non-zero to non-zero amounts\\n            See https://github.com/OpenZeppelin/openzeppelin-contracts/blob/a55b7d13722e7ce850b626da2313f3e66ca1d101/contracts/token/ERC20/IERC20.sol#L57\\n     * @param self Token to grant approval\\n     * @param grantee Address to allow spending\\n     * @param amount Amount of tokens to approve to spend\\n     */\\n    function approve(Token18 self, address grantee, UFixed18 amount) internal {\\n        IERC20(Token18.unwrap(self)).safeApprove(grantee, UFixed18.unwrap(amount));\\n    }\\n\\n    /**\\n     * @notice Transfers all held tokens from the caller to the `recipient`\\n     * @param self Token to transfer\\n     * @param recipient Address to receive the tokens\\n     */\\n    function push(Token18 self, address recipient) internal {\\n        push(self, recipient, balanceOf(self, address(this)));\\n    }\\n\\n    /**\\n     * @notice Transfers `amount` tokens from the caller to the `recipient`\\n     * @param self Token to transfer\\n     * @param recipient Address to transfer tokens to\\n     * @param amount Amount of tokens to transfer\\n     */\\n    function push(Token18 self, address recipient, UFixed18 amount) internal {\\n        IERC20(Token18.unwrap(self)).safeTransfer(recipient, UFixed18.unwrap(amount));\\n    }\\n\\n    /**\\n     * @notice Transfers `amount` tokens from the `benefactor` to the caller\\n     * @dev Reverts if trying to pull Ether\\n     * @param self Token to transfer\\n     * @param benefactor Address to transfer tokens from\\n     * @param amount Amount of tokens to transfer\\n     */\\n    function pull(Token18 self, address benefactor, UFixed18 amount) internal {\\n        IERC20(Token18.unwrap(self)).safeTransferFrom(benefactor, address(this), UFixed18.unwrap(amount));\\n    }\\n\\n    /**\\n     * @notice Transfers `amount` tokens from the `benefactor` to `recipient`\\n     * @dev Reverts if trying to pull Ether\\n     * @param self Token to transfer\\n     * @param benefactor Address to transfer tokens from\\n     * @param recipient Address to transfer tokens to\\n     * @param amount Amount of tokens to transfer\\n     */\\n    function pullTo(Token18 self, address benefactor, address recipient, UFixed18 amount) internal {\\n        IERC20(Token18.unwrap(self)).safeTransferFrom(benefactor, recipient, UFixed18.unwrap(amount));\\n    }\\n\\n    /**\\n     * @notice Returns the name of the token\\n     * @param self Token to check for\\n     * @return Token name\\n     */\\n    function name(Token18 self) internal view returns (string memory) {\\n        return IERC20Metadata(Token18.unwrap(self)).name();\\n    }\\n\\n    /**\\n     * @notice Returns the symbol of the token\\n     * @param self Token to check for\\n     * @return Token symbol\\n     */\\n    function symbol(Token18 self) internal view returns (string memory) {\\n        return IERC20Metadata(Token18.unwrap(self)).symbol();\\n    }\\n\\n    /**\\n     * @notice Returns the `self` token balance of the caller\\n     * @param self Token to check for\\n     * @return Token balance of the caller\\n     */\\n    function balanceOf(Token18 self) internal view returns (UFixed18) {\\n        return balanceOf(self, address(this));\\n    }\\n\\n    /**\\n     * @notice Returns the `self` token balance of `account`\\n     * @param self Token to check for\\n     * @param account Account to check\\n     * @return Token balance of the account\\n     */\\n    function balanceOf(Token18 self, address account) internal view returns (UFixed18) {\\n        return UFixed18.wrap(IERC20(Token18.unwrap(self)).balanceOf(account));\\n    }\\n\\n    /**\\n     * @notice Returns the `self` total supply\\n     * @param self Token to check for\\n     * @return The total supply of the token\\n     */\\n    function totalSupply(Token18 self) internal view returns (UFixed18) {\\n        return UFixed18.wrap(IERC20(Token18.unwrap(self)).totalSupply());\\n    }\\n}\\n\\nlibrary Token18StorageLib {\\n    function read(Token18Storage self) internal view returns (Token18 value) {\\n        assembly (\\\"memory-safe\\\") {\\n            value := sload(self)\\n        }\\n    }\\n\\n    function store(Token18Storage self, Token18 value) internal {\\n        assembly (\\\"memory-safe\\\") {\\n            sstore(self, value)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf8598d9147d6bbf219d30a8bc3ea0a272170761e2a5368cd09df28e9c478c637\",\"license\":\"Apache-2.0\"},\"@equilibria/root/token/types/Token6.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport \\\"../../number/types/UFixed6.sol\\\";\\n\\n/// @dev Token6\\ntype Token6 is address;\\nusing Token6Lib for Token6 global;\\ntype Token6Storage is bytes32;\\nusing Token6StorageLib for Token6Storage global;\\n\\n/**\\n * @title Token6Lib\\n * @notice Library to manage 6-decimal ERC20s that is compliant with the fixed-decimal types.\\n */\\nlibrary Token6Lib {\\n    using SafeERC20 for IERC20;\\n\\n    Token6 public constant ZERO = Token6.wrap(address(0));\\n\\n    /**\\n     * @notice Returns whether a token is the zero address\\n     * @param self Token to check for\\n     * @return Whether the token is the zero address\\n     */\\n    function isZero(Token6 self) internal pure returns (bool) {\\n        return Token6.unwrap(self) == Token6.unwrap(ZERO);\\n    }\\n\\n    /**\\n     * @notice Returns whether the two tokens are equal\\n     * @param a First token to compare\\n     * @param b Second token to compare\\n     * @return Whether the two tokens are equal\\n     */\\n    function eq(Token6 a, Token6 b) internal pure returns (bool) {\\n        return Token6.unwrap(a) ==  Token6.unwrap(b);\\n    }\\n\\n    /**\\n     * @notice Approves `grantee` to spend infinite tokens from the caller\\n     * @dev Uses `approve` rather than `safeApprove` since the race condition\\n     *      in safeApprove does not apply when going to an infinite approval\\n     * @param self Token to grant approval\\n     * @param self Token to grant approval\\n     * @param grantee Address to allow spending\\n     */\\n    function approve(Token6 self, address grantee) internal {\\n        IERC20(Token6.unwrap(self)).approve(grantee, type(uint256).max);\\n    }\\n\\n    /**\\n     * @notice Approves `grantee` to spend `amount` tokens from the caller\\n     * @dev There are important race conditions to be aware of when using this function\\n            with values other than 0. This will revert if moving from non-zero to non-zero amounts\\n            See https://github.com/OpenZeppelin/openzeppelin-contracts/blob/a55b7d13722e7ce850b626da2313f3e66ca1d101/contracts/token/ERC20/IERC20.sol#L57\\n     * @param self Token to grant approval\\n     * @param self Token to grant approval\\n     * @param grantee Address to allow spending\\n     * @param amount Amount of tokens to approve to spend\\n     */\\n    function approve(Token6 self, address grantee, UFixed6 amount) internal {\\n        IERC20(Token6.unwrap(self)).safeApprove(grantee, UFixed6.unwrap(amount));\\n    }\\n\\n    /**\\n     * @notice Transfers all held tokens from the caller to the `recipient`\\n     * @param self Token to transfer\\n     * @param recipient Address to receive the tokens\\n     */\\n    function push(Token6 self, address recipient) internal {\\n        push(self, recipient, balanceOf(self, address(this)));\\n    }\\n\\n    /**\\n     * @notice Transfers `amount` tokens from the caller to the `recipient`\\n     * @param self Token to transfer\\n     * @param recipient Address to transfer tokens to\\n     * @param amount Amount of tokens to transfer\\n     */\\n    function push(Token6 self, address recipient, UFixed6 amount) internal {\\n        IERC20(Token6.unwrap(self)).safeTransfer(recipient, UFixed6.unwrap(amount));\\n    }\\n\\n    /**\\n     * @notice Transfers `amount` tokens from the `benefactor` to the caller\\n     * @dev Reverts if trying to pull Ether\\n     * @param self Token to transfer\\n     * @param benefactor Address to transfer tokens from\\n     * @param amount Amount of tokens to transfer\\n     */\\n    function pull(Token6 self, address benefactor, UFixed6 amount) internal {\\n        IERC20(Token6.unwrap(self)).safeTransferFrom(benefactor, address(this), UFixed6.unwrap(amount));\\n    }\\n\\n    /**\\n     * @notice Transfers `amount` tokens from the `benefactor` to `recipient`\\n     * @dev Reverts if trying to pull Ether\\n     * @param self Token to transfer\\n     * @param benefactor Address to transfer tokens from\\n     * @param recipient Address to transfer tokens to\\n     * @param amount Amount of tokens to transfer\\n     */\\n    function pullTo(Token6 self, address benefactor, address recipient, UFixed6 amount) internal {\\n        IERC20(Token6.unwrap(self)).safeTransferFrom(benefactor, recipient, UFixed6.unwrap(amount));\\n    }\\n\\n    /**\\n     * @notice Returns the name of the token\\n     * @param self Token to check for\\n     * @return Token name\\n     */\\n    function name(Token6 self) internal view returns (string memory) {\\n        return IERC20Metadata(Token6.unwrap(self)).name();\\n    }\\n\\n    /**\\n     * @notice Returns the symbol of the token\\n     * @param self Token to check for\\n     * @return Token symbol\\n     */\\n    function symbol(Token6 self) internal view returns (string memory) {\\n        return IERC20Metadata(Token6.unwrap(self)).symbol();\\n    }\\n\\n    /**\\n     * @notice Returns the `self` token balance of the caller\\n     * @param self Token to check for\\n     * @return Token balance of the caller\\n     */\\n    function balanceOf(Token6 self) internal view returns (UFixed6) {\\n        return balanceOf(self, address(this));\\n    }\\n\\n    /**\\n     * @notice Returns the `self` token balance of `account`\\n     * @param self Token to check for\\n     * @param account Account to check\\n     * @return Token balance of the account\\n     */\\n    function balanceOf(Token6 self, address account) internal view returns (UFixed6) {\\n        return UFixed6.wrap(IERC20(Token6.unwrap(self)).balanceOf(account));\\n    }\\n\\n    /**\\n     * @notice Returns the `self` total supply\\n     * @param self Token to check for\\n     * @return The total supply of the token\\n     */\\n    function totalSupply(Token6 self) internal view returns (UFixed6) {\\n        return UFixed6.wrap(IERC20(Token6.unwrap(self)).totalSupply());\\n    }\\n}\\n\\nlibrary Token6StorageLib {\\n    function read(Token6Storage self) internal view returns (Token6 value) {\\n        assembly (\\\"memory-safe\\\") {\\n            value := sload(self)\\n        }\\n    }\\n\\n    function store(Token6Storage self, Token6 value) internal {\\n        assembly (\\\"memory-safe\\\") {\\n            sstore(self, value)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x630056608dea38c12df30e36a9db4ed8b572c543c3c59df31ce57c120ff04479\",\"license\":\"Apache-2.0\"},\"@equilibria/root/utilization/CurveMath6.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.13;\\n\\nimport \\\"../number/types/UFixed6.sol\\\";\\nimport \\\"../number/types/Fixed6.sol\\\";\\n\\n/**\\n * @title CurveMath6\\n * @notice Library for managing math operations for utilization curves.\\n */\\nlibrary CurveMath6 {\\n    error CurveMath6OutOfBoundsError();\\n\\n    /**\\n     * @notice Computes a linear interpolation between two points\\n     * @param startX First point's x-coordinate\\n     * @param startY First point's y-coordinate\\n     * @param endX Second point's x-coordinate\\n     * @param endY Second point's y-coordinate\\n     * @param targetX x-coordinate to interpolate\\n     * @return y-coordinate for `targetX` along the line from (`startX`, `startY`) -> (`endX`, `endY`)\\n     */\\n    function linearInterpolation(\\n        UFixed6 startX,\\n        Fixed6 startY,\\n        UFixed6 endX,\\n        Fixed6 endY,\\n        UFixed6 targetX\\n    ) internal pure returns (Fixed6) {\\n        if (targetX.lt(startX) || targetX.gt(endX)) revert CurveMath6OutOfBoundsError();\\n\\n        UFixed6 xRange = endX.sub(startX);\\n        Fixed6 yRange = endY.sub(startY);\\n        UFixed6 xRatio = targetX.sub(startX).div(xRange);\\n        return yRange.mul(Fixed6Lib.from(xRatio)).add(startY);\\n    }\\n\\n    /**\\n     * @notice Computes a linear interpolation between two points\\n     * @param startX First point's x-coordinate\\n     * @param startY First point's y-coordinate\\n     * @param endX Second point's x-coordinate\\n     * @param endY Second point's y-coordinate\\n     * @param targetX x-coordinate to interpolate\\n     * @return y-coordinate for `targetX` along the line from (`startX`, `startY`) -> (`endX`, `endY`)\\n     */\\n    function linearInterpolation(\\n        UFixed6 startX,\\n        UFixed6 startY,\\n        UFixed6 endX,\\n        UFixed6 endY,\\n        UFixed6 targetX\\n    ) internal pure returns (UFixed6) {\\n        return UFixed6Lib.from(linearInterpolation(startX, Fixed6Lib.from(startY), endX, Fixed6Lib.from(endY), targetX));\\n    }\\n}\\n\",\"keccak256\":\"0xb2fc0e4473772b0a48f7282ac06bf1e86cea7cf0c788e406692e2d723633d549\",\"license\":\"Apache-2.0\"},\"@equilibria/root/utilization/types/UJumpRateUtilizationCurve6.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.13;\\n\\nimport \\\"../CurveMath6.sol\\\";\\nimport \\\"../../number/types/UFixed6.sol\\\";\\n\\n/// @dev UJumpRateUtilizationCurve6 type\\nstruct UJumpRateUtilizationCurve6 {\\n    UFixed6 minRate;\\n    UFixed6 maxRate;\\n    UFixed6 targetRate;\\n    UFixed6 targetUtilization;\\n}\\nusing UJumpRateUtilizationCurve6Lib for UJumpRateUtilizationCurve6 global;\\n\\n/**\\n * @title UJumpRateUtilizationCurve6Lib\\n * @notice Library for the unsigned base-6 Jump Rate utilization curve type\\n */\\nlibrary UJumpRateUtilizationCurve6Lib {\\n    /**\\n     * @notice Computes the corresponding rate for a utilization ratio\\n     * @param utilization The utilization ratio\\n     * @return The corresponding rate\\n     */\\n    function compute(UJumpRateUtilizationCurve6 memory self, UFixed6 utilization) internal pure returns (UFixed6) {\\n        if (utilization.lt(self.targetUtilization)) {\\n            return CurveMath6.linearInterpolation(\\n                UFixed6Lib.ZERO,\\n                self.minRate,\\n                self.targetUtilization,\\n                self.targetRate,\\n                utilization\\n            );\\n        }\\n        if (utilization.lt(UFixed6Lib.ONE)) {\\n            return CurveMath6.linearInterpolation(\\n                self.targetUtilization,\\n                self.targetRate,\\n                UFixed6Lib.ONE,\\n                self.maxRate,\\n                utilization\\n            );\\n        }\\n        return self.maxRate;\\n    }\\n\\n    function accumulate(\\n        UJumpRateUtilizationCurve6 memory self,\\n        UFixed6 utilization,\\n        uint256 fromTimestamp,\\n        uint256 toTimestamp,\\n        UFixed6 notional\\n    ) internal pure returns (UFixed6) {\\n        return compute(self, utilization)\\n            .mul(UFixed6Lib.from(toTimestamp - fromTimestamp))\\n            .mul(notional)\\n            .div(UFixed6Lib.from(365 days));\\n    }\\n}\\n\",\"keccak256\":\"0xfc568a2f1a98e3659a2f4142f916e057fe6bf1ac70feb04ced81072d742c22e7\",\"license\":\"Apache-2.0\"},\"@equilibria/root/verifier/interfaces/IVerifierBase.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.13;\\n\\nimport { Common } from \\\"../types/Common.sol\\\";\\nimport { GroupCancellation } from \\\"../types/GroupCancellation.sol\\\";\\n\\ninterface IVerifierBase {\\n    // sig: 0xfec563a0\\n    /// @custom:error Signer is trying to cancel a nonce for another user\\n    error VerifierInvalidSignerError();\\n    // sig: 0xa568ee00\\n    /// @custom:error Message was meant for another protocol, version, or chain\\n    error VerifierInvalidDomainError();\\n    // sig: 0xb09262f6\\n    /// @custom:error Signature length was unexpected\\n    error VerifierInvalidSignatureError();\\n    // sig: 0xe6784f14\\n    /// @custom:error Nonce has already been used\\n    error VerifierInvalidNonceError();\\n    // sig: 0x79998279\\n    /// @custom:error Group nonce has already been used\\n    error VerifierInvalidGroupError();\\n    // sig: 0x27661908\\n    /// @custom:error Block timestamp has exceeded user-assigned expiration\\n    error VerifierInvalidExpiryError();\\n\\n    /// @notice Emitted when a nonce is cancelled\\n    event NonceCancelled(address indexed account, uint256 nonce);\\n    /// @notice Emitted when a group nonce is cancelled\\n    event GroupCancelled(address indexed account, uint256 group);\\n\\n    /// @notice Returns whether the nonce has been cancelled\\n    /// @param account The account to check the nonce for\\n    /// @param nonce The nonce to check\\n    /// @return True if the nonce has been cancelled\\n    function nonces(address account, uint256 nonce) external view returns (bool);\\n\\n    /// @notice Returns whether the group nonce has been cancelled\\n    /// @param account The account to check the group nonce for\\n    /// @param nonce The group nonce to check\\n    /// @return True if the group nonce has been cancelled\\n    function groups(address account, uint256 nonce) external view returns (bool);\\n\\n    /// @notice Verifies the signature of no-op common message\\n    /// @dev Cancels the nonce after verifying the signature\\n    ///      Reverts if the signature does not match the signer\\n    /// @param common The common data of the message\\n    /// @param signature The signature of the account for the message\\n    function verifyCommon(Common calldata common, bytes calldata signature) external;\\n\\n    /// @notice Verifies the signature of a group cancellation type\\n    /// @dev Cancels the nonce after verifying the signature\\n    ///      Reverts if the signature does not match the signer\\n    /// @param groupCancellation The group cancellation to verify\\n    /// @param signature The signature of the account for the group cancellation\\n    function verifyGroupCancellation(GroupCancellation calldata groupCancellation, bytes calldata signature) external;\\n\\n    /// @notice Cancels a nonce\\n    /// @param nonce The nonce to cancel\\n    function cancelNonce(uint256 nonce) external;\\n\\n    /// @notice Cancels a nonce for an account via a signed message\\n    /// @dev Process a no-op message that will invalidate the specified nonce\\n    /// @param common The common data of the message\\n    /// @param signature The signature of the account for the message\\n    function cancelNonceWithSignature(Common calldata common, bytes calldata signature) external;\\n\\n    /// @notice Cancels a group nonce\\n    /// @param group The group nonce to cancel\\n    function cancelGroup(uint256 group) external;\\n\\n    /// @notice Cancels a group for an account via a signed message\\n    /// @param groupCancellation The group cancellation message\\n    /// @param signature The signature of the account for the group cancellation\\n    function cancelGroupWithSignature(GroupCancellation calldata groupCancellation, bytes calldata signature) external;\\n}\\n\",\"keccak256\":\"0xaf26a1f192b04226b2a95bfd59b72a0278328506ab24838e039017ba7134abc3\",\"license\":\"Apache-2.0\"},\"@equilibria/root/verifier/types/Common.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.13;\\n\\n/// @notice Fields which need to be hashed in any EIP712 action\\nstruct Common {\\n    /// @dev The target account of the message (usually the account on behalf of which the action is being performed)\\n    address account;\\n    /// @dev EOA signing the message (usually either the account or a delegate of the account)\\n    address signer;\\n    /// @dev ensures the message is unique to a particular protocol version, chain, and verifier\\n    address domain;\\n    /// @dev per-sender nonce which is automatically cancelled upon validation\\n    uint256 nonce;\\n    /// @dev per-sender nonce which must be manually cancelled with a GroupCancellation message\\n    uint256 group;\\n    /// @dev prevents this message from having the intended effect after a specified timestamp\\n    uint256 expiry;\\n}\\nusing CommonLib for Common global;\\n\\n/// @title CommonLib\\n/// @notice Library collecting fields which need to be hashed in any EIP712 message\\nlibrary CommonLib {\\n    /// @dev used to verify a signed message\\n    bytes32 constant public STRUCT_HASH =\\n        keccak256(\\\"Common(address account,address signer,address domain,uint256 nonce,uint256 group,uint256 expiry)\\\");\\n\\n    /// @dev used to create a signed message\\n    function hash(Common memory self) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(STRUCT_HASH, self.account, self.signer, self.domain, self.nonce, self.group, self.expiry));\\n    }\\n}\\n\",\"keccak256\":\"0x0f5a75ca2064a624dae4e7f6c6b494dcc8ec560e5775ec8055dd91471f6cb93b\",\"license\":\"Apache-2.0\"},\"@equilibria/root/verifier/types/GroupCancellation.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.13;\\n\\nimport { Common, CommonLib } from \\\"./Common.sol\\\";\\n\\nstruct GroupCancellation {\\n    /// @dev The group to cancel\\n    uint256 group;\\n\\n    /// @dev The common information for EIP712 actions\\n    Common common;\\n}\\nusing GroupCancellationLib for GroupCancellation global;\\n\\n/// @title GroupCancellationLib\\n/// @notice Library used to hash and verify action to cancel a group nonce.\\nlibrary GroupCancellationLib {\\n    bytes32 constant public STRUCT_HASH = keccak256(\\n        \\\"GroupCancellation(uint256 group,Common common)\\\"\\n        \\\"Common(address account,address signer,address domain,uint256 nonce,uint256 group,uint256 expiry)\\\"\\n    );\\n\\n    function hash(GroupCancellation memory self) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(STRUCT_HASH, self.group, CommonLib.hash(self.common)));\\n    }\\n}\\n\",\"keccak256\":\"0x7060c6af6bf8aba391c7b30e3bd164aa529ba6f193a3fd8a45140541f975f398\",\"license\":\"Apache-2.0\"},\"@openzeppelin/contracts/proxy/beacon/IBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0xd50a3421ac379ccb1be435fa646d66a65c986b4924f0849839f08692f39dde61\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9b72f93be69ca894d8492c244259615c4a742afc8d63720dbc8bb81087d9b238\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60e0346200010857601f620036ef38819003918201601f19168301916001600160401b038311848410176200010c5780849260a09460405283398101031262000108576200004d8162000120565b906200005c6020820162000120565b60408201516001600160a01b039390919084831683036200010857606084015193858516809503620001085760800151948516809503620001085760805260a05260c05260018060a01b03199081600454161760045560055416176005556040516135b990816200013682396080518181816110d501526128aa015260a05181818161106601528181611793015261290e015260c05181818161097b01528181611849015261282f0152f35b5f80fd5b634e487b7160e01b5f52604160045260245ffd5b51906001600160a01b0382168203620001085756fe6080806040526004361015610012575f80fd5b5f905f3560e01c90816306ae70951461198a575080631f7a92b21461168f57806323a985fc146114f15780632b7ac3f31461149f57806332878cc91461142e5780636a206137146113e55780636a5a6be41461118757806378fab5c71461114d578063872053a6146110f957806389a302711461108a578063a2060bcf1461101b578063aba30dfa14610fe1578063b20caf4514610f70578063b662d3ab1461099f578063cd3293de14610930578063dd02df16146108c7578063f0773700146108955763fe0e55de146100e4575f80fd5b34610892576100f236611ad4565b6100ff8183859495611d43565b9190911561086857610116608083015185856122fe565b73ffffffffffffffffffffffffffffffffffffffff83163b1561064f57846040517f6a256b2900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8616600482015281816024818373ffffffffffffffffffffffffffffffffffffffff8a165af1801561065357610854575b50506040517f6e19368000000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff851660048201526101808160248173ffffffffffffffffffffffffffffffffffffffff88165afa908115610849578691610747575b50604051907f55f5751000000000000000000000000000000000000000000000000000000000825273ffffffffffffffffffffffffffffffffffffffff8616600483015260808260248173ffffffffffffffffffffffffffffffffffffffff89165afa91821561073c57879261070b575b50805182526102956020830151613268565b6102a26060830151613268565b6102af6080840151613268565b9089821281838103128116908284810313901516176106de578181038282038401128a84129080158216911516176106de57906102ee929103016132c3565b906102fc6040840151613268565b61030960a0830151613268565b61031660c0840151613268565b908a821281838103128116908284810313901516176106b1578181038282038401128b84129080158216911516176106b15790610355929103016132c3565b906103636060850151613268565b9061037f61010061037760e0840151613268565b920151613268565b908a821281838103128116908284810313901516176106b1578181038282038401128b84129080158216911516176106b157916103c2918b9695949303016132c3565b60608401526040830152806020830152600460ff86511614610698575b50600560ff8551161461067b575b600660ff8551161461065e575b6020810151906060604082015191015173ffffffffffffffffffffffffffffffffffffffff60c0870151169173ffffffffffffffffffffffffffffffffffffffff88163b1561064f57604051937f977b1f5f00000000000000000000000000000000000000000000000000000000855273ffffffffffffffffffffffffffffffffffffffff8a1660048601526024850152604484015260648301528260848301528260a483015260c4820152818160e4818373ffffffffffffffffffffffffffffffffffffffff8a165af180156106535761063b575b50506104dd8285856127c6565b90600160a084015273ffffffffffffffffffffffffffffffffffffffff8416865260066020526040862073ffffffffffffffffffffffffffffffffffffffff86165f5260205260405f2081875260205261053a836040882061295f565b604051906105488285611b34565b61016082015273ffffffffffffffffffffffffffffffffffffffff8516907f5111ddcdf8e6b98f5a0d74f1ea4b8f9268d6d0e9c5a54e144459ed0541bc679061018073ffffffffffffffffffffffffffffffffffffffff871692a36105ab578380f35b608073ffffffffffffffffffffffffffffffffffffffff8060e07f53287d6489871e2ad186467efe70bdd15afbbd29f769f1e1c639b4d5a5d654ed9401519461062f6040518097606080918051845273ffffffffffffffffffffffffffffffffffffffff602082015116602085015260408101511515604085015201511515910152565b16941692a35f80808380f35b610644906119f4565b61064f57845f6104d0565b8480fd5b6040513d84823e3d90fd5b6106716060820151606086015190612e0e565b60608201526103fa565b61068e6040820151606086015190612e0e565b60408201526103ed565b60608501516106a691612e0e565b60208201525f6103df565b60248b7f4e487b710000000000000000000000000000000000000000000000000000000081526011600452fd5b60248a7f4e487b710000000000000000000000000000000000000000000000000000000081526011600452fd5b61072e91925060803d608011610735575b6107268183611a42565b81019061278a565b905f610283565b503d61071c565b6040513d89823e3d90fd5b9050610180813d61018011610841575b816107656101809383611a42565b8101031261083d57604051908161018081011067ffffffffffffffff61018084011117610810576101808201604052805182526020810151602083015260408101516040830152606081015160608301526080810151608083015260a081015160a083015260c081015160c083015260e081015160e083015261010080820151908301526101208082015190830152610140808201519083015261016080910151908201525f610212565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b8580fd5b3d9150610757565b6040513d88823e3d90fd5b61085d906119f4565b61064f57845f6101a0565b60046040517f8013a216000000000000000000000000000000000000000000000000000000008152fd5b80fd5b5034610892576101806108b06108aa36611ad4565b91611d43565b6108bd6040518093611b34565b1515610160820152f35b5034610892576109216040610160926108df36611ad4565b916108e8611c62565b5073ffffffffffffffffffffffffffffffffffffffff8091168452600660205284842091165f52602052825f20908252602052206120b2565b61092e6040518092611b34565bf35b503461089257807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261089257602060405173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b5034610892576102a07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610892576102807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610892576102843567ffffffffffffffff8111610f6c57610a1c903690600401611a83565b9073ffffffffffffffffffffffffffffffffffffffff6005541691823b15610f68576040517f1f55630a00000000000000000000000000000000000000000000000000000000815260ff6004351660043503610f225760ff6004351660048201526024355f0b60243503610f22576024355f0b602482015260443560448201526064356064820152608435608482015260a435151560a43503610f225760a435151560a482015273ffffffffffffffffffffffffffffffffffffffff60c4351660c43503610f225773ffffffffffffffffffffffffffffffffffffffff60c4351660c482015260e43560e482015273ffffffffffffffffffffffffffffffffffffffff61010435166101043503610f225773ffffffffffffffffffffffffffffffffffffffff61010435166101048201526101243515156101243503610f22576101243515156101248201526101443515156101443503610f225761014435151561014482015273ffffffffffffffffffffffffffffffffffffffff61016435166101643503610f225773ffffffffffffffffffffffffffffffffffffffff6101643516610164820152610184356101848201526101a4356101a48201526101c49273ffffffffffffffffffffffffffffffffffffffff84351680853503610f2257848301526101e49473ffffffffffffffffffffffffffffffffffffffff86351680873503610f2257868401526102049081359273ffffffffffffffffffffffffffffffffffffffff8416809403610f22578885610c8f8195938399849884968501526102248035908501526102448035908501526102648035908501526102a06102848501526102a4840191611bdd565b03925af1801561065357610f50575b5050610cb5610cc49235610cb0611c3e565b611edc565b6101a4359035610164356122fe565b610ccc611c3e565b73ffffffffffffffffffffffffffffffffffffffff61016435165f52600660205260405f2073ffffffffffffffffffffffffffffffffffffffff82165f5260205260405f20610184355f5260205260a0610d2860405f206120b2565b0151610f265773ffffffffffffffffffffffffffffffffffffffff61016435165f52600660205260405f2073ffffffffffffffffffffffffffffffffffffffff82165f5260205260405f20610184355f5260205260405f206101607ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610f2257604051610db781611a08565b6004358152602435602082015260443560408201526064356060820152608435608082015260a43560a082015260c43560c082015260807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1c360112610f2257610e5091604051610e26816119d8565b60e435815261010435602082015261012435604082015261014435606082015260e083015261295f565b73ffffffffffffffffffffffffffffffffffffffff6040519160ff6004351683526024355f0b602084015260443560408401526064356060840152608435608084015260a435151560a08401528160c4351660c084015260e43560e08401528161010435166101008401526101243515156101208401526101443515156101408401526101843561016084015216907f5754f935e3165da0bd9fec6569d718ced687f59a5d19938799d1be43f3db679661018073ffffffffffffffffffffffffffffffffffffffff610164351692a380f35b5f80fd5b60046040517fd0cfc108000000000000000000000000000000000000000000000000000000008152fd5b610f59906119f4565b610f6457825f610c9e565b8280fd5b8380fd5b5080fd5b503461089257807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261089257602073ffffffffffffffffffffffffffffffffffffffff7f2b50211693ec91bcfe327771928b74a8f475c508d53e86fca4153bcf0f0e87765416604051908152f35b503461089257807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610892576020604051608c8152f35b503461089257807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261089257602060405173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b503461089257807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261089257602060405173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b503461089257807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610892576080905460015460025460035491604051938452602084015260408301526060820152f35b503461089257807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261089257602060405160108152f35b5034610892576101a07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610892576111c0611ab1565b6101607fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffbc360112610f6c5773ffffffffffffffffffffffffffffffffffffffff8082165f52600660205260405f20335f5260205260405f206024355f5260205260a061122e60405f206120b2565b0151610f26578082165f52600660205260405f20335f5260205260405f206024355f5260205260405f206040519061126582611a08565b6044359260ff84168403610f225783835260643592835f0b8403610f2257836020820152608435604082015260a435606082015260c435608082015260e435908115158203610f22578160a0820152610104358381168103610f22578060c083015260807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffedc360112610f2257604051946112fe866119d8565b61012435865261014435918583168303610f225782602088015261016435948515158603610f22578560408901526101843515156101843503610f22577f5754f935e3165da0bd9fec6569d718ced687f59a5d19938799d1be43f3db67969861137b889687956101809b61018435606082015260e083015261295f565b60ff6040519b168b525f0b60208b015260843560408b015260a43560608b015260c43560808b0152151560a08a01521660c08801526101243560e088015216610100860152151561012085015261018435151561014085015260243561016085015233941692a380f35b50346108925760407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126108925761142b611420611ab1565b602435903390611fcc565b80f35b503461089257807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126108925760207f5b5cbfa852c5bd03e540eba853f8faf28a604a4d82bee1091096bfaea14d08c35473ffffffffffffffffffffffffffffffffffffffff60405191168152f35b503461089257807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261089257602073ffffffffffffffffffffffffffffffffffffffff60055416604051908152f35b5034610f225761014090367ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc01828112610f225761012013610f225761012491823567ffffffffffffffff8111610f2257611550903690600401611a83565b73ffffffffffffffffffffffffffffffffffffffff92836005541693843b15610f2257604051907f4ddd9dfc00000000000000000000000000000000000000000000000000000000825260043594818616808703610f22576004840152602435968760248501526044359586604486015260643595848716808803610f225760648701526084359b858d16808e03610f2257608488015260a435958616809603610f225761162e879586945f989486948a9660a487015260c43560c487015260e43560e4870152610104803590870152850152610144840191611bdd565b03925af1801561168457611667575b50906116599161165361142b9697610cb0611c1b565b836122fe565b611661611c1b565b90611fcc565b61142b95509061167a61165993926119f4565b5f9550909161163d565b6040513d5f823e3d90fd5b34610f225760a07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610f225760043573ffffffffffffffffffffffffffffffffffffffff808216809203610f225760807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdc360112610f225760405190611717826119d8565b602435825260209182810190604435825260408101926064358452606082019560843587526001947f6fee9688c285c5c5c97d6a1a29adced674e6b2ad0888b8ad2116b58a8b3ea2488681541015611959578690557f2801b00eb06461cf9fcb9758b5fafd884ff06a86177386f73b6c49f0bf5a5af0978689557f000000000000000000000000000000000000000000000000000000000000000091303b151580611952575b611928575f9689966044957f2b50211693ec91bcfe327771928b74a8f475c508d53e86fca4153bcf0f0e877655847f5b5cbfa852c5bd03e540eba853f8faf28a604a4d82bee1091096bfaea14d08c355518855518855516002555160035560405194859384927f095ea7b3000000000000000000000000000000000000000000000000000000008452817f00000000000000000000000000000000000000000000000000000000000000001660048501527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6024850152165af18015611684576118d0575b505f7fbe9b076dc5b65990cca9dd9d7366682482e7817a6f6bc7f4faf4dc32af497f329355604051908152a1005b8281813d8311611921575b6118e58183611a42565b81010312610f22577fbe9b076dc5b65990cca9dd9d7366682482e7817a6f6bc7f4faf4dc32af497f32936119195f92611ceb565b5093506118a2565b503d6118db565b60046040517fb9a621e1000000000000000000000000000000000000000000000000000000008152fd5b505f6117bd565b602487604051907f3db738da0000000000000000000000000000000000000000000000000000000082526004820152fd5b34610f22575f7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610f225760209073ffffffffffffffffffffffffffffffffffffffff600454168152f35b6080810190811067ffffffffffffffff82111761081057604052565b67ffffffffffffffff811161081057604052565b610100810190811067ffffffffffffffff82111761081057604052565b6101a0810190811067ffffffffffffffff82111761081057604052565b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff82111761081057604052565b9181601f84011215610f225782359167ffffffffffffffff8311610f225760208381860195010111610f2257565b6004359073ffffffffffffffffffffffffffffffffffffffff82168203610f2257565b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc6060910112610f225773ffffffffffffffffffffffffffffffffffffffff906004358281168103610f2257916024359081168103610f22579060443590565b9060e080611bdb9360ff815116845260208101515f0b602085015260408101516040850152606081015160608501526080810151608085015260a0810151151560a085015273ffffffffffffffffffffffffffffffffffffffff60c08201511660c08501520151910190606080918051845273ffffffffffffffffffffffffffffffffffffffff602082015116602085015260408101511515604085015201511515910152565b565b601f82602094937fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe093818652868601375f8582860101520116010190565b60643573ffffffffffffffffffffffffffffffffffffffff81168103610f225790565b6101c43573ffffffffffffffffffffffffffffffffffffffff81168103610f225790565b60405190611c6f82611a08565b815f81525f60208201525f60408201525f60608201525f60808201525f60a08201525f60c082015260e060405191611ca6836119d8565b5f83525f60208401525f60408401525f60608401520152565b90816020910312610f22575173ffffffffffffffffffffffffffffffffffffffff81168103610f225790565b51908115158203610f2257565b90816060910312610f2257604051906060820182811067ffffffffffffffff82111761081057611d3b916040918252805184526020810151602085015201611ceb565b604082015290565b929192611d4e611c62565b5073ffffffffffffffffffffffffffffffffffffffff80911693845f526020906006825260409383855f2091165f528252835f20905f528152611d92835f206120b2565b9460a086015115801590611ecd575b611ea457816004918551928380927f7dc0d1d00000000000000000000000000000000000000000000000000000000082525afa918215611e9a5790606092915f92611e6d575b505060048451809481937f52bfe789000000000000000000000000000000000000000000000000000000008352165afa918215611e64575090611e32915f91611e35575b5083612268565b90565b611e57915060603d606011611e5d575b611e4f8183611a42565b810190611cf8565b5f611e2b565b503d611e45565b513d5f823e3d90fd5b611e8c9250803d10611e93575b611e848183611a42565b810190611cbf565b5f80611de7565b503d611e7a565b84513d5f823e3d90fd5b600484517fd0cfc108000000000000000000000000000000000000000000000000000000008152fd5b50611ed786612226565b611da1565b73ffffffffffffffffffffffffffffffffffffffff80809316911690808214159283611f36575b505050611f0c57565b60046040517f6673613b000000000000000000000000000000000000000000000000000000008152fd5b6020929350604490600454169360405194859384927fbd9ee66b000000000000000000000000000000000000000000000000000000008452600484015260248301525afa908115611684575f91611f92575b50155f8080611f03565b90506020813d602011611fc4575b81611fad60209383611a42565b81010312610f2257611fbe90611ceb565b5f611f88565b3d9150611fa0565b91909173ffffffffffffffffffffffffffffffffffffffff80911691825f5260209160068352604090815f20951694855f528352805f20825f528352612013815f206120b2565b61201c81612226565b80156120a5575b61207c579061207582600160a07fa7e8b7ad64b09d9d45f4ad65f9fd654f99b90f9ce66bb414f72a9f69ba03db329796950152865f5260068552825f20885f528552825f20845f528552825f2061295f565b51908152a3565b600482517f955cc4b9000000000000000000000000000000000000000000000000000000008152fd5b5060a08101511515612023565b6120ba611c62565b50604090600260a060808451936120d085611a25565b80549060ff8216968787528260081c5f0b8060208901526101808460101c60070b9384848b01528560501c60070b958660608c01527fffffffffff00000000000000000000000000000000000000000000000000000067ffffffffffffffff918c838260901c169a8b9101528c60ff8260d01c1615159b8c9101521660c08c01526001820154998a928c6101007fffffffffffffffffffffffff000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff8097169e8f60e085015216910152015491821690816101208d01528260a01c169a8b61014082015260ff808460e01c161515938461016084015260e81c161515938491015284519a6121e48c6119d8565b8b5260208b0152838a015260608901528151986122008a611a08565b895260208901528701526060860152608085015260a084015260c083015260e082015290565b60ff815116159081612259575b8161224c575b81612242575090565b6060915001511590565b6040810151159150612239565b60208101515f0b159150612233565b6040820151156122f85760208101515f0b600181146122d5577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff146122ad5750505f90565b604060206122c093015191015190613437565b80159081156122cd575090565b600191501490565b50604060206122e993015191015190613437565b600281149081156122cd575090565b50505f90565b90916040918251906020948583019273ffffffffffffffffffffffffffffffffffffffff809316845282868201921682526060810194855260608152612343816119d8565b855161234e816119d8565b5f548152600154958882019687526002549588830196875260035492606081019384528951908b820182811067ffffffffffffffff82111761081057805f918d528184525251985198156001171561275d576123bf98670de0b6b3a7640000998a916123ba4891612f7f565b612f9c565b04975193519051608c810180911161275d576004947f0fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8216820361269b578b51917ff5d6ded70000000000000000000000000000000000000000000000000000000083528d838881606c5afa92831561275357908c9392915f9361271d575b50936124618461245a6123ba946123ba61246798998d1b612f7f565b0491612f7f565b90613244565b04976124738989613244565b8460a0897f2b50211693ec91bcfe327771928b74a8f475c508d53e86fca4153bcf0f0e877654168d51928380927ffeaf968c0000000000000000000000000000000000000000000000000000000082525afa908115612713575f916126c7575b508281029080820584149015171561269b576305f5e1009005905f821261266c576060929161250191612f9c565b0494805181010312610f225751938585168503610f225751948516809503610f22575191806125c557505061254e9291612549915f905b808210156125bb5750928391612faf565b613066565b9261257c847f5b5cbfa852c5bd03e540eba853f8faf28a604a4d82bee1091096bfaea14d08c3543390613080565b5f815195818752860152840152606083015260808201527ffa0333956d06e335c550bd5fc4ac9c003c6545e371331b1071fa4d5d8519d6c160a03392a2565b9050928391612faf565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81019081116126405764e8d4a51000900490600182018092116126145750916125499161254e949390612538565b6011907f4e487b71000000000000000000000000000000000000000000000000000000005f525260245ffd5b6011827f4e487b71000000000000000000000000000000000000000000000000000000005f525260245ffd5b602486838e51917f501f289e000000000000000000000000000000000000000000000000000000008352820152fd5b6011867f4e487b71000000000000000000000000000000000000000000000000000000005f525260245ffd5b905060a0813d60a01161270b575b816126e260a09383611a42565b81010312610f225761270460808e6126f984613251565b508301519201613251565b505f6124d3565b3d91506126d5565b8c513d5f823e3d90fd5b935091508d83813d811161274c575b6127368183611a42565b81010312610f225791518b92909161246161243e565b503d61272c565b8d513d5f823e3d90fd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b90816080910312610f22576060604051916127a4836119d8565b8051835260208101516020840152604081015160408401520151606082015290565b9160e08101928351918251156129565781849160406127f795015115155f1461293257505050835151928391612faf565b81516060810151156128e2575061282c60209273ffffffffffffffffffffffffffffffffffffffff9384915101511691613066565b917f00000000000000000000000000000000000000000000000000000000000000001691823b15610f22575f80936024604051809681937fdb006a750000000000000000000000000000000000000000000000000000000083528660048401525af1908115611684576128ce9364e8d4a51000926128d3575b5004907f0000000000000000000000000000000000000000000000000000000000000000613080565b600190565b6128dc906119f4565b5f6128a5565b6128ce925073ffffffffffffffffffffffffffffffffffffffff602061290b9201511691613066565b907f0000000000000000000000000000000000000000000000000000000000000000613080565b620f42409261294d9261294492612e4c565b86515190612f9c565b04928391612faf565b50505050505f90565b91909160ff835116600381119081612e03575b5080612dbf575b15612d955760409081840193600261299186516133de565b14612d6c576129a08551613404565b15612d6c57606081019160026129b684516133de565b14612d43576129c58351613404565b15612d4357608082019560026129db8851613448565b14612d1a5760e083019060026129f2835151613448565b14612cf157859697845160ff16916020860151905196519151968367ffffffffffffffff9860a089015115159373ffffffffffffffffffffffffffffffffffffffff60c0819b01511697519a8b9a60208c0151169d8e918c519e8f9d015115159d6060015115159c8d93835193612a6885611a25565b888552865f0b60208601528960070b908501528a60070b606085015282871660808501528960a085015260c084015f90528c60e085015261010084015f9052610120840152166101408201528c6101608201526101800152885490837fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff008316178a5560081b9161ff00928084169586867fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000861617178c5560101b9369ffffffffffffffff000098858a168098887fffffffffffffffffffffffffffffffffffffffffffff0000000000000000000088161717178d5560501b91169371ffffffffffffffff00000000000000000000928284168098887fffffffffffffffffffffffffffff000000000000000000000000000000000000881617881717178d5560901b79ffffffffffffffff000000000000000000000000000000000000169889911696867fffffffffffff00000000000000000000000000000000000000000000000000008616178617881717178b55169460d01b7aff000000000000000000000000000000000000000000000000000016967fffffffffff0000000000000000000000000000000000000000000000000000008892161782178417851786171788551717171717825560018201556002019384549160e81b7dff0000000000000000000000000000000000000000000000000000000000169360a01b7bffffffffffffffff000000000000000000000000000000000000000016917fffff0000000000000000000000000000000000000000000000000000000000001617179060e01b7cff000000000000000000000000000000000000000000000000000000001617179055565b600486517ff3469aa7000000000000000000000000000000000000000000000000000000008152fd5b600485517ff3469aa7000000000000000000000000000000000000000000000000000000008152fd5b600484517ff3469aa7000000000000000000000000000000000000000000000000000000008152fd5b600483517ff3469aa7000000000000000000000000000000000000000000000000000000008152fd5b60046040517f5b8c7e99000000000000000000000000000000000000000000000000000000008152fd5b5060208301515f0b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8114908115612df8575b50612979565b60019150145f612df2565b60079150105f612972565b6001612e1983613404565b03612e245750505f90565b612e2d90613268565b5f828201928312911290801582169115161761275d57611e32906132c3565b73ffffffffffffffffffffffffffffffffffffffff926040517f7dc0d1d00000000000000000000000000000000000000000000000000000000081526020816004818888165afa8015611684576060915f91612f60575b506004604051809781937f52bfe789000000000000000000000000000000000000000000000000000000008352165afa93841561168457620f4240946020915f91612f41575b5001515f8112612f3957915b60608101516001612f0582613404565b03612f225750926123ba9160ff612f1e955116916132fe565b0490565b612f1e94509150505f811215612f9c575f03612f9c565b5f0391612ef5565b612f5a915060603d606011611e5d57611e4f8183611a42565b5f612ee9565b612f79915060203d602011611e9357611e848183611a42565b5f612ea3565b90670de0b6b3a76400009182810292818404149015171561275d57565b8181029291811591840414171561275d57565b612fd073ffffffffffffffffffffffffffffffffffffffff80921693613268565b92803b15610f22575f928360c49260405196879586947f91eece280000000000000000000000000000000000000000000000000000000086521660048501527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8060248601528060448601526064850152820360848401528160a48401525af180156116845761305d5750565b611bdb906119f4565b64e8d4a510009081810291818304149015171561275d5790565b9173ffffffffffffffffffffffffffffffffffffffff80931690604092835191602095868401927fa9059cbb0000000000000000000000000000000000000000000000000000000084521660248401526044830152604482526130e2826119d8565b83519184830167ffffffffffffffff9284821084831117610810575f92839288528886527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c656489870152519082875af13d15613237573d9182116108105761318493855192613177887fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8401160185611a42565b83523d5f8885013e613463565b805180613192575b50505050565b81849181010312610f2257826131a89101611ceb565b156131b457808061318c565b6084925051907f08c379a00000000000000000000000000000000000000000000000000000000082526004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152fd5b6131849360609250613463565b9190820180921161275d57565b519069ffffffffffffffffffff82168203610f2257565b7f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81116132925790565b602490604051907feecaa25d0000000000000000000000000000000000000000000000000000000082526004820152fd5b5f81126132cd5790565b602490604051907fb02ef0870000000000000000000000000000000000000000000000000000000082526004820152fd5b9190608090602473ffffffffffffffffffffffffffffffffffffffff918260405196879485937f55f57510000000000000000000000000000000000000000000000000000000008552166004840152165afa918215611684575f926133ba575b5060ff166004810361337257506020015190565b6005810361338257506040015190565b6006146133b35760046040517f5b8c7e99000000000000000000000000000000000000000000000000000000008152fd5b6060015190565b60ff9192506133d79060803d608011610735576107268183611a42565b919061335e565b677fffffffffffffff908181136133fd57126133f957600190565b5f90565b5050600290565b7fffffffffffffffffffffffffffffffffffffffffffffffff8000000000000000908181136133fd57126133f957600190565b8181136133fd57126133f957600190565b67ffffffffffffffff908181116133fd57106133f957600190565b919290156134de5750815115613477575090565b3b156134805790565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152fd5b8251909150156134f15750805190602001fd5b604051907f08c379a00000000000000000000000000000000000000000000000000000000082528160208060048301528251928360248401525f5b84811061356c575050507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f835f604480968601015201168101030190fd5b81810183015186820160440152859350820161352c56fea26469706673582212206a59a3a5bd6b1c57662803950a4ef705908dc7eef2f4b46f877d4de286995d7964736f6c63430008180033",
  "deployedBytecode": "0x6080806040526004361015610012575f80fd5b5f905f3560e01c90816306ae70951461198a575080631f7a92b21461168f57806323a985fc146114f15780632b7ac3f31461149f57806332878cc91461142e5780636a206137146113e55780636a5a6be41461118757806378fab5c71461114d578063872053a6146110f957806389a302711461108a578063a2060bcf1461101b578063aba30dfa14610fe1578063b20caf4514610f70578063b662d3ab1461099f578063cd3293de14610930578063dd02df16146108c7578063f0773700146108955763fe0e55de146100e4575f80fd5b34610892576100f236611ad4565b6100ff8183859495611d43565b9190911561086857610116608083015185856122fe565b73ffffffffffffffffffffffffffffffffffffffff83163b1561064f57846040517f6a256b2900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8616600482015281816024818373ffffffffffffffffffffffffffffffffffffffff8a165af1801561065357610854575b50506040517f6e19368000000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff851660048201526101808160248173ffffffffffffffffffffffffffffffffffffffff88165afa908115610849578691610747575b50604051907f55f5751000000000000000000000000000000000000000000000000000000000825273ffffffffffffffffffffffffffffffffffffffff8616600483015260808260248173ffffffffffffffffffffffffffffffffffffffff89165afa91821561073c57879261070b575b50805182526102956020830151613268565b6102a26060830151613268565b6102af6080840151613268565b9089821281838103128116908284810313901516176106de578181038282038401128a84129080158216911516176106de57906102ee929103016132c3565b906102fc6040840151613268565b61030960a0830151613268565b61031660c0840151613268565b908a821281838103128116908284810313901516176106b1578181038282038401128b84129080158216911516176106b15790610355929103016132c3565b906103636060850151613268565b9061037f61010061037760e0840151613268565b920151613268565b908a821281838103128116908284810313901516176106b1578181038282038401128b84129080158216911516176106b157916103c2918b9695949303016132c3565b60608401526040830152806020830152600460ff86511614610698575b50600560ff8551161461067b575b600660ff8551161461065e575b6020810151906060604082015191015173ffffffffffffffffffffffffffffffffffffffff60c0870151169173ffffffffffffffffffffffffffffffffffffffff88163b1561064f57604051937f977b1f5f00000000000000000000000000000000000000000000000000000000855273ffffffffffffffffffffffffffffffffffffffff8a1660048601526024850152604484015260648301528260848301528260a483015260c4820152818160e4818373ffffffffffffffffffffffffffffffffffffffff8a165af180156106535761063b575b50506104dd8285856127c6565b90600160a084015273ffffffffffffffffffffffffffffffffffffffff8416865260066020526040862073ffffffffffffffffffffffffffffffffffffffff86165f5260205260405f2081875260205261053a836040882061295f565b604051906105488285611b34565b61016082015273ffffffffffffffffffffffffffffffffffffffff8516907f5111ddcdf8e6b98f5a0d74f1ea4b8f9268d6d0e9c5a54e144459ed0541bc679061018073ffffffffffffffffffffffffffffffffffffffff871692a36105ab578380f35b608073ffffffffffffffffffffffffffffffffffffffff8060e07f53287d6489871e2ad186467efe70bdd15afbbd29f769f1e1c639b4d5a5d654ed9401519461062f6040518097606080918051845273ffffffffffffffffffffffffffffffffffffffff602082015116602085015260408101511515604085015201511515910152565b16941692a35f80808380f35b610644906119f4565b61064f57845f6104d0565b8480fd5b6040513d84823e3d90fd5b6106716060820151606086015190612e0e565b60608201526103fa565b61068e6040820151606086015190612e0e565b60408201526103ed565b60608501516106a691612e0e565b60208201525f6103df565b60248b7f4e487b710000000000000000000000000000000000000000000000000000000081526011600452fd5b60248a7f4e487b710000000000000000000000000000000000000000000000000000000081526011600452fd5b61072e91925060803d608011610735575b6107268183611a42565b81019061278a565b905f610283565b503d61071c565b6040513d89823e3d90fd5b9050610180813d61018011610841575b816107656101809383611a42565b8101031261083d57604051908161018081011067ffffffffffffffff61018084011117610810576101808201604052805182526020810151602083015260408101516040830152606081015160608301526080810151608083015260a081015160a083015260c081015160c083015260e081015160e083015261010080820151908301526101208082015190830152610140808201519083015261016080910151908201525f610212565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b8580fd5b3d9150610757565b6040513d88823e3d90fd5b61085d906119f4565b61064f57845f6101a0565b60046040517f8013a216000000000000000000000000000000000000000000000000000000008152fd5b80fd5b5034610892576101806108b06108aa36611ad4565b91611d43565b6108bd6040518093611b34565b1515610160820152f35b5034610892576109216040610160926108df36611ad4565b916108e8611c62565b5073ffffffffffffffffffffffffffffffffffffffff8091168452600660205284842091165f52602052825f20908252602052206120b2565b61092e6040518092611b34565bf35b503461089257807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261089257602060405173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b5034610892576102a07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610892576102807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610892576102843567ffffffffffffffff8111610f6c57610a1c903690600401611a83565b9073ffffffffffffffffffffffffffffffffffffffff6005541691823b15610f68576040517f1f55630a00000000000000000000000000000000000000000000000000000000815260ff6004351660043503610f225760ff6004351660048201526024355f0b60243503610f22576024355f0b602482015260443560448201526064356064820152608435608482015260a435151560a43503610f225760a435151560a482015273ffffffffffffffffffffffffffffffffffffffff60c4351660c43503610f225773ffffffffffffffffffffffffffffffffffffffff60c4351660c482015260e43560e482015273ffffffffffffffffffffffffffffffffffffffff61010435166101043503610f225773ffffffffffffffffffffffffffffffffffffffff61010435166101048201526101243515156101243503610f22576101243515156101248201526101443515156101443503610f225761014435151561014482015273ffffffffffffffffffffffffffffffffffffffff61016435166101643503610f225773ffffffffffffffffffffffffffffffffffffffff6101643516610164820152610184356101848201526101a4356101a48201526101c49273ffffffffffffffffffffffffffffffffffffffff84351680853503610f2257848301526101e49473ffffffffffffffffffffffffffffffffffffffff86351680873503610f2257868401526102049081359273ffffffffffffffffffffffffffffffffffffffff8416809403610f22578885610c8f8195938399849884968501526102248035908501526102448035908501526102648035908501526102a06102848501526102a4840191611bdd565b03925af1801561065357610f50575b5050610cb5610cc49235610cb0611c3e565b611edc565b6101a4359035610164356122fe565b610ccc611c3e565b73ffffffffffffffffffffffffffffffffffffffff61016435165f52600660205260405f2073ffffffffffffffffffffffffffffffffffffffff82165f5260205260405f20610184355f5260205260a0610d2860405f206120b2565b0151610f265773ffffffffffffffffffffffffffffffffffffffff61016435165f52600660205260405f2073ffffffffffffffffffffffffffffffffffffffff82165f5260205260405f20610184355f5260205260405f206101607ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610f2257604051610db781611a08565b6004358152602435602082015260443560408201526064356060820152608435608082015260a43560a082015260c43560c082015260807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1c360112610f2257610e5091604051610e26816119d8565b60e435815261010435602082015261012435604082015261014435606082015260e083015261295f565b73ffffffffffffffffffffffffffffffffffffffff6040519160ff6004351683526024355f0b602084015260443560408401526064356060840152608435608084015260a435151560a08401528160c4351660c084015260e43560e08401528161010435166101008401526101243515156101208401526101443515156101408401526101843561016084015216907f5754f935e3165da0bd9fec6569d718ced687f59a5d19938799d1be43f3db679661018073ffffffffffffffffffffffffffffffffffffffff610164351692a380f35b5f80fd5b60046040517fd0cfc108000000000000000000000000000000000000000000000000000000008152fd5b610f59906119f4565b610f6457825f610c9e565b8280fd5b8380fd5b5080fd5b503461089257807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261089257602073ffffffffffffffffffffffffffffffffffffffff7f2b50211693ec91bcfe327771928b74a8f475c508d53e86fca4153bcf0f0e87765416604051908152f35b503461089257807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610892576020604051608c8152f35b503461089257807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261089257602060405173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b503461089257807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261089257602060405173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b503461089257807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610892576080905460015460025460035491604051938452602084015260408301526060820152f35b503461089257807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261089257602060405160108152f35b5034610892576101a07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610892576111c0611ab1565b6101607fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffbc360112610f6c5773ffffffffffffffffffffffffffffffffffffffff8082165f52600660205260405f20335f5260205260405f206024355f5260205260a061122e60405f206120b2565b0151610f26578082165f52600660205260405f20335f5260205260405f206024355f5260205260405f206040519061126582611a08565b6044359260ff84168403610f225783835260643592835f0b8403610f2257836020820152608435604082015260a435606082015260c435608082015260e435908115158203610f22578160a0820152610104358381168103610f22578060c083015260807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffedc360112610f2257604051946112fe866119d8565b61012435865261014435918583168303610f225782602088015261016435948515158603610f22578560408901526101843515156101843503610f22577f5754f935e3165da0bd9fec6569d718ced687f59a5d19938799d1be43f3db67969861137b889687956101809b61018435606082015260e083015261295f565b60ff6040519b168b525f0b60208b015260843560408b015260a43560608b015260c43560808b0152151560a08a01521660c08801526101243560e088015216610100860152151561012085015261018435151561014085015260243561016085015233941692a380f35b50346108925760407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126108925761142b611420611ab1565b602435903390611fcc565b80f35b503461089257807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126108925760207f5b5cbfa852c5bd03e540eba853f8faf28a604a4d82bee1091096bfaea14d08c35473ffffffffffffffffffffffffffffffffffffffff60405191168152f35b503461089257807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261089257602073ffffffffffffffffffffffffffffffffffffffff60055416604051908152f35b5034610f225761014090367ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc01828112610f225761012013610f225761012491823567ffffffffffffffff8111610f2257611550903690600401611a83565b73ffffffffffffffffffffffffffffffffffffffff92836005541693843b15610f2257604051907f4ddd9dfc00000000000000000000000000000000000000000000000000000000825260043594818616808703610f22576004840152602435968760248501526044359586604486015260643595848716808803610f225760648701526084359b858d16808e03610f2257608488015260a435958616809603610f225761162e879586945f989486948a9660a487015260c43560c487015260e43560e4870152610104803590870152850152610144840191611bdd565b03925af1801561168457611667575b50906116599161165361142b9697610cb0611c1b565b836122fe565b611661611c1b565b90611fcc565b61142b95509061167a61165993926119f4565b5f9550909161163d565b6040513d5f823e3d90fd5b34610f225760a07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610f225760043573ffffffffffffffffffffffffffffffffffffffff808216809203610f225760807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdc360112610f225760405190611717826119d8565b602435825260209182810190604435825260408101926064358452606082019560843587526001947f6fee9688c285c5c5c97d6a1a29adced674e6b2ad0888b8ad2116b58a8b3ea2488681541015611959578690557f2801b00eb06461cf9fcb9758b5fafd884ff06a86177386f73b6c49f0bf5a5af0978689557f000000000000000000000000000000000000000000000000000000000000000091303b151580611952575b611928575f9689966044957f2b50211693ec91bcfe327771928b74a8f475c508d53e86fca4153bcf0f0e877655847f5b5cbfa852c5bd03e540eba853f8faf28a604a4d82bee1091096bfaea14d08c355518855518855516002555160035560405194859384927f095ea7b3000000000000000000000000000000000000000000000000000000008452817f00000000000000000000000000000000000000000000000000000000000000001660048501527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6024850152165af18015611684576118d0575b505f7fbe9b076dc5b65990cca9dd9d7366682482e7817a6f6bc7f4faf4dc32af497f329355604051908152a1005b8281813d8311611921575b6118e58183611a42565b81010312610f22577fbe9b076dc5b65990cca9dd9d7366682482e7817a6f6bc7f4faf4dc32af497f32936119195f92611ceb565b5093506118a2565b503d6118db565b60046040517fb9a621e1000000000000000000000000000000000000000000000000000000008152fd5b505f6117bd565b602487604051907f3db738da0000000000000000000000000000000000000000000000000000000082526004820152fd5b34610f22575f7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610f225760209073ffffffffffffffffffffffffffffffffffffffff600454168152f35b6080810190811067ffffffffffffffff82111761081057604052565b67ffffffffffffffff811161081057604052565b610100810190811067ffffffffffffffff82111761081057604052565b6101a0810190811067ffffffffffffffff82111761081057604052565b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff82111761081057604052565b9181601f84011215610f225782359167ffffffffffffffff8311610f225760208381860195010111610f2257565b6004359073ffffffffffffffffffffffffffffffffffffffff82168203610f2257565b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc6060910112610f225773ffffffffffffffffffffffffffffffffffffffff906004358281168103610f2257916024359081168103610f22579060443590565b9060e080611bdb9360ff815116845260208101515f0b602085015260408101516040850152606081015160608501526080810151608085015260a0810151151560a085015273ffffffffffffffffffffffffffffffffffffffff60c08201511660c08501520151910190606080918051845273ffffffffffffffffffffffffffffffffffffffff602082015116602085015260408101511515604085015201511515910152565b565b601f82602094937fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe093818652868601375f8582860101520116010190565b60643573ffffffffffffffffffffffffffffffffffffffff81168103610f225790565b6101c43573ffffffffffffffffffffffffffffffffffffffff81168103610f225790565b60405190611c6f82611a08565b815f81525f60208201525f60408201525f60608201525f60808201525f60a08201525f60c082015260e060405191611ca6836119d8565b5f83525f60208401525f60408401525f60608401520152565b90816020910312610f22575173ffffffffffffffffffffffffffffffffffffffff81168103610f225790565b51908115158203610f2257565b90816060910312610f2257604051906060820182811067ffffffffffffffff82111761081057611d3b916040918252805184526020810151602085015201611ceb565b604082015290565b929192611d4e611c62565b5073ffffffffffffffffffffffffffffffffffffffff80911693845f526020906006825260409383855f2091165f528252835f20905f528152611d92835f206120b2565b9460a086015115801590611ecd575b611ea457816004918551928380927f7dc0d1d00000000000000000000000000000000000000000000000000000000082525afa918215611e9a5790606092915f92611e6d575b505060048451809481937f52bfe789000000000000000000000000000000000000000000000000000000008352165afa918215611e64575090611e32915f91611e35575b5083612268565b90565b611e57915060603d606011611e5d575b611e4f8183611a42565b810190611cf8565b5f611e2b565b503d611e45565b513d5f823e3d90fd5b611e8c9250803d10611e93575b611e848183611a42565b810190611cbf565b5f80611de7565b503d611e7a565b84513d5f823e3d90fd5b600484517fd0cfc108000000000000000000000000000000000000000000000000000000008152fd5b50611ed786612226565b611da1565b73ffffffffffffffffffffffffffffffffffffffff80809316911690808214159283611f36575b505050611f0c57565b60046040517f6673613b000000000000000000000000000000000000000000000000000000008152fd5b6020929350604490600454169360405194859384927fbd9ee66b000000000000000000000000000000000000000000000000000000008452600484015260248301525afa908115611684575f91611f92575b50155f8080611f03565b90506020813d602011611fc4575b81611fad60209383611a42565b81010312610f2257611fbe90611ceb565b5f611f88565b3d9150611fa0565b91909173ffffffffffffffffffffffffffffffffffffffff80911691825f5260209160068352604090815f20951694855f528352805f20825f528352612013815f206120b2565b61201c81612226565b80156120a5575b61207c579061207582600160a07fa7e8b7ad64b09d9d45f4ad65f9fd654f99b90f9ce66bb414f72a9f69ba03db329796950152865f5260068552825f20885f528552825f20845f528552825f2061295f565b51908152a3565b600482517f955cc4b9000000000000000000000000000000000000000000000000000000008152fd5b5060a08101511515612023565b6120ba611c62565b50604090600260a060808451936120d085611a25565b80549060ff8216968787528260081c5f0b8060208901526101808460101c60070b9384848b01528560501c60070b958660608c01527fffffffffff00000000000000000000000000000000000000000000000000000067ffffffffffffffff918c838260901c169a8b9101528c60ff8260d01c1615159b8c9101521660c08c01526001820154998a928c6101007fffffffffffffffffffffffff000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff8097169e8f60e085015216910152015491821690816101208d01528260a01c169a8b61014082015260ff808460e01c161515938461016084015260e81c161515938491015284519a6121e48c6119d8565b8b5260208b0152838a015260608901528151986122008a611a08565b895260208901528701526060860152608085015260a084015260c083015260e082015290565b60ff815116159081612259575b8161224c575b81612242575090565b6060915001511590565b6040810151159150612239565b60208101515f0b159150612233565b6040820151156122f85760208101515f0b600181146122d5577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff146122ad5750505f90565b604060206122c093015191015190613437565b80159081156122cd575090565b600191501490565b50604060206122e993015191015190613437565b600281149081156122cd575090565b50505f90565b90916040918251906020948583019273ffffffffffffffffffffffffffffffffffffffff809316845282868201921682526060810194855260608152612343816119d8565b855161234e816119d8565b5f548152600154958882019687526002549588830196875260035492606081019384528951908b820182811067ffffffffffffffff82111761081057805f918d528184525251985198156001171561275d576123bf98670de0b6b3a7640000998a916123ba4891612f7f565b612f9c565b04975193519051608c810180911161275d576004947f0fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8216820361269b578b51917ff5d6ded70000000000000000000000000000000000000000000000000000000083528d838881606c5afa92831561275357908c9392915f9361271d575b50936124618461245a6123ba946123ba61246798998d1b612f7f565b0491612f7f565b90613244565b04976124738989613244565b8460a0897f2b50211693ec91bcfe327771928b74a8f475c508d53e86fca4153bcf0f0e877654168d51928380927ffeaf968c0000000000000000000000000000000000000000000000000000000082525afa908115612713575f916126c7575b508281029080820584149015171561269b576305f5e1009005905f821261266c576060929161250191612f9c565b0494805181010312610f225751938585168503610f225751948516809503610f22575191806125c557505061254e9291612549915f905b808210156125bb5750928391612faf565b613066565b9261257c847f5b5cbfa852c5bd03e540eba853f8faf28a604a4d82bee1091096bfaea14d08c3543390613080565b5f815195818752860152840152606083015260808201527ffa0333956d06e335c550bd5fc4ac9c003c6545e371331b1071fa4d5d8519d6c160a03392a2565b9050928391612faf565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81019081116126405764e8d4a51000900490600182018092116126145750916125499161254e949390612538565b6011907f4e487b71000000000000000000000000000000000000000000000000000000005f525260245ffd5b6011827f4e487b71000000000000000000000000000000000000000000000000000000005f525260245ffd5b602486838e51917f501f289e000000000000000000000000000000000000000000000000000000008352820152fd5b6011867f4e487b71000000000000000000000000000000000000000000000000000000005f525260245ffd5b905060a0813d60a01161270b575b816126e260a09383611a42565b81010312610f225761270460808e6126f984613251565b508301519201613251565b505f6124d3565b3d91506126d5565b8c513d5f823e3d90fd5b935091508d83813d811161274c575b6127368183611a42565b81010312610f225791518b92909161246161243e565b503d61272c565b8d513d5f823e3d90fd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b90816080910312610f22576060604051916127a4836119d8565b8051835260208101516020840152604081015160408401520151606082015290565b9160e08101928351918251156129565781849160406127f795015115155f1461293257505050835151928391612faf565b81516060810151156128e2575061282c60209273ffffffffffffffffffffffffffffffffffffffff9384915101511691613066565b917f00000000000000000000000000000000000000000000000000000000000000001691823b15610f22575f80936024604051809681937fdb006a750000000000000000000000000000000000000000000000000000000083528660048401525af1908115611684576128ce9364e8d4a51000926128d3575b5004907f0000000000000000000000000000000000000000000000000000000000000000613080565b600190565b6128dc906119f4565b5f6128a5565b6128ce925073ffffffffffffffffffffffffffffffffffffffff602061290b9201511691613066565b907f0000000000000000000000000000000000000000000000000000000000000000613080565b620f42409261294d9261294492612e4c565b86515190612f9c565b04928391612faf565b50505050505f90565b91909160ff835116600381119081612e03575b5080612dbf575b15612d955760409081840193600261299186516133de565b14612d6c576129a08551613404565b15612d6c57606081019160026129b684516133de565b14612d43576129c58351613404565b15612d4357608082019560026129db8851613448565b14612d1a5760e083019060026129f2835151613448565b14612cf157859697845160ff16916020860151905196519151968367ffffffffffffffff9860a089015115159373ffffffffffffffffffffffffffffffffffffffff60c0819b01511697519a8b9a60208c0151169d8e918c519e8f9d015115159d6060015115159c8d93835193612a6885611a25565b888552865f0b60208601528960070b908501528a60070b606085015282871660808501528960a085015260c084015f90528c60e085015261010084015f9052610120840152166101408201528c6101608201526101800152885490837fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff008316178a5560081b9161ff00928084169586867fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000861617178c5560101b9369ffffffffffffffff000098858a168098887fffffffffffffffffffffffffffffffffffffffffffff0000000000000000000088161717178d5560501b91169371ffffffffffffffff00000000000000000000928284168098887fffffffffffffffffffffffffffff000000000000000000000000000000000000881617881717178d5560901b79ffffffffffffffff000000000000000000000000000000000000169889911696867fffffffffffff00000000000000000000000000000000000000000000000000008616178617881717178b55169460d01b7aff000000000000000000000000000000000000000000000000000016967fffffffffff0000000000000000000000000000000000000000000000000000008892161782178417851786171788551717171717825560018201556002019384549160e81b7dff0000000000000000000000000000000000000000000000000000000000169360a01b7bffffffffffffffff000000000000000000000000000000000000000016917fffff0000000000000000000000000000000000000000000000000000000000001617179060e01b7cff000000000000000000000000000000000000000000000000000000001617179055565b600486517ff3469aa7000000000000000000000000000000000000000000000000000000008152fd5b600485517ff3469aa7000000000000000000000000000000000000000000000000000000008152fd5b600484517ff3469aa7000000000000000000000000000000000000000000000000000000008152fd5b600483517ff3469aa7000000000000000000000000000000000000000000000000000000008152fd5b60046040517f5b8c7e99000000000000000000000000000000000000000000000000000000008152fd5b5060208301515f0b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8114908115612df8575b50612979565b60019150145f612df2565b60079150105f612972565b6001612e1983613404565b03612e245750505f90565b612e2d90613268565b5f828201928312911290801582169115161761275d57611e32906132c3565b73ffffffffffffffffffffffffffffffffffffffff926040517f7dc0d1d00000000000000000000000000000000000000000000000000000000081526020816004818888165afa8015611684576060915f91612f60575b506004604051809781937f52bfe789000000000000000000000000000000000000000000000000000000008352165afa93841561168457620f4240946020915f91612f41575b5001515f8112612f3957915b60608101516001612f0582613404565b03612f225750926123ba9160ff612f1e955116916132fe565b0490565b612f1e94509150505f811215612f9c575f03612f9c565b5f0391612ef5565b612f5a915060603d606011611e5d57611e4f8183611a42565b5f612ee9565b612f79915060203d602011611e9357611e848183611a42565b5f612ea3565b90670de0b6b3a76400009182810292818404149015171561275d57565b8181029291811591840414171561275d57565b612fd073ffffffffffffffffffffffffffffffffffffffff80921693613268565b92803b15610f22575f928360c49260405196879586947f91eece280000000000000000000000000000000000000000000000000000000086521660048501527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8060248601528060448601526064850152820360848401528160a48401525af180156116845761305d5750565b611bdb906119f4565b64e8d4a510009081810291818304149015171561275d5790565b9173ffffffffffffffffffffffffffffffffffffffff80931690604092835191602095868401927fa9059cbb0000000000000000000000000000000000000000000000000000000084521660248401526044830152604482526130e2826119d8565b83519184830167ffffffffffffffff9284821084831117610810575f92839288528886527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c656489870152519082875af13d15613237573d9182116108105761318493855192613177887fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8401160185611a42565b83523d5f8885013e613463565b805180613192575b50505050565b81849181010312610f2257826131a89101611ceb565b156131b457808061318c565b6084925051907f08c379a00000000000000000000000000000000000000000000000000000000082526004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152fd5b6131849360609250613463565b9190820180921161275d57565b519069ffffffffffffffffffff82168203610f2257565b7f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81116132925790565b602490604051907feecaa25d0000000000000000000000000000000000000000000000000000000082526004820152fd5b5f81126132cd5790565b602490604051907fb02ef0870000000000000000000000000000000000000000000000000000000082526004820152fd5b9190608090602473ffffffffffffffffffffffffffffffffffffffff918260405196879485937f55f57510000000000000000000000000000000000000000000000000000000008552166004840152165afa918215611684575f926133ba575b5060ff166004810361337257506020015190565b6005810361338257506040015190565b6006146133b35760046040517f5b8c7e99000000000000000000000000000000000000000000000000000000008152fd5b6060015190565b60ff9192506133d79060803d608011610735576107268183611a42565b919061335e565b677fffffffffffffff908181136133fd57126133f957600190565b5f90565b5050600290565b7fffffffffffffffffffffffffffffffffffffffffffffffff8000000000000000908181136133fd57126133f957600190565b8181136133fd57126133f957600190565b67ffffffffffffffff908181116133fd57106133f957600190565b919290156134de5750815115613477575090565b3b156134805790565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152fd5b8251909150156134f15750805190602001fd5b604051907f08c379a00000000000000000000000000000000000000000000000000000000082528160208060048301528251928360248401525f5b84811061356c575050507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f835f604480968601015201168101030190fd5b81810183015186820160440152859350820161352c56fea26469706673582212206a59a3a5bd6b1c57662803950a4ef705908dc7eef2f4b46f877d4de286995d7964736f6c63430008180033",
  "devdoc": {
    "errors": {
      "ManagerCannotCancelError()": [
        {
          "custom:error": "Order does not exist or was already cancelled or executed"
        }
      ],
      "ManagerCannotExecuteError()": [
        {
          "custom:error": "Conditions required for order execution are not currently met"
        }
      ],
      "ManagerInvalidOrderNonceError()": [
        {
          "custom:error": "Order nonce has already been used"
        }
      ],
      "ManagerInvalidSignerError()": [
        {
          "custom:error": "Signer is not authorized to interact with markets for the specified user"
        }
      ],
      "TriggerOrderInvalidError()": [
        {
          "custom:error": "side or comparison is not supported"
        }
      ],
      "TriggerOrderStorageInvalidError()": [
        {
          "custom:error": "price, delta, maxFee, or interface fee amount is out-of-bounds"
        }
      ]
    },
    "events": {
      "TriggerOrderCancelled(address,address,uint256)": {
        "params": {
          "account": "Actor whose order was cancelled",
          "market": "Perennial market for which the order was intended",
          "orderId": "Uniquely identifies the cancelled order"
        }
      },
      "TriggerOrderExecuted(address,address,(uint8,int8,int256,int256,uint256,bool,address,(uint256,address,bool,bool)),uint256)": {
        "params": {
          "account": "Actor whose position was changed",
          "market": "Perennial market which the order affected",
          "order": "Change in position and conditions which were satisfied",
          "orderId": "Uniquely identifies the executed order"
        }
      },
      "TriggerOrderInterfaceFeeCharged(address,address,(uint256,address,bool,bool))": {
        "params": {
          "account": "Actor who paid the fee",
          "fee": "Details including the fee amount and recipient of the fee",
          "market": "Perennial market from which the fee was pulled"
        }
      },
      "TriggerOrderPlaced(address,address,(uint8,int8,int256,int256,uint256,bool,address,(uint256,address,bool,bool)),uint256)": {
        "params": {
          "account": "Actor who wants to change their position in the market",
          "market": "Perennial market for which the order is intended",
          "order": "Desired change in position and conditions upon which change may be made",
          "orderId": "Client-supplied order identifier, unique to client"
        }
      }
    },
    "kind": "dev",
    "methods": {
      "cancelOrder(address,uint256)": {
        "params": {
          "market": "Perennial market for which the order was submitted",
          "orderId": "Uniquely identifies the order to cancel"
        }
      },
      "cancelOrderWithSignature(((address,uint256,uint256,(address,address,address,uint256,uint256,uint256))),bytes)": {
        "params": {
          "request": "Message containing the market, order, and nonce used to uniquely identify the order to cancel",
          "signature": "EIP712 message signature"
        }
      },
      "checkOrder(address,address,uint256)": {
        "params": {
          "account": "Actor whose position is to be changed",
          "market": "Perennial market for which the order is intended",
          "orderId": "Uniquely identifies the order for an account"
        },
        "returns": {
          "canExecute": "True if trigger conditions have been met and executeOrder may be called on the order",
          "order": "Trigger order read from storage"
        }
      },
      "constructor": {
        "details": "passthrough constructor"
      },
      "executeOrder(address,address,uint256)": {
        "params": {
          "account": "Actor whose position is to be changed",
          "market": "Perennial market for which the order is intended",
          "orderId": "Uniquely identifies the order for an account"
        }
      },
      "initialize(address,(uint256,uint256,uint256,uint256))": {
        "params": {
          "ethOracle_": "Chainlink ETH/USD oracle used for keeper compensation",
          "keepConfig_": "Keeper compensation configuration"
        }
      },
      "orders(address,address,uint256)": {
        "params": {
          "account": "User for whom the order was submitted",
          "market": "Perennial market for which the order was submitted",
          "orderId": "Uniquely identifies the order for a user"
        }
      },
      "placeOrder(address,uint256,(uint8,int8,int256,int256,uint256,bool,address,(uint256,address,bool,bool)))": {
        "params": {
          "market": "Perennial market in which user wants to change their position",
          "order": "Desired change in position and conditions upon which change may be made",
          "orderId": "Client-specific order identifier"
        }
      },
      "placeOrderWithSignature(((uint8,int8,int256,int256,uint256,bool,address,(uint256,address,bool,bool)),(address,uint256,uint256,(address,address,address,uint256,uint256,uint256))),bytes)": {
        "params": {
          "request": "Message containing the market, order, and nonce used to uniquely identify the user's order.",
          "signature": "EIP712 message signature"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "events": {
      "TriggerOrderCancelled(address,address,uint256)": {
        "notice": "Emitted when an order has been cancelled"
      },
      "TriggerOrderExecuted(address,address,(uint8,int8,int256,int256,uint256,bool,address,(uint256,address,bool,bool)),uint256)": {
        "notice": "Emitted when a trigger orders conditions have been met and the user's position has been updated"
      },
      "TriggerOrderInterfaceFeeCharged(address,address,(uint256,address,bool,bool))": {
        "notice": "Emitted when an interface fee specified on a trigger order has been paid"
      },
      "TriggerOrderPlaced(address,address,(uint8,int8,int256,int256,uint256,bool,address,(uint256,address,bool,bool)),uint256)": {
        "notice": "Emitted when a trigger order is written to storage, whether as a new order or a replacement"
      }
    },
    "kind": "user",
    "methods": {
      "cancelOrder(address,uint256)": {
        "notice": "Cancels a trigger order"
      },
      "cancelOrderWithSignature(((address,uint256,uint256,(address,address,address,uint256,uint256,uint256))),bytes)": {
        "notice": "Called by keeper to cancel a trigger order via a signed message"
      },
      "checkOrder(address,address,uint256)": {
        "notice": "Determines whether trigger conditions for an order have been met"
      },
      "executeOrder(address,address,uint256)": {
        "notice": "Called by keeper to execute an order whose trigger conditions have been met"
      },
      "initialize(address,(uint256,uint256,uint256,uint256))": {
        "notice": "Initialize the contract"
      },
      "orders(address,address,uint256)": {
        "notice": "Retrieves an unexecuted trigger order"
      },
      "placeOrder(address,uint256,(uint8,int8,int256,int256,uint256,bool,address,(uint256,address,bool,bool)))": {
        "notice": "Store a new trigger order or replace an existing trigger order"
      },
      "placeOrderWithSignature(((uint8,int8,int256,int256,uint256,bool,address,(uint256,address,bool,bool)),(address,uint256,uint256,(address,address,address,uint256,uint256,uint256))),bytes)": {
        "notice": "Called by keeper to store a new or replace an existing trigger order via a signed message"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 12046,
        "contract": "@equilibria/perennial-v2-order/contracts/Manager_Arbitrum.sol:Manager_Arbitrum",
        "label": "keepConfig",
        "offset": 0,
        "slot": "0",
        "type": "t_struct(KeepConfig)39301_storage"
      },
      {
        "astId": 12050,
        "contract": "@equilibria/perennial-v2-order/contracts/Manager_Arbitrum.sol:Manager_Arbitrum",
        "label": "marketFactory",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(IMarketFactory)23770"
      },
      {
        "astId": 12054,
        "contract": "@equilibria/perennial-v2-order/contracts/Manager_Arbitrum.sol:Manager_Arbitrum",
        "label": "verifier",
        "offset": 0,
        "slot": "5",
        "type": "t_contract(IOrderVerifier)13226"
      },
      {
        "astId": 12065,
        "contract": "@equilibria/perennial-v2-order/contracts/Manager_Arbitrum.sol:Manager_Arbitrum",
        "label": "_orders",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_contract(IMarket)23543,t_mapping(t_address,t_mapping(t_uint256,t_struct(TriggerOrderStorage)13905_storage)))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes12": {
        "encoding": "inplace",
        "label": "bytes12",
        "numberOfBytes": "12"
      },
      "t_bytes5": {
        "encoding": "inplace",
        "label": "bytes5",
        "numberOfBytes": "5"
      },
      "t_contract(IMarket)23543": {
        "encoding": "inplace",
        "label": "contract IMarket",
        "numberOfBytes": "20"
      },
      "t_contract(IMarketFactory)23770": {
        "encoding": "inplace",
        "label": "contract IMarketFactory",
        "numberOfBytes": "20"
      },
      "t_contract(IOrderVerifier)13226": {
        "encoding": "inplace",
        "label": "contract IOrderVerifier",
        "numberOfBytes": "20"
      },
      "t_int64": {
        "encoding": "inplace",
        "label": "int64",
        "numberOfBytes": "8"
      },
      "t_int8": {
        "encoding": "inplace",
        "label": "int8",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_struct(TriggerOrderStorage)13905_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => struct TriggerOrderStorage))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_struct(TriggerOrderStorage)13905_storage)"
      },
      "t_mapping(t_contract(IMarket)23543,t_mapping(t_address,t_mapping(t_uint256,t_struct(TriggerOrderStorage)13905_storage)))": {
        "encoding": "mapping",
        "key": "t_contract(IMarket)23543",
        "label": "mapping(contract IMarket => mapping(address => mapping(uint256 => struct TriggerOrderStorage)))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_mapping(t_uint256,t_struct(TriggerOrderStorage)13905_storage))"
      },
      "t_mapping(t_uint256,t_struct(TriggerOrderStorage)13905_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct TriggerOrderStorage)",
        "numberOfBytes": "32",
        "value": "t_struct(TriggerOrderStorage)13905_storage"
      },
      "t_struct(KeepConfig)39301_storage": {
        "encoding": "inplace",
        "label": "struct IKept.KeepConfig",
        "members": [
          {
            "astId": 39293,
            "contract": "@equilibria/perennial-v2-order/contracts/Manager_Arbitrum.sol:Manager_Arbitrum",
            "label": "multiplierBase",
            "offset": 0,
            "slot": "0",
            "type": "t_userDefinedValueType(UFixed18)41806"
          },
          {
            "astId": 39295,
            "contract": "@equilibria/perennial-v2-order/contracts/Manager_Arbitrum.sol:Manager_Arbitrum",
            "label": "bufferBase",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 39298,
            "contract": "@equilibria/perennial-v2-order/contracts/Manager_Arbitrum.sol:Manager_Arbitrum",
            "label": "multiplierCalldata",
            "offset": 0,
            "slot": "2",
            "type": "t_userDefinedValueType(UFixed18)41806"
          },
          {
            "astId": 39300,
            "contract": "@equilibria/perennial-v2-order/contracts/Manager_Arbitrum.sol:Manager_Arbitrum",
            "label": "bufferCalldata",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(StoredTriggerOrder)13901_storage": {
        "encoding": "inplace",
        "label": "struct StoredTriggerOrder",
        "members": [
          {
            "astId": 13876,
            "contract": "@equilibria/perennial-v2-order/contracts/Manager_Arbitrum.sol:Manager_Arbitrum",
            "label": "side",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 13878,
            "contract": "@equilibria/perennial-v2-order/contracts/Manager_Arbitrum.sol:Manager_Arbitrum",
            "label": "comparison",
            "offset": 1,
            "slot": "0",
            "type": "t_int8"
          },
          {
            "astId": 13880,
            "contract": "@equilibria/perennial-v2-order/contracts/Manager_Arbitrum.sol:Manager_Arbitrum",
            "label": "price",
            "offset": 2,
            "slot": "0",
            "type": "t_int64"
          },
          {
            "astId": 13882,
            "contract": "@equilibria/perennial-v2-order/contracts/Manager_Arbitrum.sol:Manager_Arbitrum",
            "label": "delta",
            "offset": 10,
            "slot": "0",
            "type": "t_int64"
          },
          {
            "astId": 13884,
            "contract": "@equilibria/perennial-v2-order/contracts/Manager_Arbitrum.sol:Manager_Arbitrum",
            "label": "maxFee",
            "offset": 18,
            "slot": "0",
            "type": "t_uint64"
          },
          {
            "astId": 13886,
            "contract": "@equilibria/perennial-v2-order/contracts/Manager_Arbitrum.sol:Manager_Arbitrum",
            "label": "isSpent",
            "offset": 26,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 13888,
            "contract": "@equilibria/perennial-v2-order/contracts/Manager_Arbitrum.sol:Manager_Arbitrum",
            "label": "__unallocated0__",
            "offset": 27,
            "slot": "0",
            "type": "t_bytes5"
          },
          {
            "astId": 13890,
            "contract": "@equilibria/perennial-v2-order/contracts/Manager_Arbitrum.sol:Manager_Arbitrum",
            "label": "referrer",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 13892,
            "contract": "@equilibria/perennial-v2-order/contracts/Manager_Arbitrum.sol:Manager_Arbitrum",
            "label": "__unallocated1__",
            "offset": 20,
            "slot": "1",
            "type": "t_bytes12"
          },
          {
            "astId": 13894,
            "contract": "@equilibria/perennial-v2-order/contracts/Manager_Arbitrum.sol:Manager_Arbitrum",
            "label": "interfaceFeeReceiver",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 13896,
            "contract": "@equilibria/perennial-v2-order/contracts/Manager_Arbitrum.sol:Manager_Arbitrum",
            "label": "interfaceFeeAmount",
            "offset": 20,
            "slot": "2",
            "type": "t_uint64"
          },
          {
            "astId": 13898,
            "contract": "@equilibria/perennial-v2-order/contracts/Manager_Arbitrum.sol:Manager_Arbitrum",
            "label": "interfaceFeeFlat",
            "offset": 28,
            "slot": "2",
            "type": "t_bool"
          },
          {
            "astId": 13900,
            "contract": "@equilibria/perennial-v2-order/contracts/Manager_Arbitrum.sol:Manager_Arbitrum",
            "label": "interfaceFeeUnwrap",
            "offset": 29,
            "slot": "2",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(TriggerOrderStorage)13905_storage": {
        "encoding": "inplace",
        "label": "struct TriggerOrderStorage",
        "members": [
          {
            "astId": 13904,
            "contract": "@equilibria/perennial-v2-order/contracts/Manager_Arbitrum.sol:Manager_Arbitrum",
            "label": "value",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(StoredTriggerOrder)13901_storage"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      },
      "t_userDefinedValueType(UFixed18)41806": {
        "encoding": "inplace",
        "label": "UFixed18",
        "numberOfBytes": "32"
      }
    }
  }
}
