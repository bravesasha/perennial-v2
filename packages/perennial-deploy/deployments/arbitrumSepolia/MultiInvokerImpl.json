{
  "address": "0x1e63a26211C54AC678B166A9fB0f79D8f6f32Bfc",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "Token6",
          "name": "usdc_",
          "type": "address"
        },
        {
          "internalType": "Token18",
          "name": "dsu_",
          "type": "address"
        },
        {
          "internalType": "contract IFactory",
          "name": "marketFactory_",
          "type": "address"
        },
        {
          "internalType": "contract IFactory",
          "name": "vaultFactory_",
          "type": "address"
        },
        {
          "internalType": "contract IBatcher",
          "name": "batcher_",
          "type": "address"
        },
        {
          "internalType": "contract IEmptySetReserve",
          "name": "reserve_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "keepBufferBase_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "keepBufferCalldata_",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "DivisionByZero",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Fixed18OverflowError",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Fixed6OverflowError",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "version",
          "type": "uint256"
        }
      ],
      "name": "InitializableAlreadyInitializedError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InitializableNotInitializingError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InitializableZeroVersionError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MultiInvokerCantExecuteError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MultiInvokerInvalidInstanceError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MultiInvokerInvalidOrderError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MultiInvokerMaxFeeExceededError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MultiInvokerOrderMustBeSingleSidedError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MultiInvokerUnauthorizedError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TriggerOrderStorageInvalidError",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "int256",
          "name": "value",
          "type": "int256"
        }
      ],
      "name": "UFixed18UnderflowError",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "int256",
          "name": "value",
          "type": "int256"
        }
      ],
      "name": "UFixed6UnderflowError",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "version",
          "type": "uint256"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "contract IMarket",
          "name": "market",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "UFixed6",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "receiver",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "unwrap",
              "type": "bool"
            }
          ],
          "indexed": false,
          "internalType": "struct InterfaceFee",
          "name": "fee",
          "type": "tuple"
        }
      ],
      "name": "InterfaceFeeCharged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "applicableGas",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "applicableValue",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "UFixed18",
          "name": "baseFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "UFixed18",
          "name": "calldataFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "UFixed18",
          "name": "keeperFee",
          "type": "uint256"
        }
      ],
      "name": "KeeperCall",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "market",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "UFixed6",
          "name": "fee",
          "type": "uint256"
        }
      ],
      "name": "KeeperFeeCharged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "newEnabled",
          "type": "bool"
        }
      ],
      "name": "OperatorUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "contract IMarket",
          "name": "market",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        }
      ],
      "name": "OrderCancelled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "contract IMarket",
          "name": "market",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        }
      ],
      "name": "OrderExecuted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "contract IMarket",
          "name": "market",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "side",
              "type": "uint8"
            },
            {
              "internalType": "int8",
              "name": "comparison",
              "type": "int8"
            },
            {
              "internalType": "UFixed6",
              "name": "fee",
              "type": "uint256"
            },
            {
              "internalType": "Fixed6",
              "name": "price",
              "type": "int256"
            },
            {
              "internalType": "Fixed6",
              "name": "delta",
              "type": "int256"
            },
            {
              "components": [
                {
                  "internalType": "UFixed6",
                  "name": "amount",
                  "type": "uint256"
                },
                {
                  "internalType": "address",
                  "name": "receiver",
                  "type": "address"
                },
                {
                  "internalType": "bool",
                  "name": "unwrap",
                  "type": "bool"
                }
              ],
              "internalType": "struct InterfaceFee",
              "name": "interfaceFee1",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "UFixed6",
                  "name": "amount",
                  "type": "uint256"
                },
                {
                  "internalType": "address",
                  "name": "receiver",
                  "type": "address"
                },
                {
                  "internalType": "bool",
                  "name": "unwrap",
                  "type": "bool"
                }
              ],
              "internalType": "struct InterfaceFee",
              "name": "interfaceFee2",
              "type": "tuple"
            }
          ],
          "indexed": false,
          "internalType": "struct TriggerOrder",
          "name": "order",
          "type": "tuple"
        }
      ],
      "name": "OrderPlaced",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ARB_FIXED_OVERHEAD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ARB_GAS_MULTIPLIER",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DSU",
      "outputs": [
        {
          "internalType": "Token18",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "USDC",
      "outputs": [
        {
          "internalType": "Token6",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "batcher",
      "outputs": [
        {
          "internalType": "contract IBatcher",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "contract IMarket",
          "name": "market",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        }
      ],
      "name": "canExecuteOrder",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ethTokenOracleFeed",
      "outputs": [
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "ethOracle_",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "enum IMultiInvoker.PerennialAction",
              "name": "action",
              "type": "uint8"
            },
            {
              "internalType": "bytes",
              "name": "args",
              "type": "bytes"
            }
          ],
          "internalType": "struct IMultiInvoker.Invocation[]",
          "name": "invocations",
          "type": "tuple[]"
        }
      ],
      "name": "invoke",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "enum IMultiInvoker.PerennialAction",
              "name": "action",
              "type": "uint8"
            },
            {
              "internalType": "bytes",
              "name": "args",
              "type": "bytes"
            }
          ],
          "internalType": "struct IMultiInvoker.Invocation[]",
          "name": "invocations",
          "type": "tuple[]"
        }
      ],
      "name": "invoke",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "keepBufferBase",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "keepBufferCalldata",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "keeperToken",
      "outputs": [
        {
          "internalType": "Token18",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "latestNonce",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "marketFactory",
      "outputs": [
        {
          "internalType": "contract IFactory",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "operators",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "contract IMarket",
          "name": "market",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        }
      ],
      "name": "orders",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "side",
              "type": "uint8"
            },
            {
              "internalType": "int8",
              "name": "comparison",
              "type": "int8"
            },
            {
              "internalType": "UFixed6",
              "name": "fee",
              "type": "uint256"
            },
            {
              "internalType": "Fixed6",
              "name": "price",
              "type": "int256"
            },
            {
              "internalType": "Fixed6",
              "name": "delta",
              "type": "int256"
            },
            {
              "components": [
                {
                  "internalType": "UFixed6",
                  "name": "amount",
                  "type": "uint256"
                },
                {
                  "internalType": "address",
                  "name": "receiver",
                  "type": "address"
                },
                {
                  "internalType": "bool",
                  "name": "unwrap",
                  "type": "bool"
                }
              ],
              "internalType": "struct InterfaceFee",
              "name": "interfaceFee1",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "UFixed6",
                  "name": "amount",
                  "type": "uint256"
                },
                {
                  "internalType": "address",
                  "name": "receiver",
                  "type": "address"
                },
                {
                  "internalType": "bool",
                  "name": "unwrap",
                  "type": "bool"
                }
              ],
              "internalType": "struct InterfaceFee",
              "name": "interfaceFee2",
              "type": "tuple"
            }
          ],
          "internalType": "struct TriggerOrder",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "reserve",
      "outputs": [
        {
          "internalType": "contract IEmptySetReserve",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "newEnabled",
          "type": "bool"
        }
      ],
      "name": "updateOperator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vaultFactory",
      "outputs": [
        {
          "internalType": "contract IFactory",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xa140d7807e29fff2120ce2ddb375184d248619b5d054bfb4b2a3f609403bbab2",
  "receipt": {
    "to": null,
    "from": "0x66a7fDB96C583c59597de16d8b2B989231415339",
    "contractAddress": "0x1e63a26211C54AC678B166A9fB0f79D8f6f32Bfc",
    "transactionIndex": 1,
    "gasUsed": "6878072",
    "logsBloom": "0x
    "blockHash": "0xb2cf1d32ac57dcee3ad0e405880857f355bdfdd0e77ee4b449e506bfe689dd25",
    "transactionHash": "0xa140d7807e29fff2120ce2ddb375184d248619b5d054bfb4b2a3f609403bbab2",
    "logs": [],
    "blockNumber": 81201565,
    "cumulativeGasUsed": "6878072",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x16b38364bA6f55B6E150cC7f52D22E89643f3535",
    "0x5FA881826AD000D010977645450292701bc2f56D",
    "0x32F3aB7b3c5BBa0738b72FdB83FcE6bb1a1a943c",
    "0x877682C7a8840D59A63a6227ED2Aeb20C3ae7FeB",
    "0x0000000000000000000000000000000000000000",
    "0x841d7C994aC0Bb17CcD65a021E686e3cFafE2118",
    1500000,
    35200
  ],
  "numDeployments": 3,
  "solcInputHash": "08e85383631ef4a06416ac5e831b0baf",
  "metadata": "{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"Token6\",\"name\":\"usdc_\",\"type\":\"address\"},{\"internalType\":\"Token18\",\"name\":\"dsu_\",\"type\":\"address\"},{\"internalType\":\"contract IFactory\",\"name\":\"marketFactory_\",\"type\":\"address\"},{\"internalType\":\"contract IFactory\",\"name\":\"vaultFactory_\",\"type\":\"address\"},{\"internalType\":\"contract IBatcher\",\"name\":\"batcher_\",\"type\":\"address\"},{\"internalType\":\"contract IEmptySetReserve\",\"name\":\"reserve_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"keepBufferBase_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"keepBufferCalldata_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"DivisionByZero\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Fixed18OverflowError\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Fixed6OverflowError\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"version\",\"type\":\"uint256\"}],\"name\":\"InitializableAlreadyInitializedError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InitializableNotInitializingError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InitializableZeroVersionError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MultiInvokerCantExecuteError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MultiInvokerInvalidInstanceError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MultiInvokerInvalidOrderError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MultiInvokerMaxFeeExceededError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MultiInvokerOrderMustBeSingleSidedError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MultiInvokerUnauthorizedError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TriggerOrderStorageInvalidError\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"value\",\"type\":\"int256\"}],\"name\":\"UFixed18UnderflowError\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"value\",\"type\":\"int256\"}],\"name\":\"UFixed6UnderflowError\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"version\",\"type\":\"uint256\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract IMarket\",\"name\":\"market\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"UFixed6\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"unwrap\",\"type\":\"bool\"}],\"indexed\":false,\"internalType\":\"struct InterfaceFee\",\"name\":\"fee\",\"type\":\"tuple\"}],\"name\":\"InterfaceFeeCharged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"applicableGas\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"applicableValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"UFixed18\",\"name\":\"baseFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"UFixed18\",\"name\":\"calldataFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"UFixed18\",\"name\":\"keeperFee\",\"type\":\"uint256\"}],\"name\":\"KeeperCall\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"UFixed6\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"KeeperFeeCharged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"newEnabled\",\"type\":\"bool\"}],\"name\":\"OperatorUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract IMarket\",\"name\":\"market\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"name\":\"OrderCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract IMarket\",\"name\":\"market\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"name\":\"OrderExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract IMarket\",\"name\":\"market\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"side\",\"type\":\"uint8\"},{\"internalType\":\"int8\",\"name\":\"comparison\",\"type\":\"int8\"},{\"internalType\":\"UFixed6\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"Fixed6\",\"name\":\"price\",\"type\":\"int256\"},{\"internalType\":\"Fixed6\",\"name\":\"delta\",\"type\":\"int256\"},{\"components\":[{\"internalType\":\"UFixed6\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"unwrap\",\"type\":\"bool\"}],\"internalType\":\"struct InterfaceFee\",\"name\":\"interfaceFee1\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"UFixed6\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"unwrap\",\"type\":\"bool\"}],\"internalType\":\"struct InterfaceFee\",\"name\":\"interfaceFee2\",\"type\":\"tuple\"}],\"indexed\":false,\"internalType\":\"struct TriggerOrder\",\"name\":\"order\",\"type\":\"tuple\"}],\"name\":\"OrderPlaced\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ARB_FIXED_OVERHEAD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ARB_GAS_MULTIPLIER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DSU\",\"outputs\":[{\"internalType\":\"Token18\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USDC\",\"outputs\":[{\"internalType\":\"Token6\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"batcher\",\"outputs\":[{\"internalType\":\"contract IBatcher\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"contract IMarket\",\"name\":\"market\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"name\":\"canExecuteOrder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ethTokenOracleFeed\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"ethOracle_\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"enum IMultiInvoker.PerennialAction\",\"name\":\"action\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"args\",\"type\":\"bytes\"}],\"internalType\":\"struct IMultiInvoker.Invocation[]\",\"name\":\"invocations\",\"type\":\"tuple[]\"}],\"name\":\"invoke\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"enum IMultiInvoker.PerennialAction\",\"name\":\"action\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"args\",\"type\":\"bytes\"}],\"internalType\":\"struct IMultiInvoker.Invocation[]\",\"name\":\"invocations\",\"type\":\"tuple[]\"}],\"name\":\"invoke\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"keepBufferBase\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"keepBufferCalldata\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"keeperToken\",\"outputs\":[{\"internalType\":\"Token18\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketFactory\",\"outputs\":[{\"internalType\":\"contract IFactory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"operators\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"contract IMarket\",\"name\":\"market\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"name\":\"orders\",\"outputs\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"side\",\"type\":\"uint8\"},{\"internalType\":\"int8\",\"name\":\"comparison\",\"type\":\"int8\"},{\"internalType\":\"UFixed6\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"Fixed6\",\"name\":\"price\",\"type\":\"int256\"},{\"internalType\":\"Fixed6\",\"name\":\"delta\",\"type\":\"int256\"},{\"components\":[{\"internalType\":\"UFixed6\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"unwrap\",\"type\":\"bool\"}],\"internalType\":\"struct InterfaceFee\",\"name\":\"interfaceFee1\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"UFixed6\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"unwrap\",\"type\":\"bool\"}],\"internalType\":\"struct InterfaceFee\",\"name\":\"interfaceFee2\",\"type\":\"tuple\"}],\"internalType\":\"struct TriggerOrder\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reserve\",\"outputs\":[{\"internalType\":\"contract IEmptySetReserve\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"newEnabled\",\"type\":\"bool\"}],\"name\":\"updateOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vaultFactory\",\"outputs\":[{\"internalType\":\"contract IFactory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Additionally incentivizes keepers with L1 rollup fees according to the Arbitrum spec\",\"kind\":\"dev\",\"methods\":{\"canExecuteOrder(address,address,uint256)\":{\"params\":{\"account\":\"Account to get open oder of\",\"market\":\"Market to get open order in\",\"nonce\":\"UID of order\"},\"returns\":{\"_0\":\"canFill Whether the order can be executed\"}},\"initialize(address)\":{\"params\":{\"ethOracle_\":\"Chainlink ETH/USD oracle address\"}},\"invoke((uint8,bytes)[])\":{\"params\":{\"invocations\":\"List of actions to execute in order\"}},\"invoke(address,(uint8,bytes)[])\":{\"params\":{\"account\":\"Account to perform invocations for\",\"invocations\":\"List of actions to execute in order\"}},\"orders(address,address,uint256)\":{\"params\":{\"account\":\"Account to get open oder of\",\"market\":\"Market to get open order in\",\"nonce\":\"UID of order\"}},\"updateOperator(address,bool)\":{\"params\":{\"newEnabled\":\"The new status of the operator\",\"operator\":\"The operator to update\"}}},\"title\":\"MultiInvoker_Arbitrum\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"canExecuteOrder(address,address,uint256)\":{\"notice\":\"Returns whether an order can be executed\"},\"initialize(address)\":{\"notice\":\"Initialize the contract\"},\"invoke((uint8,bytes)[])\":{\"notice\":\"entry to perform invocations for msg.sender\"},\"invoke(address,(uint8,bytes)[])\":{\"notice\":\"entry to perform invocations for account\"},\"orders(address,address,uint256)\":{\"notice\":\"View function to get order state\"},\"updateOperator(address,bool)\":{\"notice\":\"Updates the status of an operator for the caller\"}},\"notice\":\"Arbitrum Kept MultiInvoker implementation.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@equilibria/perennial-v2-extensions/contracts/MultiInvoker_Arbitrum.sol\":\"MultiInvoker_Arbitrum\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000000},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0xf2b6c9adb3552254df1445b73563cf014434ff5e78663e9b961b6c059506ceb5\",\"license\":\"MIT\"},\"@equilibria/emptyset-batcher/interfaces/IBatcher.sol\":{\"content\":\"//SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.13;\\n\\nimport \\\"@equilibria/root/number/types/UFixed18.sol\\\";\\nimport \\\"@equilibria/root/token/types/Token18.sol\\\";\\nimport \\\"@equilibria/root/token/types/Token6.sol\\\";\\nimport \\\"../interfaces/IEmptySetReserve.sol\\\";\\n\\ninterface IBatcher {\\n    event Wrap(address indexed to, UFixed18 amount);\\n    event Unwrap(address indexed to, UFixed18 amount);\\n    event Rebalance(UFixed18 newMinted, UFixed18 newRedeemed);\\n    event Close(UFixed18 amount);\\n\\n    error BatcherNotImplementedError();\\n    error BatcherBalanceMismatchError(UFixed18 oldBalance, UFixed18 newBalance);\\n\\n    function RESERVE() external view returns (IEmptySetReserve); // solhint-disable-line func-name-mixedcase\\n    function USDC() external view returns (Token6); // solhint-disable-line func-name-mixedcase\\n    function DSU() external view returns (Token18); // solhint-disable-line func-name-mixedcase\\n    function totalBalance() external view returns (UFixed18);\\n    function wrap(UFixed18 amount, address to) external;\\n    function unwrap(UFixed18 amount, address to) external;\\n    function rebalance() external;\\n}\\n\",\"keccak256\":\"0xb9c0b0fc0dfcd44492b029ede04d304f6906b030cb925dc0fc2579e8c58d9734\",\"license\":\"Apache-2.0\"},\"@equilibria/emptyset-batcher/interfaces/IEmptySetReserve.sol\":{\"content\":\"//SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.13;\\n\\nimport \\\"@equilibria/root/number/types/UFixed18.sol\\\";\\n\\ninterface IEmptySetReserve {\\n    event Redeem(address indexed account, uint256 costAmount, uint256 redeemAmount);\\n    event Mint(address indexed account, uint256 mintAmount, uint256 costAmount);\\n    event Repay(address indexed account, uint256 repayAmount);\\n\\n    function debt(address borrower) external view returns (UFixed18);\\n    function repay(address borrower, UFixed18 amount) external;\\n    function mint(UFixed18 amount) external;\\n    function redeem(UFixed18 amount) external;\\n}\\n\",\"keccak256\":\"0xdb96e26082a471c7803e892ecd8d2877f23cd9e31f13a3e407dd5f8909078864\",\"license\":\"Apache-2.0\"},\"@equilibria/perennial-v2-extensions/contracts/MultiInvoker.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.13;\\n\\nimport { AggregatorV3Interface } from \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\nimport { IEmptySetReserve } from \\\"@equilibria/emptyset-batcher/interfaces/IEmptySetReserve.sol\\\";\\nimport { IFactory } from \\\"@equilibria/root/attribute/interfaces/IFactory.sol\\\";\\nimport { IBatcher } from \\\"@equilibria/emptyset-batcher/interfaces/IBatcher.sol\\\";\\nimport { IInstance } from \\\"@equilibria/root/attribute/interfaces/IInstance.sol\\\";\\nimport { IPythFactory } from \\\"@equilibria/perennial-v2-oracle/contracts/interfaces/IPythFactory.sol\\\";\\nimport { IVault } from \\\"@equilibria/perennial-v2-vault/contracts/interfaces/IVault.sol\\\";\\nimport \\\"./interfaces/IMultiInvoker.sol\\\";\\nimport \\\"./types/TriggerOrder.sol\\\";\\nimport \\\"./types/InterfaceFee.sol\\\";\\nimport \\\"@equilibria/root/attribute/Kept/Kept.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\n/// @title MultiInvoker\\n/// @notice Extension to handle batched calls to the Perennial protocol\\ncontract MultiInvoker is IMultiInvoker, Kept {\\n    /// @dev USDC stablecoin address\\n    Token6 public immutable USDC; // solhint-disable-line var-name-mixedcase\\n\\n    /// @dev DSU address\\n    Token18 public immutable DSU; // solhint-disable-line var-name-mixedcase\\n\\n    /// @dev Protocol factory to validate market approvals\\n    IFactory public immutable marketFactory;\\n\\n    /// @dev Vault factory to validate vault approvals\\n    IFactory public immutable vaultFactory;\\n\\n    /// @dev Batcher address\\n    IBatcher public immutable batcher;\\n\\n    /// @dev Reserve address\\n    IEmptySetReserve public immutable reserve;\\n\\n    /// @dev The fixed gas buffer that is added to the keeper fee\\n    uint256 public immutable keepBufferBase;\\n\\n    /// @dev The fixed gas buffer that is added to the calldata portion of the keeper fee\\n    uint256 public immutable keepBufferCalldata;\\n\\n    /// @dev UID for an order\\n    uint256 public latestNonce;\\n\\n    /// @dev State for the order data\\n    mapping(address => mapping(IMarket => mapping(uint256 => TriggerOrderStorage))) private _orders;\\n\\n    /// @dev Mapping of allowed operators for each account\\n    mapping(address => mapping(address => bool)) public operators;\\n\\n    /// @notice Constructs the MultiInvoker contract\\n    /// @param usdc_ USDC stablecoin address\\n    /// @param dsu_ DSU address\\n    /// @param marketFactory_ Protocol factory to validate market approvals\\n    /// @param vaultFactory_ Protocol factory to validate vault approvals\\n    /// @param batcher_ Batcher address\\n    /// @param reserve_ Reserve address\\n    /// @param keepBufferBase_ The fixed gas buffer that is added to the keeper fee\\n    /// @param keepBufferCalldata_ The fixed calldata buffer that is added to the keeper fee\\n    constructor(\\n        Token6 usdc_,\\n        Token18 dsu_,\\n        IFactory marketFactory_,\\n        IFactory vaultFactory_,\\n        IBatcher batcher_,\\n        IEmptySetReserve reserve_,\\n        uint256 keepBufferBase_,\\n        uint256 keepBufferCalldata_\\n    ) {\\n        USDC = usdc_;\\n        DSU = dsu_;\\n        marketFactory = marketFactory_;\\n        vaultFactory = vaultFactory_;\\n        batcher = batcher_;\\n        reserve = reserve_;\\n        keepBufferBase = keepBufferBase_;\\n        keepBufferCalldata = keepBufferCalldata_;\\n    }\\n\\n    /// @notice Initialize the contract\\n    /// @param ethOracle_ Chainlink ETH/USD oracle address\\n    function initialize(AggregatorV3Interface ethOracle_) external initializer(2) {\\n        __Kept__initialize(ethOracle_, DSU);\\n\\n        if (address(batcher) != address(0)) {\\n            DSU.approve(address(batcher));\\n            USDC.approve(address(batcher));\\n        }\\n\\n        DSU.approve(address(reserve));\\n        USDC.approve(address(reserve));\\n    }\\n\\n    /// @notice View function to get order state\\n    /// @param account Account to get open oder of\\n    /// @param market Market to get open order in\\n    /// @param nonce UID of order\\n    function orders(address account, IMarket market, uint256 nonce) public view returns (TriggerOrder memory) {\\n        return _orders[account][market][nonce].read();\\n    }\\n\\n    /// @notice Returns whether an order can be executed\\n    /// @param account Account to get open oder of\\n    /// @param market Market to get open order in\\n    /// @param nonce UID of order\\n    /// @return canFill Whether the order can be executed\\n    function canExecuteOrder(address account, IMarket market, uint256 nonce) public view returns (bool) {\\n        TriggerOrder memory order = orders(account, market, nonce);\\n        if (order.fee.isZero()) return false;\\n\\n        return order.fillable(market.oracle().latest());\\n    }\\n\\n    /// @notice Updates the status of an operator for the caller\\n    /// @param operator The operator to update\\n    /// @param newEnabled The new status of the operator\\n    function updateOperator(address operator, bool newEnabled) external {\\n        operators[msg.sender][operator] = newEnabled;\\n        emit OperatorUpdated(msg.sender, operator, newEnabled);\\n    }\\n\\n    /// @notice entry to perform invocations for msg.sender\\n    /// @param invocations List of actions to execute in order\\n    function invoke(Invocation[] calldata invocations) external payable {\\n        _invoke(msg.sender, invocations);\\n    }\\n\\n    /// @notice entry to perform invocations for account\\n    /// @param account Account to perform invocations for\\n    /// @param invocations List of actions to execute in order\\n    function invoke(address account, Invocation[] calldata invocations) external payable {\\n        _invoke(account, invocations);\\n    }\\n\\n    /// @notice Performs a batch of invocations for an account\\n    /// @param account Account to perform invocations for\\n    /// @param invocations List of actions to execute in order\\n    function _invoke(address account, Invocation[] calldata invocations) private {\\n        if (msg.sender != account && !operators[account][msg.sender]) revert MultiInvokerUnauthorizedError();\\n\\n        for(uint i = 0; i < invocations.length; ++i) {\\n            Invocation memory invocation = invocations[i];\\n\\n            if (invocation.action == PerennialAction.UPDATE_POSITION) {\\n                (\\n                    // update data\\n                    IMarket market,\\n                    UFixed6 newMaker,\\n                    UFixed6 newLong,\\n                    UFixed6 newShort,\\n                    Fixed6 collateral,\\n                    bool wrap,\\n                    InterfaceFee memory interfaceFee1,\\n                    InterfaceFee memory interfaceFee2\\n                ) = abi.decode(invocation.args, (IMarket, UFixed6, UFixed6, UFixed6, Fixed6, bool, InterfaceFee, InterfaceFee));\\n\\n                _update(account, market, newMaker, newLong, newShort, collateral, wrap, interfaceFee1, interfaceFee2);\\n            } else if (invocation.action == PerennialAction.UPDATE_INTENT) {\\n                (IMarket market, Intent memory intent, bytes memory signature) = abi.decode(invocation.args, (IMarket, Intent, bytes));\\n\\n                _updateIntent(account, market, intent, signature);\\n            } else if (invocation.action == PerennialAction.UPDATE_VAULT) {\\n                (IVault vault, UFixed6 depositAssets, UFixed6 redeemShares, UFixed6 claimAssets, bool wrap)\\n                    = abi.decode(invocation.args, (IVault, UFixed6, UFixed6, UFixed6, bool));\\n\\n                _vaultUpdate(account, vault, depositAssets, redeemShares, claimAssets, wrap);\\n            } else if (invocation.action == PerennialAction.PLACE_ORDER) {\\n                (IMarket market, TriggerOrder memory order) = abi.decode(invocation.args, (IMarket, TriggerOrder));\\n\\n                _placeOrder(account, market, order);\\n            } else if (invocation.action == PerennialAction.CANCEL_ORDER) {\\n                (IMarket market, uint256 nonce) = abi.decode(invocation.args, (IMarket, uint256));\\n\\n                _cancelOrder(account, market, nonce);\\n            } else if (invocation.action == PerennialAction.EXEC_ORDER) {\\n                (address execAccount, IMarket market, uint256 nonce)\\n                    = abi.decode(invocation.args, (address, IMarket, uint256));\\n\\n                _executeOrder(execAccount, market, nonce);\\n            } else if (invocation.action == PerennialAction.COMMIT_PRICE) {\\n                (address oracleProviderFactory, uint256 value, bytes32[] memory ids, uint256 version, bytes memory data, bool revertOnFailure) =\\n                    abi.decode(invocation.args, (address, uint256, bytes32[], uint256, bytes, bool));\\n\\n                _commitPrice(oracleProviderFactory, value, ids, version, data, revertOnFailure);\\n            } else if (invocation.action == PerennialAction.APPROVE) {\\n                (address target) = abi.decode(invocation.args, (address));\\n\\n                _approve(target);\\n            } else if (invocation.action == PerennialAction.CLAIM_FEE) {\\n                (IMarket market, bool unwrap) = abi.decode(invocation.args, (IMarket, bool));\\n\\n                _claimFee(account, market, unwrap);\\n            }\\n        }\\n        // ETH must not remain in this contract at rest\\n        Address.sendValue(payable(msg.sender), address(this).balance);\\n    }\\n\\n    /// @notice Updates market on behalf of account\\n    /// @param account Address of account to update\\n    /// @param market Address of market up update\\n    /// @param newMaker New maker position for account in `market`\\n    /// @param newLong New long position for account in `market`\\n    /// @param newShort New short position for account in `market`\\n    /// @param collateral Net change in collateral for account in `market`\\n    /// @param wrap Wheather to wrap/unwrap collateral on deposit/withdrawal\\n    /// @param interfaceFee1 Primary interface fee to charge\\n    /// @param interfaceFee2 Secondary interface fee to charge\\n    function _update(\\n        address account,\\n        IMarket market,\\n        UFixed6 newMaker,\\n        UFixed6 newLong,\\n        UFixed6 newShort,\\n        Fixed6 collateral,\\n        bool wrap,\\n        InterfaceFee memory interfaceFee1,\\n        InterfaceFee memory interfaceFee2\\n    ) internal isMarketInstance(market) {\\n        Fixed18 balanceBefore =  Fixed18Lib.from(DSU.balanceOf());\\n\\n        // collateral is transferred here as DSU then an optional interface fee is charged from it\\n        if (collateral.sign() == 1) _deposit(account, collateral.abs(), wrap);\\n\\n        market.update(\\n            account,\\n            newMaker,\\n            newLong,\\n            newShort,\\n            collateral,\\n            false,\\n            interfaceFee1.receiver == address(0) ? interfaceFee2.receiver : interfaceFee1.receiver\\n        );\\n\\n        Fixed6 withdrawAmount = Fixed6Lib.from(Fixed18Lib.from(DSU.balanceOf()).sub(balanceBefore));\\n        if (!withdrawAmount.isZero()) _withdraw(account, withdrawAmount.abs(), wrap);\\n\\n        // charge interface fee\\n        _chargeFee(account, market, interfaceFee1);\\n        _chargeFee(account, market, interfaceFee2);\\n    }\\n\\n    /// @notice Fills an intent update on behalf of account\\n    /// @param account Address of account to update\\n    /// @param intent The intent that is being filled\\n    /// @param signature The signature of the intent that is being filled\\n    function _updateIntent(\\n        address account,\\n        IMarket market,\\n        Intent memory intent,\\n        bytes memory signature\\n    ) internal isMarketInstance(market) {\\n        market.update(account, intent, signature);\\n    }\\n\\n    /// @notice Update vault on behalf of account\\n    /// @param account Address of account to update\\n    /// @param vault Address of vault to update\\n    /// @param depositAssets Amount of assets to deposit into vault\\n    /// @param redeemShares Amount of shares to redeem from vault\\n    /// @param claimAssets Amount of assets to claim from vault\\n    /// @param wrap Whether to wrap assets before depositing\\n    function _vaultUpdate(\\n        address account,\\n        IVault vault,\\n        UFixed6 depositAssets,\\n        UFixed6 redeemShares,\\n        UFixed6 claimAssets,\\n        bool wrap\\n    ) internal isVaultInstance(vault) {\\n        if (!depositAssets.isZero()) {\\n            _deposit(account, depositAssets, wrap);\\n        }\\n\\n        UFixed18 balanceBefore = DSU.balanceOf();\\n\\n        vault.update(account, depositAssets, redeemShares, claimAssets);\\n\\n        // handle socialization, settlement fees, and magic values\\n        UFixed6 claimAmount = claimAssets.isZero() ?\\n            UFixed6Lib.ZERO :\\n            UFixed6Lib.from(DSU.balanceOf().sub(balanceBefore));\\n\\n        if (!claimAmount.isZero()) {\\n            _withdraw(account, claimAmount, wrap);\\n        }\\n    }\\n\\n    /// @notice Helper to max approve DSU for usage in a market or vault deployed by the registered factories\\n    /// @param target Market or Vault to approve\\n    function _approve(address target) internal {\\n        if (\\n            !marketFactory.instances(IInstance(target)) &&\\n            !vaultFactory.instances(IInstance(target))\\n        ) revert MultiInvokerInvalidInstanceError();\\n\\n        DSU.approve(target);\\n    }\\n\\n    /// @notice Charges an interface fee from collateral in this address during an update to a receiver\\n    /// @param account Account to charge fee from\\n    /// @param market Market to charge fee from\\n    /// @param interfaceFee Interface fee to charge\\n    function _chargeFee(address account, IMarket market, InterfaceFee memory interfaceFee) internal {\\n        if (interfaceFee.amount.isZero()) return;\\n        _marketWithdraw(market, account, interfaceFee.amount);\\n\\n        if (interfaceFee.unwrap) _unwrap(interfaceFee.receiver, UFixed18Lib.from(interfaceFee.amount));\\n        else DSU.push(interfaceFee.receiver, UFixed18Lib.from(interfaceFee.amount));\\n\\n        emit InterfaceFeeCharged(account, market, interfaceFee);\\n    }\\n\\n    /// @notice Claims market fees, unwraps DSU, and pushes USDC to fee earner\\n    /// @param market Market from which fees should be claimed\\n    /// @param account Address of the user who earned fees\\n    /// @param unwrap Set true to unwrap DSU to USDC when withdrawing\\n    function _claimFee(address account, IMarket market, bool unwrap) internal isMarketInstance(market) {\\n        UFixed6 claimAmount = market.claimFee(account);\\n        _withdraw(account, claimAmount, unwrap);\\n    }\\n\\n    /// @notice Pull DSU or wrap and deposit USDC from `account` to this address for market usage\\n    /// @param account Account to pull DSU or USDC from\\n    /// @param amount Amount to transfer\\n    /// @param wrap Flag to wrap USDC to DSU\\n    function _deposit(address account, UFixed6 amount, bool wrap) internal {\\n        if (wrap) {\\n            USDC.pull(account, amount);\\n            _wrap(address(this), UFixed18Lib.from(amount));\\n        } else {\\n            DSU.pull(account, UFixed18Lib.from(amount));\\n        }\\n    }\\n\\n    /// @notice Push DSU or unwrap DSU to push USDC from this address to `account`\\n    /// @param account Account to push DSU or USDC to\\n    /// @param amount Amount to transfer\\n    /// @param unwrap flag to unwrap DSU to USDC\\n    function _withdraw(address account, UFixed6 amount, bool unwrap) internal {\\n        if (unwrap) {\\n            _unwrap(account, UFixed18Lib.from(amount));\\n        } else {\\n            DSU.push(account, UFixed18Lib.from(amount));\\n        }\\n    }\\n\\n    /// @notice Helper function to wrap `amount` USDC from `address(this)` into DSU using the batcher or reserve\\n    /// @param receiver Address to receive the DSU\\n    /// @param amount Amount of USDC to wrap\\n    function _wrap(address receiver, UFixed18 amount) internal {\\n        // If the batcher is 0 or  doesn't have enough for this wrap, go directly to the reserve\\n        if (address(batcher) == address(0) || amount.gt(DSU.balanceOf(address(batcher)))) {\\n            reserve.mint(amount);\\n            if (receiver != address(this)) DSU.push(receiver, amount);\\n        } else {\\n            // Wrap the USDC into DSU and return to the receiver\\n            batcher.wrap(amount, receiver);\\n        }\\n    }\\n\\n    /// @notice Helper function to unwrap `amount` DSU into USDC and send to `receiver`\\n    /// @param receiver Address to receive the USDC\\n    /// @param amount Amount of DSU to unwrap\\n    function _unwrap(address receiver, UFixed18 amount) internal {\\n        // If the batcher is 0 or doesn't have enough for this unwrap, go directly to the reserve\\n        if (address(batcher) == address(0) || amount.gt(UFixed18Lib.from(USDC.balanceOf(address(batcher))))) {\\n            reserve.redeem(amount);\\n            if (receiver != address(this)) USDC.push(receiver, UFixed6Lib.from(amount));\\n        } else {\\n            // Unwrap the DSU into USDC and return to the receiver\\n            batcher.unwrap(amount, receiver);\\n        }\\n    }\\n\\n    /// @notice Helper function to commit a price to an oracle\\n    /// @param oracleProviderFactory Address of oracle provider factory\\n    /// @param value The ether value to pass on with the commit sub-call\\n    /// @param version Version of oracle to commit to\\n    /// @param data Data to commit to oracle\\n    /// @param revertOnFailure Whether to revert on sub-call failure\\n    function _commitPrice(\\n        address oracleProviderFactory,\\n        uint256 value,\\n        bytes32[] memory ids,\\n        uint256 version,\\n        bytes memory data,\\n        bool revertOnFailure\\n    ) internal {\\n        UFixed18 balanceBefore = DSU.balanceOf();\\n\\n        try IPythFactory(oracleProviderFactory).commit{value: value}(ids, version, data) {\\n            // Return through keeper fee if any\\n            DSU.push(msg.sender, DSU.balanceOf().sub(balanceBefore));\\n        } catch (bytes memory reason) {\\n            if (revertOnFailure) Address.verifyCallResult(false, reason, \\\"\\\");\\n        }\\n    }\\n\\n    /// @notice executes an `account's` open order for a `market` and pays a fee to `msg.sender`\\n    /// @param account Account to execute order of\\n    /// @param market Market to execute order for\\n    /// @param nonce Id of open order to index\\n    function _executeOrder(address account, IMarket market, uint256 nonce) internal {\\n        if (!canExecuteOrder(account, market, nonce)) revert MultiInvokerCantExecuteError();\\n\\n        TriggerOrder memory order = orders(account, market, nonce);\\n\\n        _handleKeeperFee(\\n            KeepConfig(\\n                UFixed18Lib.ZERO,\\n                keepBufferBase,\\n                UFixed18Lib.ZERO,\\n                keepBufferCalldata\\n            ),\\n            0,\\n            msg.data[0:0],\\n            0,\\n            abi.encode(account, market, order.fee)\\n        );\\n\\n        _marketSettle(market, account);\\n\\n        Order memory pending = market.pendings(account);\\n        Position memory currentPosition = market.positions(account);\\n        currentPosition.update(pending);\\n\\n        Fixed6 collateral = order.execute(currentPosition);\\n\\n        _update(\\n            account,\\n            market,\\n            currentPosition.maker,\\n            currentPosition.long,\\n            currentPosition.short,\\n            collateral,\\n            true,\\n            order.interfaceFee1,\\n            order.interfaceFee2\\n        );\\n\\n        delete _orders[account][market][nonce];\\n        emit OrderExecuted(account, market, nonce);\\n    }\\n\\n    /// @notice Helper function to raise keeper fee\\n    /// @param keeperFee Keeper fee to raise\\n    /// @param data Data to raise keeper fee with\\n    /// @return Amount of keeper fee raised\\n    function _raiseKeeperFee(UFixed18 keeperFee, bytes memory data) internal virtual override returns (UFixed18) {\\n        (address account, IMarket market, UFixed6 fee) = abi.decode(data, (address, IMarket, UFixed6));\\n        UFixed6 raisedKeeperFee = UFixed6Lib.from(keeperFee, true).min(fee);\\n        _marketWithdraw(market, account, raisedKeeperFee);\\n\\n        return UFixed18Lib.from(raisedKeeperFee);\\n    }\\n\\n    /// @notice Places order on behalf of account from the invoker\\n    /// @param account Account to place order for\\n    /// @param market Market to place order in\\n    /// @param order Order state to place\\n    function _placeOrder(\\n        address account,\\n        IMarket market,\\n        TriggerOrder memory order\\n    ) internal isMarketInstance(market) {\\n        if (order.fee.isZero()) revert MultiInvokerInvalidOrderError();\\n        if (order.comparison != -1 && order.comparison != 1) revert MultiInvokerInvalidOrderError();\\n        if (\\n            order.side > 3 ||                                       // Invalid side\\n            (order.side == 3 && order.delta.gte(Fixed6Lib.ZERO))    // Disallow placing orders that increase collateral\\n        ) revert MultiInvokerInvalidOrderError();\\n\\n        _orders[account][market][++latestNonce].store(order);\\n        emit OrderPlaced(account, market, latestNonce, order);\\n    }\\n\\n    /// @notice Cancels an open order for account\\n    /// @param account Account to cancel order for\\n    /// @param market Market order is open in\\n    /// @param nonce UID of order\\n    function _cancelOrder(address account, IMarket market, uint256 nonce) internal {\\n        delete _orders[account][market][nonce];\\n        emit OrderCancelled(account, market, nonce);\\n    }\\n\\n    /// @notice Withdraws `withdrawal` from `account`'s `market` position\\n    /// @param market Market to withdraw from\\n    /// @param account Account to withdraw from\\n    /// @param withdrawal Amount to withdraw\\n    function _marketWithdraw(IMarket market, address account, UFixed6 withdrawal) private {\\n        market.update(account, UFixed6Lib.MAX, UFixed6Lib.MAX, UFixed6Lib.MAX, Fixed6Lib.from(-1, withdrawal), false);\\n    }\\n\\n    /// @notice Settles `account`'s `market` position\\n    /// @param market Market to settle\\n    /// @param account Account to settle\\n    function _marketSettle(IMarket market, address account) private {\\n        market.settle(account);\\n    }\\n\\n    /// @notice Target market must be created by MarketFactory\\n    modifier isMarketInstance(IMarket market) {\\n        if (!marketFactory.instances(market))\\n            revert MultiInvokerInvalidInstanceError();\\n        _;\\n    }\\n\\n    /// @notice Target vault must be created by VaultFactory\\n    modifier isVaultInstance(IVault vault) {\\n        if (!vaultFactory.instances(vault))\\n            revert MultiInvokerInvalidInstanceError();\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0x3287d007a4db491996b32394180ecad25966549305f6465a55d580630d22cd4a\",\"license\":\"Apache-2.0\"},\"@equilibria/perennial-v2-extensions/contracts/MultiInvoker_Arbitrum.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.24;\\n\\nimport \\\"@equilibria/root/attribute/Kept/Kept_Arbitrum.sol\\\";\\nimport \\\"./MultiInvoker.sol\\\";\\n\\n/// @title MultiInvoker_Arbitrum\\n/// @notice Arbitrum Kept MultiInvoker implementation.\\n/// @dev Additionally incentivizes keepers with L1 rollup fees according to the Arbitrum spec\\ncontract MultiInvoker_Arbitrum is MultiInvoker, Kept_Arbitrum {\\n    constructor(\\n        Token6 usdc_,\\n        Token18 dsu_,\\n        IFactory marketFactory_,\\n        IFactory vaultFactory_,\\n        IBatcher batcher_,\\n        IEmptySetReserve reserve_,\\n        uint256 keepBufferBase_,\\n        uint256 keepBufferCalldata_\\n    ) MultiInvoker(\\n        usdc_,\\n        dsu_,\\n        marketFactory_,\\n        vaultFactory_,\\n        batcher_,\\n        reserve_,\\n        keepBufferBase_,\\n        keepBufferCalldata_\\n    ) { }\\n\\n    /// @dev Use the Kept_Arbitrum implementation for calculating the dynamic fee\\n    function _calldataFee(\\n        bytes memory applicableCalldata,\\n        UFixed18 multiplierCalldata,\\n        uint256 bufferCalldata\\n    ) internal view override(Kept_Arbitrum, Kept) returns (UFixed18) {\\n        return Kept_Arbitrum._calldataFee(applicableCalldata, multiplierCalldata, bufferCalldata);\\n    }\\n\\n    /// @dev Use the PythOracle implementation for raising the keeper fee\\n    function _raiseKeeperFee(\\n        UFixed18 amount,\\n        bytes memory data\\n    ) internal override(MultiInvoker, Kept) returns (UFixed18) {\\n        return MultiInvoker._raiseKeeperFee(amount, data);\\n    }\\n}\",\"keccak256\":\"0xa7e3948da39d715d8676d71a9261ba9699a3182d70ac58590be27923d4cd7fd7\",\"license\":\"Apache-2.0\"},\"@equilibria/perennial-v2-extensions/contracts/interfaces/IMultiInvoker.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.13;\\nimport {\\n    IFactory,\\n    IMarket,\\n    Position,\\n    Local,\\n    UFixed18Lib,\\n    UFixed18,\\n    OracleVersion,\\n    RiskParameter\\n} from \\\"@equilibria/perennial-v2/contracts/interfaces/IMarket.sol\\\";\\nimport { IBatcher } from \\\"@equilibria/emptyset-batcher/interfaces/IBatcher.sol\\\";\\nimport { IEmptySetReserve } from \\\"@equilibria/emptyset-batcher/interfaces/IEmptySetReserve.sol\\\";\\nimport { UFixed6, UFixed6Lib } from \\\"@equilibria/root/number/types/UFixed6.sol\\\";\\nimport { Fixed6, Fixed6Lib } from \\\"@equilibria/root/number/types/Fixed6.sol\\\";\\nimport { Token6 } from \\\"@equilibria/root/token/types/Token6.sol\\\";\\nimport { Token18 } from \\\"@equilibria/root/token/types/Token18.sol\\\";\\nimport { TriggerOrder } from \\\"../types/TriggerOrder.sol\\\";\\nimport { InterfaceFee } from \\\"../types/InterfaceFee.sol\\\";\\n\\ninterface IMultiInvoker {\\n    enum PerennialAction {\\n        NO_OP,           // 0\\n        UPDATE_POSITION, // 1\\n        UPDATE_VAULT,    // 2\\n        PLACE_ORDER,     // 3\\n        CANCEL_ORDER,    // 4\\n        EXEC_ORDER,      // 5\\n        COMMIT_PRICE,    // 6\\n        __LIQUIDATE__DEPRECATED,\\n        APPROVE,         // 8\\n        UPDATE_INTENT,   // 9\\n        CLAIM_FEE        // 10\\n    }\\n\\n    struct Invocation {\\n        PerennialAction action;\\n        bytes args;\\n    }\\n\\n    event OperatorUpdated(address indexed account, address indexed operator, bool newEnabled);\\n    event KeeperFeeCharged(address indexed account, address indexed market, address indexed to, UFixed6 fee);\\n    event OrderPlaced(address indexed account, IMarket indexed market, uint256 indexed nonce, TriggerOrder order);\\n    event OrderExecuted(address indexed account, IMarket indexed market, uint256 nonce);\\n    event OrderCancelled(address indexed account, IMarket indexed market, uint256 nonce);\\n    event InterfaceFeeCharged(address indexed account, IMarket indexed market, InterfaceFee fee);\\n\\n    // sig: 0x42ecdedb\\n    error MultiInvokerUnauthorizedError();\\n    // sig: 0x88d67968\\n    error MultiInvokerOrderMustBeSingleSidedError();\\n    // sig: 0xbccd78e7\\n    error MultiInvokerMaxFeeExceededError();\\n    // sig: 0x47b7c1b0\\n    error MultiInvokerInvalidInstanceError();\\n    // sig: 0xb6befb58\\n    error MultiInvokerInvalidOrderError();\\n    // sig: 0x6f462962\\n    error MultiInvokerCantExecuteError();\\n\\n    function updateOperator(address operator, bool newEnabled) external;\\n    function operators(address account, address operator) external view returns (bool);\\n    function invoke(address account, Invocation[] calldata invocations) external payable;\\n    function invoke(Invocation[] calldata invocations) external payable;\\n    function marketFactory() external view returns (IFactory);\\n    function vaultFactory() external view returns (IFactory);\\n    function batcher() external view returns (IBatcher);\\n    function reserve() external view returns (IEmptySetReserve);\\n    function keepBufferBase() external view returns (uint256);\\n    function keepBufferCalldata() external view returns (uint256);\\n    function latestNonce() external view returns (uint256);\\n    function orders(address account, IMarket market, uint256 nonce) external view returns (TriggerOrder memory);\\n    function canExecuteOrder(address account, IMarket market, uint256 nonce) external view returns (bool);\\n}\",\"keccak256\":\"0xf91307a8e2f2b03292e95c59ebe0b0f326080535a8ea32340dab2f4c6cd86079\",\"license\":\"Apache-2.0\"},\"@equilibria/perennial-v2-extensions/contracts/types/InterfaceFee.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.13;\\nimport { UFixed6, UFixed6Lib } from \\\"@equilibria/root/number/types/UFixed6.sol\\\";\\n\\n/// @dev Interface fee type\\nstruct InterfaceFee {\\n    /// @dev The amount of the fee\\n    UFixed6 amount;\\n\\n    /// @dev The address to send the fee to\\n    address receiver;\\n\\n    /// @dev Whether or not to unwrap the fee\\n    bool unwrap;\\n}\\n\",\"keccak256\":\"0xf8e933c271bca718b4f5a64c3a298781a8dcf26ce7406b63848544d0ceb3ce28\",\"license\":\"Apache-2.0\"},\"@equilibria/perennial-v2-extensions/contracts/types/TriggerOrder.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.13;\\n\\nimport \\\"@equilibria/root/number/types/UFixed6.sol\\\";\\nimport \\\"@equilibria/perennial-v2/contracts/interfaces/IMarket.sol\\\";\\nimport \\\"@equilibria/perennial-v2/contracts/types/Position.sol\\\";\\nimport \\\"./InterfaceFee.sol\\\";\\n\\nstruct TriggerOrder {\\n    uint8 side;\\n    int8 comparison;\\n    UFixed6 fee;\\n    Fixed6 price;\\n    Fixed6 delta;\\n    InterfaceFee interfaceFee1;\\n    InterfaceFee interfaceFee2;\\n}\\nusing TriggerOrderLib for TriggerOrder global;\\nstruct StoredTriggerOrder {\\n    /* slot 0 */\\n    uint8 side;         // 0 = maker, 1 = long, 2 = short\\n    int8 comparison;    // -2 = lt, -1 = lte, 0 = eq, 1 = gte, 2 = gt\\n    uint64 fee;         // <= 18.44tb\\n    int64 price;        // <= 9.22t\\n    int64 delta;        // <= 9.22t\\n    bytes6 __unallocated0__;\\n\\n    /* slot 1 */\\n    address interfaceFeeReceiver1;\\n    uint48 interfaceFeeAmount1;      // <= 281m\\n    bool interfaceFeeUnwrap1;\\n    bytes5 __unallocated1__;\\n\\n    /* slot 2 */\\n    address interfaceFeeReceiver2;\\n    uint48 interfaceFeeAmount2;      // <= 281m\\n    bool interfaceFeeUnwrap2;\\n    bytes5 __unallocated2__;\\n}\\nstruct TriggerOrderStorage { StoredTriggerOrder value; }\\nusing TriggerOrderStorageLib for TriggerOrderStorage global;\\n\\n/// @title TriggerOrderLib\\n/// @dev (external-unsafe): this library must be used internally only\\n/// @notice Library for TriggerOrder logic and data.\\nlibrary TriggerOrderLib {\\n    /// @notice Returns whether the trigger order is fillable at the latest price\\n    /// @param self The trigger order\\n    /// @param latestVersion The latest oracle version\\n    /// @return Whether the trigger order is fillable\\n    function fillable(TriggerOrder memory self, OracleVersion memory latestVersion) internal pure returns (bool) {\\n        if (!latestVersion.valid) return false;\\n        if (self.comparison == 1) return latestVersion.price.gte(self.price);\\n        if (self.comparison == -1) return latestVersion.price.lte(self.price);\\n        return false;\\n    }\\n\\n    /// @notice Executes the trigger order on the given position\\n    /// @param self The trigger order\\n    /// @param currentPosition The current position\\n    /// @return collateral The collateral delta, if any\\n    function execute(\\n        TriggerOrder memory self,\\n        Position memory currentPosition\\n    ) internal pure returns (Fixed6 collateral) {\\n        // update position\\n        if (self.side == 0)\\n            currentPosition.maker = self.delta.isZero() ?\\n                UFixed6Lib.ZERO :\\n                UFixed6Lib.from(Fixed6Lib.from(currentPosition.maker).add(self.delta));\\n        if (self.side == 1)\\n            currentPosition.long = self.delta.isZero() ?\\n                UFixed6Lib.ZERO :\\n                UFixed6Lib.from(Fixed6Lib.from(currentPosition.long).add(self.delta));\\n        if (self.side == 2)\\n            currentPosition.short = self.delta.isZero() ?\\n                UFixed6Lib.ZERO :\\n                UFixed6Lib.from(Fixed6Lib.from(currentPosition.short).add(self.delta));\\n\\n        // Handles collateral withdrawal magic value\\n        if (self.side == 3) collateral = (self.delta.eq(Fixed6.wrap(type(int64).min)) ? Fixed6Lib.MIN : self.delta);\\n    }\\n}\\n\\n/// @dev (external-safe): this library is safe to externalize\\nlibrary TriggerOrderStorageLib {\\n    // sig: 0xf3469aa7\\n    error TriggerOrderStorageInvalidError();\\n\\n    function read(TriggerOrderStorage storage self) internal view returns (TriggerOrder memory) {\\n        StoredTriggerOrder memory storedValue = self.value;\\n        return TriggerOrder(\\n            uint8(storedValue.side),\\n            int8(storedValue.comparison),\\n            UFixed6.wrap(uint256(storedValue.fee)),\\n            Fixed6.wrap(int256(storedValue.price)),\\n            Fixed6.wrap(int256(storedValue.delta)),\\n            InterfaceFee(\\n                UFixed6.wrap(uint256(storedValue.interfaceFeeAmount1)),\\n                storedValue.interfaceFeeReceiver1,\\n                storedValue.interfaceFeeUnwrap1\\n            ),\\n            InterfaceFee(\\n                UFixed6.wrap(uint256(storedValue.interfaceFeeAmount2)),\\n                storedValue.interfaceFeeReceiver2,\\n                storedValue.interfaceFeeUnwrap2\\n            )\\n        );\\n    }\\n\\n    function store(TriggerOrderStorage storage self, TriggerOrder memory newValue) internal {\\n        if (newValue.side > type(uint8).max) revert TriggerOrderStorageInvalidError();\\n        if (newValue.comparison > type(int8).max) revert TriggerOrderStorageInvalidError();\\n        if (newValue.comparison < type(int8).min) revert TriggerOrderStorageInvalidError();\\n        if (newValue.fee.gt(UFixed6.wrap(type(uint64).max))) revert TriggerOrderStorageInvalidError();\\n        if (newValue.price.gt(Fixed6.wrap(type(int64).max))) revert TriggerOrderStorageInvalidError();\\n        if (newValue.price.lt(Fixed6.wrap(type(int64).min))) revert TriggerOrderStorageInvalidError();\\n        if (newValue.delta.gt(Fixed6.wrap(type(int64).max))) revert TriggerOrderStorageInvalidError();\\n        if (newValue.delta.lt(Fixed6.wrap(type(int64).min))) revert TriggerOrderStorageInvalidError();\\n        if (newValue.interfaceFee1.amount.gt(UFixed6.wrap(type(uint48).max))) revert TriggerOrderStorageInvalidError();\\n        if (newValue.interfaceFee2.amount.gt(UFixed6.wrap(type(uint48).max))) revert TriggerOrderStorageInvalidError();\\n\\n        self.value = StoredTriggerOrder(\\n            uint8(newValue.side),\\n            int8(newValue.comparison),\\n            uint64(UFixed6.unwrap(newValue.fee)),\\n            int64(Fixed6.unwrap(newValue.price)),\\n            int64(Fixed6.unwrap(newValue.delta)),\\n            bytes6(0),\\n            newValue.interfaceFee1.receiver,\\n            uint48(UFixed6.unwrap(newValue.interfaceFee1.amount)),\\n            newValue.interfaceFee1.unwrap,\\n            bytes5(0),\\n            newValue.interfaceFee2.receiver,\\n            uint48(UFixed6.unwrap(newValue.interfaceFee2.amount)),\\n            newValue.interfaceFee2.unwrap,\\n            bytes5(0)\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0xe7986d1f54bfabaea24d26787bb3a3a53531bbeff57d8eca9c68801e3aad7e4c\",\"license\":\"Apache-2.0\"},\"@equilibria/perennial-v2-oracle/contracts/Oracle.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.24;\\n\\nimport \\\"@equilibria/root/attribute/Instance.sol\\\";\\nimport \\\"@equilibria/perennial-v2/contracts/interfaces/IOracleProviderFactory.sol\\\";\\nimport \\\"@equilibria/perennial-v2/contracts/interfaces/IMarket.sol\\\";\\nimport \\\"./interfaces/IOracle.sol\\\";\\nimport \\\"./interfaces/IOracleFactory.sol\\\";\\n\\n/// @title Oracle\\n/// @notice The top-level oracle contract that implements an oracle provider interface.\\n/// @dev Manages swapping between different underlying oracle provider interfaces over time.\\ncontract Oracle is IOracle, Instance {\\n    /// @notice A historical mapping of underlying oracle providers\\n    mapping(uint256 => Epoch) public oracles;\\n\\n    /// @notice The global state of the oracle\\n    OracleGlobal public global;\\n\\n    /// @notice The market associated with this oracle\\n    IMarket public market;\\n\\n    /// @notice The beneficiary of the oracle fee\\n    address public beneficiary;\\n\\n    /// @notice The name of the oracle\\n    string public name;\\n\\n    /// @notice Initializes the contract state\\n    /// @param initialProvider The initial oracle provider\\n    /// @param name_ The name of the oracle\\n    function initialize(IOracleProvider initialProvider, string calldata name_) external initializer(1) {\\n        __Instance__initialize();\\n        _updateCurrent(initialProvider);\\n        _updateLatest(initialProvider.latest());\\n        name = name_;\\n    }\\n\\n    /// @notice Updates the current oracle provider\\n    /// @dev Both the current and new oracle provider must have the same current\\n    /// @param newProvider The new oracle provider\\n    function update(IOracleProvider newProvider) external onlyFactory {\\n        _updateCurrent(newProvider);\\n        _updateLatest(newProvider.latest());\\n    }\\n\\n    /// @notice Registers the market associated with this oracle\\n    /// @param newMarket The market to register\\n    function register(IMarket newMarket) external onlyOwner {\\n        market = newMarket;\\n        emit MarketUpdated(newMarket);\\n    }\\n\\n    /// @notice Updates the beneficiary of the oracle fee\\n    /// @param newBeneficiary The new beneficiary\\n    function updateBeneficiary(address newBeneficiary) external onlyOwner {\\n        beneficiary = newBeneficiary;\\n        emit BeneficiaryUpdated(newBeneficiary);\\n    }\\n\\n    /// @notice Updates the name of the oracle\\n    /// @dev Allows setting the name for previously deployed oracles (v2.3 migration)\\n    /// @param newName The new oracle name\\n    function updateName(string calldata newName) external onlyOwner {\\n        name = newName;\\n    }\\n\\n    /// @notice Requests a new version at the current timestamp\\n    /// @param account Original sender to optionally use for callbacks\\n    function request(IMarket, address account) external onlyMarket {\\n        (OracleVersion memory latestVersion, uint256 currentTimestamp) = oracles[global.current].provider.status();\\n\\n        oracles[\\n            (currentTimestamp > oracles[global.latest].timestamp) ? global.current : global.latest\\n        ].provider.request(market, account);\\n\\n        oracles[global.current].timestamp = uint96(currentTimestamp);\\n        _updateLatest(latestVersion);\\n    }\\n\\n    /// @notice Returns the latest committed version as well as the current timestamp\\n    /// @return latestVersion The latest committed version\\n    /// @return currentTimestamp The current timestamp\\n    function status() external view returns (OracleVersion memory latestVersion, uint256 currentTimestamp) {\\n        (latestVersion, currentTimestamp) = oracles[global.current].provider.status();\\n        latestVersion = _handleLatest(latestVersion);\\n    }\\n\\n    /// @notice Returns the latest committed version\\n    function latest() public view returns (OracleVersion memory) {\\n        return _handleLatest(oracles[global.current].provider.latest());\\n    }\\n\\n    /// @notice Returns the current value\\n    function current() public view returns (uint256) {\\n        return oracles[global.current].provider.current();\\n    }\\n\\n    /// @notice Returns the oracle version at a given timestamp\\n    /// @param timestamp The timestamp to query\\n    /// @return atVersion The oracle version at the given timestamp\\n    /// @return atReceipt The oracle receipt at the given timestamp\\n    function at(uint256 timestamp) public view returns (OracleVersion memory atVersion, OracleReceipt memory atReceipt) {\\n        if (timestamp == 0) return (atVersion, atReceipt);\\n\\n        IOracleProvider provider = oracles[global.current].provider;\\n        for (uint256 i = global.current - 1; i > 0; i--) {\\n            if (timestamp > uint256(oracles[i].timestamp)) break;\\n            provider = oracles[i].provider;\\n        }\\n\\n        (atVersion, atReceipt) = provider.at(timestamp);\\n    }\\n\\n    /// @notice Withdraws the accrued oracle fees to the beneficiary\\n    /// @param token The token to withdraw\\n    function withdraw(Token18 token) external onlyBeneficiary {\\n        token.push(beneficiary);\\n    }\\n\\n    /// @notice Claims an amount of incentive tokens, to be paid out as a fee to the keeper\\n    /// @dev Will claim all outstanding oracle fees in the underlying market and leave unrequested fees for the beneficiary.\\n    ///      Can only be called by a registered underlying oracle provider factory.\\n    /// @param settlementFeeRequested The fixed settmentment fee requested by the oracle\\n    function claimFee(UFixed6 settlementFeeRequested) external onlySubOracle {\\n        // claim the fee from the market\\n        UFixed6 feeReceived = market.claimFee(address(this));\\n\\n        // return the settlement fee portion to the sub oracle's factory\\n        market.token().push(msg.sender, UFixed18Lib.from(settlementFeeRequested));\\n\\n        emit FeeReceived(settlementFeeRequested, feeReceived.sub(settlementFeeRequested));\\n    }\\n\\n    /// @notice Handles update the oracle to the new provider\\n    /// @param newProvider The new oracle provider\\n    function _updateCurrent(IOracleProvider newProvider) private {\\n        // oracle must not already be updating\\n        if (global.current != global.latest) revert OracleOutOfSyncError();\\n\\n        // if the latest version of the underlying oracle is further ahead than its latest request update its timestamp\\n        if (global.current != 0) {\\n            OracleVersion memory latestVersion = oracles[global.current].provider.latest();\\n            if (latestVersion.timestamp > oracles[global.current].timestamp)\\n                oracles[global.current].timestamp = uint96(latestVersion.timestamp);\\n        }\\n\\n        // add the new oracle registration\\n        oracles[++global.current] = Epoch(newProvider, uint96(newProvider.current()));\\n        emit OracleUpdated(newProvider);\\n    }\\n\\n    /// @notice Handles updating the latest oracle to the current if it is ready\\n    /// @param currentOracleLatestVersion The latest version from the current oracle\\n    function _updateLatest(OracleVersion memory currentOracleLatestVersion) private {\\n        if (_latestStale(currentOracleLatestVersion)) global.latest = global.current;\\n    }\\n\\n    /// @notice Handles overriding the latest version\\n    /// @dev Applicable if we haven't yet switched over to the current oracle from the latest oracle\\n    /// @param currentOracleLatestVersion The latest version from the current oracle\\n    /// @return latestVersion The latest version\\n    function _handleLatest(\\n        OracleVersion memory currentOracleLatestVersion\\n    ) private view returns (OracleVersion memory latestVersion) {\\n        if (global.current == global.latest) return currentOracleLatestVersion;\\n\\n        bool isLatestStale = _latestStale(currentOracleLatestVersion);\\n        latestVersion = isLatestStale ? currentOracleLatestVersion : oracles[global.latest].provider.latest();\\n\\n        uint256 latestOracleTimestamp =\\n            uint256(isLatestStale ? oracles[global.current].timestamp : oracles[global.latest].timestamp);\\n        if (!isLatestStale && latestVersion.timestamp > latestOracleTimestamp)\\n            (latestVersion, ) = at(latestOracleTimestamp);\\n    }\\n\\n    /// @notice Returns whether the latest oracle is ready to be updated\\n    /// @param currentOracleLatestVersion The latest version from the current oracle\\n    /// @return Whether the latest oracle is ready to be updated\\n    function _latestStale(OracleVersion memory currentOracleLatestVersion) private view returns (bool) {\\n        if (global.current == global.latest) return false;\\n        if (global.latest == 0) return true;\\n\\n        if (uint256(oracles[global.latest].timestamp) > oracles[global.latest].provider.latest().timestamp) return false;\\n        if (uint256(oracles[global.latest].timestamp) >= currentOracleLatestVersion.timestamp) return false;\\n\\n        return true;\\n    }\\n\\n    /// @dev Only if the caller is the beneficiary\\n    modifier onlyBeneficiary {\\n        if (msg.sender != beneficiary) revert OracleNotBeneficiaryError();\\n        _;\\n    }\\n\\n    /// @dev Only if the caller is the registered market\\n    modifier onlyMarket {\\n        if (msg.sender != address(market)) revert OracleNotMarketError();\\n        _;\\n    }\\n\\n    /// @dev Only if the caller is the registered sub oracle\\n    modifier onlySubOracle {\\n        if (\\n            msg.sender != address(oracles[global.current].provider) &&\\n            msg.sender != address(oracles[global.latest].provider)\\n        ) revert OracleNotSubOracleError();\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0xee758443bfaf5a0e99133d7a9e6bebeb7254187da9d593b6377555635b71a8b0\",\"license\":\"Apache-2.0\"},\"@equilibria/perennial-v2-oracle/contracts/interfaces/IKeeperFactory.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.13;\\n\\nimport \\\"@equilibria/root/token/types/Token18.sol\\\";\\nimport \\\"@equilibria/root/attribute/interfaces/IFactory.sol\\\";\\nimport \\\"@equilibria/perennial-v2/contracts/interfaces/IOracleProviderFactory.sol\\\";\\nimport { IGasOracle } from \\\"@equilibria/root/gas/GasOracle.sol\\\";\\nimport \\\"./IKeeperOracle.sol\\\";\\nimport \\\"./IOracleFactory.sol\\\";\\nimport \\\"./IPayoffProvider.sol\\\";\\nimport { KeeperOracleParameter } from \\\"../keeper/types/KeeperOracleParameter.sol\\\";\\n\\ninterface IKeeperFactory is IOracleProviderFactory, IFactory {\\n    struct PayoffDefinition {\\n        IPayoffProvider provider;\\n        int16 decimals;\\n    }\\n\\n    struct PriceRecord {\\n        uint256 timestamp;\\n        Fixed18 price;\\n        uint256 cost;\\n    }\\n\\n    event OracleAssociated(bytes32 indexed id, bytes32 indexed underlyingId);\\n    event ParameterUpdated(KeeperOracleParameter newParameter);\\n    event PayoffRegistered(IPayoffProvider indexed payoff);\\n\\n    // sig: 0xe65b0914\\n    error KeeperFactoryNotInstanceError();\\n    // sig: 0xef8e774c\\n    error KeeperFactoryInvalidParameterError();\\n    // sig: 0x953ec95c\\n    error KeeperFactoryAlreadyCreatedError();\\n    // sig: 0x7e387175\\n    error KeeperFactoryNotCreatedError();\\n    // sig: 0x131b567b\\n    error KeeperFactoryInvalidIdError();\\n    // sig: 0xb043fd7b\\n    error KeeperFactoryInvalidSettleError();\\n    // sig: 0xb2e11555\\n    error KeeperFactoryInvalidPayoffError();\\n    // sig: 0x0afa0593\\n    error KeeperFactoryVersionOutsideRangeError();\\n\\n    function initialize(IOracleFactory oracleFactory) external;\\n    function factoryType() external view returns (string memory);\\n    function commitmentGasOracle() external view returns (IGasOracle);\\n    function settlementGasOracle() external view returns (IGasOracle);\\n    function updateId(IOracleProvider oracleProvider, bytes32 oracleId) external;\\n    function register(IPayoffProvider payoff) external;\\n    function toUnderlyingId(bytes32 oracleId) external view returns (bytes32);\\n    function toUnderlyingPayoff(bytes32 oracleId) external view returns (PayoffDefinition memory payoff);\\n    function fromUnderlying(bytes32 underlyingId, IPayoffProvider payoff) external view returns (bytes32);\\n    function create(bytes32 oracleId, bytes32 underlyingId, PayoffDefinition memory payoff) external returns (IKeeperOracle oracle);\\n    function current() external view returns (uint256);\\n    function parameter() external view returns (KeeperOracleParameter memory);\\n    function updateParameter(uint256 newGranularity, UFixed6 newOracleFee, uint256 newValidFrom, uint256 newValidTo) external;\\n    function commit(bytes32[] memory oracleIds, uint256 version, bytes calldata data) external payable;\\n    function settle(bytes32[] memory oracleIds, uint256[] memory versions, uint256[] memory maxCounts) external;\\n}\\n\",\"keccak256\":\"0x48cd5339e00a99f7a02f0a812017b3007c7f2a513fd114bf2f837f17ab263e44\",\"license\":\"Apache-2.0\"},\"@equilibria/perennial-v2-oracle/contracts/interfaces/IKeeperOracle.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.13;\\n\\nimport \\\"@equilibria/root/attribute/interfaces/IInstance.sol\\\";\\nimport \\\"@equilibria/perennial-v2/contracts/interfaces/IOracleProvider.sol\\\";\\nimport \\\"@equilibria/perennial-v2/contracts/interfaces/IMarket.sol\\\";\\nimport \\\"../Oracle.sol\\\";\\nimport { PriceResponse } from \\\"../keeper/types/PriceResponse.sol\\\";\\n\\ninterface IKeeperOracle is IOracleProvider, IInstance {\\n    event CallbackRequested(SettlementCallback indexed callback);\\n    event CallbackFulfilled(SettlementCallback indexed callback);\\n    event OracleUpdated(IOracleProvider newOracle);\\n\\n    struct SettlementCallback {\\n        /// @dev The market to settle\\n        IMarket market;\\n\\n        /// @dev The account to settle\\n        address account;\\n\\n        /// @dev The version to settle for\\n        uint256 version;\\n    }\\n\\n    struct KeeperOracleGlobal {\\n        /// @dev The latest committed oracle version\\n        uint64 latestVersion;\\n\\n        /// @dev Index in `versions` of the most recent version requested\\n        uint64 currentIndex;\\n\\n        /// @dev Index in `versions` of the latest version a keeper has committed\\n        uint64 latestIndex;\\n    }\\n\\n    // sig: 0xb8499c31\\n    error KeeperOracleVersionOutsideRangeError();\\n    // sig: 0xce9529c8\\n    error KeeperOracleInvalidPriceError();\\n    //sig: 0x4889ef6f\\n    error KeeperOracleInvalidCallbackError();\\n    //sig: 0x7321f78c\\n    error KeeperOracleNoPriorRequestsError();\\n    //sig: 0xdcfc48f1\\n    error KeeperOracleNotOracleError();\\n\\n    function initialize() external;\\n    function register(IOracle newOracle) external;\\n    function commit(OracleVersion memory version, address receiver, uint256 value) external;\\n    function settle(uint256 version, uint256 maxCount) external;\\n    function next() external view returns (uint256);\\n    function localCallbacks(uint256 version) external view returns (address[] memory);\\n\\n    function timeout() external view returns (uint256);\\n    function oracle() external view returns (IOracle);\\n    function requests(uint256 index) external view returns (uint256);\\n    function responses(uint256 timestamp) external view returns (PriceResponse memory);\\n    function global() external view returns (KeeperOracleGlobal memory);\\n}\\n\",\"keccak256\":\"0x3ce8ae7d82c422ce7d57e361429a5e4e105284ea2099e2902c973f33e4bd76ec\",\"license\":\"Apache-2.0\"},\"@equilibria/perennial-v2-oracle/contracts/interfaces/IOracle.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.13;\\n\\nimport \\\"@equilibria/root/number/types/UFixed6.sol\\\";\\nimport \\\"@equilibria/root/token/types/Token18.sol\\\";\\nimport \\\"@equilibria/root/attribute/interfaces/IInstance.sol\\\";\\nimport \\\"@equilibria/perennial-v2/contracts/interfaces/IOracleProvider.sol\\\";\\n\\ninterface IOracle is IOracleProvider, IInstance {\\n    // sig: 0x8852e53b\\n    error OracleOutOfSyncError();\\n    // sig: 0x0f7338e5\\n    error OracleOutOfOrderCommitError();\\n    // sig: 0xb0850572\\n    error OracleNotSubOracleError();\\n    // sig: 0xc65186ee\\n    error OracleNotMarketError();\\n    // sig: 0x337304b2\\n    error OracleNotBeneficiaryError();\\n\\n    event OracleUpdated(IOracleProvider newProvider);\\n    event MarketUpdated(IMarket newMarket);\\n    event FeeReceived(UFixed6 settlementFee, UFixed6 oracleFee);\\n    event BeneficiaryUpdated(address newBeneficiary);\\n\\n    /// @dev The state for a single epoch\\n    struct Epoch {\\n        /// @dev The oracle provider for this epoch\\n        IOracleProvider provider;\\n\\n        /// @dev The last timestamp that this oracle provider is valid\\n        uint96 timestamp;\\n    }\\n\\n    /// @dev The global state for oracle\\n    struct OracleGlobal {\\n        /// @dev The current epoch\\n        uint128 current;\\n\\n        /// @dev The latest epoch\\n        uint128 latest;\\n    }\\n\\n    function initialize(IOracleProvider initialProvider, string calldata name_) external;\\n    function register(IMarket newMarket) external;\\n    function update(IOracleProvider newProvider) external;\\n    function updateBeneficiary(address newBeneficiary) external;\\n    function updateName(string calldata newName) external;\\n    function claimFee(UFixed6 settlementFeeRequested) external;\\n    function market() external view returns (IMarket);\\n    function withdraw(Token18 token) external;\\n    function beneficiary() external view returns (address);\\n}\",\"keccak256\":\"0xeb5235a836401522b4072cd103492de944833d51a1f2a84a587208dc65e12b6e\",\"license\":\"Apache-2.0\"},\"@equilibria/perennial-v2-oracle/contracts/interfaces/IOracleFactory.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.13;\\n\\nimport \\\"@equilibria/root/token/types/Token18.sol\\\";\\nimport \\\"@equilibria/root/attribute/interfaces/IFactory.sol\\\";\\nimport \\\"@equilibria/perennial-v2/contracts/interfaces/IOracleProviderFactory.sol\\\";\\nimport \\\"@equilibria/perennial-v2/contracts/interfaces/IMarket.sol\\\";\\nimport \\\"./IOracle.sol\\\";\\nimport { OracleParameter } from \\\"../types/OracleParameter.sol\\\";\\n\\ninterface IOracleFactory is IOracleProviderFactory, IFactory {\\n    event FactoryRegistered(IOracleProviderFactory factory);\\n    event CallerAuthorized(IFactory caller);\\n\\n    // sig: 0xe7911099\\n    error OracleFactoryInvalidIdError();\\n    // sig: 0xe232e366\\n    error OracleFactoryAlreadyCreatedError();\\n    // sig: 0xbbfaa925\\n    error OracleFactoryNotRegisteredError();\\n    // sig: 0xfeb0e18c\\n    error OracleFactoryNotCreatedError();\\n\\n    function factories(IOracleProviderFactory factory) external view returns (bool);\\n    function initialize() external;\\n    function parameter() external view returns (OracleParameter memory);\\n    function updateParameter(OracleParameter memory newParameter) external;\\n    function updateId(IOracleProvider oracleProvider, bytes32 id) external;\\n    function register(IOracleProviderFactory factory) external;\\n    function create(bytes32 id, IOracleProviderFactory factory, string calldata name) external returns (IOracle newOracle);\\n    function update(bytes32 id, IOracleProviderFactory factory) external;\\n    function withdraw(Token18 token) external;\\n}\\n\",\"keccak256\":\"0x409fa1d994735943720fb14cc783a1934f3fdd13fb89cdab6bd6b73061b39b09\",\"license\":\"Apache-2.0\"},\"@equilibria/perennial-v2-oracle/contracts/interfaces/IPayoffProvider.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.13;\\n\\nimport \\\"@equilibria/root/number/types/Fixed18.sol\\\";\\n\\ninterface IPayoffProvider {\\n    function payoff(Fixed18 price) external pure returns (Fixed18 payoff);\\n}\\n\",\"keccak256\":\"0x7f050c8d94445f50f5b3a1fee5f47441679ccec2022cb8cd8506524e7472874a\",\"license\":\"Apache-2.0\"},\"@equilibria/perennial-v2-oracle/contracts/interfaces/IPythFactory.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.13;\\n\\nimport \\\"./IKeeperFactory.sol\\\";\\n\\ninterface IPythFactory is IKeeperFactory {\\n    // sig: 0x22445848\\n    error PythFactoryInvalidIdError();\\n}\\n\\n/// @dev PythStaticFee interface, this is not exposed in the AbstractPyth contract\\ninterface IPythStaticFee {\\n    function singleUpdateFeeInWei() external view returns (uint);\\n}\\n\",\"keccak256\":\"0xfe983fa695d3312a498a68abe1f0ef48269df5d862a4f1638565d788265a2075\",\"license\":\"Apache-2.0\"},\"@equilibria/perennial-v2-oracle/contracts/keeper/types/KeeperOracleParameter.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.13;\\n\\nimport \\\"@equilibria/root/number/types/UFixed6.sol\\\";\\nimport \\\"@equilibria/perennial-v2/contracts/types/OracleVersion.sol\\\";\\n\\nstruct KeeperOracleParameter {\\n    /// @dev The latest granularity setting in seconds\\n    uint256 latestGranularity;\\n\\n    /// @dev The current granularity setting in seconds\\n    uint256 currentGranularity;\\n\\n    /// @dev The timestamp at which the current granularity setting becomes effective\\n    uint256 effectiveAfter;\\n\\n    /// @dev The relative oracle fee percentage of the request\\n    UFixed6 oracleFee;\\n\\n    /// @dev Seconds after version a committed price is valid\\n    uint256 validFrom;\\n\\n    /// @dev Seconds after version a committed price is valid until\\n    uint256 validTo;\\n}\\nstruct StoredKeeperOracleParameter {\\n    /* slot 0 (21) */\\n    uint16 latestGranularity;   // <= 65k\\n    uint16 currentGranularity;  // <= 65k\\n    uint32 effectiveAfter;      // <= 2038\\n    uint24 oracleFee;           // <= 100%\\n    uint16 validFrom;           // <= 65k\\n    uint16 validTo;             // <= 65k\\n}\\nstruct KeeperOracleParameterStorage { StoredKeeperOracleParameter value; }\\nusing KeeperOracleParameterStorageLib for KeeperOracleParameterStorage global;\\n\\n/// @dev (external-safe): this library is safe to externalize\\nlibrary KeeperOracleParameterStorageLib {\\n    // sig: 0xff590172\\n    error KeeperOracleParameterStorageInvalidError();\\n\\n    function read(KeeperOracleParameterStorage storage self) internal view returns (KeeperOracleParameter memory) {\\n        StoredKeeperOracleParameter memory storedValue = self.value;\\n        return KeeperOracleParameter(\\n            uint256(storedValue.latestGranularity),\\n            uint256(storedValue.currentGranularity),\\n            uint256(storedValue.effectiveAfter),\\n            UFixed6.wrap(uint256(storedValue.oracleFee)),\\n            uint256(storedValue.validFrom),\\n            uint256(storedValue.validTo)\\n        );\\n    }\\n\\n    function validate(KeeperOracleParameter memory newValue) private pure {\\n        if (newValue.latestGranularity < 1 && newValue.effectiveAfter != 0)\\n            revert KeeperOracleParameterStorageInvalidError();\\n        if (newValue.currentGranularity < 1) revert KeeperOracleParameterStorageInvalidError();\\n    }\\n\\n    function store(KeeperOracleParameterStorage storage self, KeeperOracleParameter memory newValue) internal {\\n        validate(newValue);\\n\\n        if (newValue.latestGranularity > type(uint16).max) revert KeeperOracleParameterStorageInvalidError();\\n        if (newValue.currentGranularity > type(uint16).max) revert KeeperOracleParameterStorageInvalidError();\\n        if (newValue.effectiveAfter > type(uint32).max) revert KeeperOracleParameterStorageInvalidError();\\n        if (newValue.oracleFee.gt(UFixed6.wrap(type(uint24).max))) revert KeeperOracleParameterStorageInvalidError();\\n        if (newValue.validFrom > type(uint16).max) revert KeeperOracleParameterStorageInvalidError();\\n        if (newValue.validTo > type(uint16).max) revert KeeperOracleParameterStorageInvalidError();\\n\\n        self.value = StoredKeeperOracleParameter(\\n            uint16(newValue.latestGranularity),\\n            uint16(newValue.currentGranularity),\\n            uint32(newValue.effectiveAfter),\\n            uint24(UFixed6.unwrap(newValue.oracleFee)),\\n            uint16(newValue.validFrom),\\n            uint16(newValue.validTo)\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0xd3c2595fb45514a2b6635bd8e13145741512576f38da25bc605b0df5242f0643\",\"license\":\"Apache-2.0\"},\"@equilibria/perennial-v2-oracle/contracts/keeper/types/PriceResponse.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.13;\\n\\nimport \\\"@equilibria/root/number/types/UFixed6.sol\\\";\\nimport { OracleVersion } from \\\"@equilibria/perennial-v2/contracts/types/OracleVersion.sol\\\";\\nimport { OracleReceipt } from \\\"@equilibria/perennial-v2/contracts/types/OracleReceipt.sol\\\";\\n\\nstruct PriceResponse {\\n    /// @dev The oracle price of the corresponding version\\n    Fixed6 price;\\n\\n    /// @dev the synchronous portion of the fixed settlement fee of the request delivered on commit\\n    UFixed6 syncFee;\\n\\n    /// @dev the asynchronous portion of the fixed settlement fee of the request delivered on settlement callback\\n    UFixed6 asyncFee;\\n\\n    /// @dev The relative oracle fee percentage of the request\\n    UFixed6 oracleFee;\\n\\n    /// @dev Whether the version is valid\\n    bool valid;\\n}\\nusing PriceResponseLib for PriceResponse global;\\nstruct StoredPriceResponse {\\n    /* slot 0 */\\n    int64 price;            // <= 18t\\n    uint48 syncFee;         // <= 281m\\n    uint48 asyncFee;        // <= 281m\\n    uint24 oracleFee;       // <= 100%\\n    bool valid;\\n}\\nstruct PriceResponseStorage { StoredPriceResponse value; }\\nusing PriceResponseStorageLib for PriceResponseStorage global;\\n\\n/// @title PriceResponseLib\\n/// @dev (external-unsafe): this library must be used internally only\\n/// @notice Library for PriceResponse logic and data.\\nlibrary PriceResponseLib {\\n    /// @notice Constructs a price response from an unrequested oracle version\\n    /// @param oracleVersion The oracle version object\\n    /// @return The corresponding price response\\n    function fromUnrequested(OracleVersion memory oracleVersion) internal pure returns (PriceResponse memory) {\\n        return PriceResponse(oracleVersion.price, UFixed6Lib.ZERO, UFixed6Lib.ZERO, UFixed6Lib.ZERO, oracleVersion.valid);\\n    }\\n\\n    /// @notice Returns an oracle version based on the price snapshot and timestamp\\n    /// @param self The price response object\\n    /// @param timestamp The timestamp of the price snapshot\\n    /// @return The corresponding oracle version\\n    function toOracleVersion(PriceResponse memory self, uint256 timestamp) internal pure returns (OracleVersion memory) {\\n        return OracleVersion(timestamp, self.price, self.valid);\\n    }\\n\\n    /// @notice Returns an oracle receipt based on the price snapshot and timestamp\\n    /// @param self The price response object\\n    /// @param callbacks The number of settlement callbacks to be made\\n    /// @return The corresponding oracle receipt\\n    function toOracleReceipt(PriceResponse memory self, uint256 callbacks) internal pure returns (OracleReceipt memory) {\\n        return OracleReceipt(self.syncFee.add(self.asyncFee.mul(UFixed6Lib.from(callbacks))), self.oracleFee);\\n    }\\n}\\n\\n/// @dev (external-safe): this library is safe to externalize\\nlibrary PriceResponseStorageLib {\\n    // sig: 0xea04171b\\n    error PriceResponseStorageInvalidError();\\n\\n    function read(PriceResponseStorage storage self) internal view returns (PriceResponse memory) {\\n        StoredPriceResponse memory storedValue = self.value;\\n        return PriceResponse(\\n            Fixed6.wrap(int256(storedValue.price)),\\n            UFixed6.wrap(uint256(storedValue.syncFee)),\\n            UFixed6.wrap(uint256(storedValue.asyncFee)),\\n            UFixed6.wrap(uint256(storedValue.oracleFee)),\\n            storedValue.valid\\n        );\\n    }\\n\\n    function store(PriceResponseStorage storage self, PriceResponse memory newValue) internal {\\n        if (newValue.price.gt(Fixed6.wrap(type(int64).max))) revert PriceResponseStorageInvalidError();\\n        if (newValue.price.lt(Fixed6.wrap(type(int64).min))) revert PriceResponseStorageInvalidError();\\n        if (newValue.syncFee.gt(UFixed6.wrap(type(uint48).max))) revert PriceResponseStorageInvalidError();\\n        if (newValue.asyncFee.gt(UFixed6.wrap(type(uint48).max))) revert PriceResponseStorageInvalidError();\\n        if (newValue.oracleFee.gt(UFixed6.wrap(type(uint24).max))) revert PriceResponseStorageInvalidError();\\n\\n        self.value = StoredPriceResponse(\\n            int64(Fixed6.unwrap(newValue.price)),\\n            uint48(UFixed6.unwrap(newValue.syncFee)),\\n            uint48(UFixed6.unwrap(newValue.asyncFee)),\\n            uint24(UFixed6.unwrap(newValue.oracleFee)),\\n            newValue.valid\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x176818141f0c581e36eeefda014ecba7111132dfec057e01d8cee9ab684ed142\",\"license\":\"Apache-2.0\"},\"@equilibria/perennial-v2-oracle/contracts/types/OracleParameter.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.13;\\n\\nimport \\\"@equilibria/root/number/types/UFixed6.sol\\\";\\nimport \\\"@equilibria/perennial-v2/contracts/types/OracleVersion.sol\\\";\\n\\nstruct OracleParameter {\\n    /// @dev The cap for the granularity setting in seconds\\n    uint256 maxGranularity;\\n\\n    /// @dev the cap for the settle fee in absolute terms\\n    UFixed6 maxSettlementFee;\\n\\n    /// @dev The cap for the oracle fee in relative terms\\n    UFixed6 maxOracleFee;\\n}\\nstruct StoredOracleParameter {\\n    /* slot 0 */\\n    uint16 maxGranularity;      // <= 65k\\n    uint48 maxSettlementFee;    // <= 281m\\n    uint24 maxOracleFee;        // <= 100%\\n}\\nstruct OracleParameterStorage { StoredOracleParameter value; }\\nusing OracleParameterStorageLib for OracleParameterStorage global;\\n\\n/// @dev (external-safe): this library is safe to externalize\\nlibrary OracleParameterStorageLib {\\n    // sig: 0xfc481d85\\n    error OracleParameterStorageInvalidError();\\n\\n    function read(OracleParameterStorage storage self) internal view returns (OracleParameter memory) {\\n        StoredOracleParameter memory storedValue = self.value;\\n        return OracleParameter(\\n            uint256(storedValue.maxGranularity),\\n            UFixed6.wrap(uint256(storedValue.maxSettlementFee)),\\n            UFixed6.wrap(uint256(storedValue.maxOracleFee))\\n        );\\n    }\\n\\n    function validate(OracleParameter memory newValue) private pure {\\n        if (newValue.maxGranularity < 1) revert OracleParameterStorageInvalidError();\\n        if (newValue.maxOracleFee.gt(UFixed6Lib.ONE)) revert OracleParameterStorageInvalidError();\\n    }\\n\\n    function store(OracleParameterStorage storage self, OracleParameter memory newValue) internal {\\n        validate(newValue);\\n\\n        if (newValue.maxGranularity > type(uint16).max) revert OracleParameterStorageInvalidError();\\n        if (newValue.maxSettlementFee.gt(UFixed6.wrap(type(uint48).max))) revert OracleParameterStorageInvalidError();\\n        if (newValue.maxOracleFee.gt(UFixed6.wrap(type(uint24).max))) revert OracleParameterStorageInvalidError();\\n\\n        self.value = StoredOracleParameter(\\n            uint16(newValue.maxGranularity),\\n            uint48(UFixed6.unwrap(newValue.maxSettlementFee)),\\n            uint24(UFixed6.unwrap(newValue.maxOracleFee))\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0xe1ee5d0f515f8b8554d3eb6006b5d74c47927826e455b48eaa1b4219a26c6d0b\",\"license\":\"Apache-2.0\"},\"@equilibria/perennial-v2-vault/contracts/interfaces/IVault.sol\":{\"content\":\"//SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.13;\\n\\nimport { IMarket, Checkpoint as PerennialCheckpoint } from \\\"@equilibria/perennial-v2/contracts/interfaces/IMarket.sol\\\";\\nimport { IInstance } from \\\"@equilibria/root/attribute/interfaces/IInstance.sol\\\";\\nimport { UFixed6 } from \\\"@equilibria/root/number/types/UFixed6.sol\\\";\\nimport { Fixed6 } from \\\"@equilibria/root/number/types/Fixed6.sol\\\";\\nimport { Token18 } from \\\"@equilibria/root/token/types/Token18.sol\\\";\\nimport { Account } from \\\"../types/Account.sol\\\";\\nimport { Checkpoint } from \\\"../types/Checkpoint.sol\\\";\\nimport { VaultParameter } from \\\"../types/VaultParameter.sol\\\";\\nimport { Registration } from \\\"../types/Registration.sol\\\";\\n\\ninterface IVault is IInstance {\\n    struct Context {\\n        // markets\\n        uint256 currentId;\\n        uint256 currentTimestamp;\\n        uint256 latestTimestamp;\\n        Registration[] registrations;\\n        Fixed6[] collaterals;\\n        Fixed6 totalCollateral;\\n\\n        // state\\n        VaultParameter parameter;\\n        Checkpoint currentCheckpoint;\\n        Checkpoint latestCheckpoint;\\n        Account global;\\n        Account local;\\n    }\\n\\n    struct Target {\\n        Fixed6 collateral;\\n        UFixed6 position;\\n    }\\n\\n    event MarketRegistered(uint256 indexed marketId, IMarket market);\\n    event MarketUpdated(uint256 indexed marketId, UFixed6 newWeight, UFixed6 newLeverage);\\n    event ParameterUpdated(VaultParameter newParameter);\\n    event Updated(address indexed sender, address indexed account, uint256 version, UFixed6 depositAssets, UFixed6 redeemShares, UFixed6 claimAssets);\\n\\n    // sig: 0xa9785d3d\\n    error VaultDepositLimitExceededError();\\n    // sig: 0xc85650f7\\n    error VaultRedemptionLimitExceededError();\\n    // sig: 0xe4b29524\\n    error VaultExistingOrderError();\\n    // sig: 0x499943cd\\n    error VaultMarketExistsError();\\n    // sig: 0x04467fe8\\n    error VaultMarketDoesNotExistError();\\n    // sig: 0x7c04a019\\n    error VaultNotMarketError();\\n    // sig: 0xaddc4c0d\\n    error VaultIncorrectAssetError();\\n    // sig: 0x7eb267c7\\n    error VaultNotOperatorError();\\n    // sig: 0xa65ac9fb\\n    error VaultNotSingleSidedError();\\n    // sig: 0xa65ac9fb\\n    error VaultInsufficientMinimumError();\\n    // sig: 0xdbdb7620\\n    error VaultAggregateWeightError();\\n    // sig: 0x50ad85d6\\n    error VaultCurrentOutOfSyncError();\\n\\n    // sig: 0xb8a09499\\n    error AccountStorageInvalidError();\\n    // sig: 0xba85116a\\n    error CheckpointStorageInvalidError();\\n    // sig: 0xf003e2c3\\n    error MappingStorageInvalidError();\\n    // sig: 0x92f03c86\\n    error RegistrationStorageInvalidError();\\n    // sig: 0x0f9f8b19\\n    error VaultParameterStorageInvalidError();\\n    // sig: 0x97635122\\n    error StrategyLibInsufficientCollateralError();\\n    // sig: 0xfd9cbca5\\n    error StrategyLibInsufficientAssetsError();\\n\\n    function initialize(Token18 asset, IMarket initialMaker, UFixed6 initialAmount, string calldata name_) external;\\n    function name() external view returns (string memory);\\n    function settle(address account) external;\\n    function rebalance(address account) external;\\n    function update(address account, UFixed6 depositAssets, UFixed6 redeemShares, UFixed6 claimAssets) external;\\n    function asset() external view returns (Token18);\\n    function totalAssets() external view returns (Fixed6);\\n    function totalShares() external view returns (UFixed6);\\n    function convertToShares(UFixed6 assets) external view returns (UFixed6);\\n    function convertToAssets(UFixed6 shares) external view returns (UFixed6);\\n    function totalMarkets() external view returns (uint256);\\n    function parameter() external view returns (VaultParameter memory);\\n    function registrations(uint256 marketId) external view returns (Registration memory);\\n    function accounts(address account) external view returns (Account memory);\\n    function checkpoints(uint256 id) external view returns (Checkpoint memory);\\n    function register(IMarket market) external;\\n    function updateLeverage(uint256 marketId, UFixed6 newLeverage) external;\\n    function updateWeights(UFixed6[] calldata newWeights) external;\\n    function updateParameter(VaultParameter memory newParameter) external;\\n}\\n\",\"keccak256\":\"0x0f42f4ea3ab91edf6462afd61ebb8dcc03c0ee9bf069c69712c6739f8179094c\",\"license\":\"Apache-2.0\"},\"@equilibria/perennial-v2-vault/contracts/types/Account.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.13;\\n\\nimport \\\"@equilibria/root/number/types/UFixed6.sol\\\";\\nimport \\\"./Checkpoint.sol\\\";\\n\\n/// @dev Account type\\nstruct Account {\\n    /// @dev The current position id\\n    uint256 current;\\n\\n    /// @dev The latest position id\\n    uint256 latest;\\n\\n    /// @dev The total shares\\n    UFixed6 shares;\\n\\n    /// @dev The total assets\\n    UFixed6 assets;\\n\\n    /// @dev The amount of pending deposits\\n    UFixed6 deposit;\\n\\n    /// @dev The amount of pending redemptions\\n    UFixed6 redemption;\\n}\\nusing AccountLib for Account global;\\nstruct StoredAccount {\\n    /* slot 0 */\\n    uint32 current;         // <= 4.29b\\n    uint32 latest;          // <= 4.29b\\n    bytes24 __unallocated0__;\\n\\n    /* slot 1 */\\n    uint64 shares;          // <= 18.44t\\n    uint64 assets;          // <= 18.44t\\n    uint64 deposit;         // <= 18.44t\\n    uint64 redemption;      // <= 18.44t\\n}\\nstruct AccountStorage { StoredAccount value; }\\nusing AccountStorageLib for AccountStorage global;\\n\\n\\n/// @title Account\\n/// @dev (external-unsafe): this library must be used internally only\\n/// @notice Holds the state for the account type\\nlibrary AccountLib {\\n    /// @notice Processes the position in a global context\\n    /// @param self The account to update\\n    /// @param latestId The latest position id\\n    /// @param checkpoint The checkpoint to process\\n    /// @param deposit The amount of pending deposits\\n    /// @param redemption The amount of pending redemptions\\n    function processGlobal(\\n        Account memory self,\\n        uint256 latestId,\\n        Checkpoint memory checkpoint,\\n        UFixed6 deposit,\\n        UFixed6 redemption\\n    ) internal pure {\\n        self.latest = latestId;\\n        (self.assets, self.shares) = (\\n            self.assets.add(checkpoint.toAssetsGlobal(redemption)),\\n            self.shares.add(checkpoint.toSharesGlobal(deposit))\\n        );\\n        (self.deposit, self.redemption) = (self.deposit.sub(deposit), self.redemption.sub(redemption));\\n    }\\n\\n    /// @notice Processes the position in a local context\\n    /// @param self The account to update\\n    /// @param latestId The latest position id\\n    /// @param checkpoint The checkpoint to process\\n    /// @param deposit The amount of pending deposits to clear\\n    /// @param redemption The amount of pending redemptions to clear\\n    function processLocal(\\n        Account memory self,\\n        uint256 latestId,\\n        Checkpoint memory checkpoint,\\n        UFixed6 deposit,\\n        UFixed6 redemption\\n    ) internal pure {\\n        self.latest = latestId;\\n        (self.assets, self.shares) = (\\n            self.assets.add(checkpoint.toAssetsLocal(redemption)),\\n            self.shares.add(checkpoint.toSharesLocal(deposit))\\n        );\\n        (self.deposit, self.redemption) = (self.deposit.sub(deposit), self.redemption.sub(redemption));\\n    }\\n\\n    /// @notice Updates the account with a new order\\n    /// @param self The account to update\\n    /// @param currentId The current position id\\n    /// @param assets The amount of assets to deduct\\n    /// @param shares The amount of shares to deduct\\n    /// @param deposit The amount of pending deposits\\n    /// @param redemption The amount of pending redemptions\\n    function update(\\n        Account memory self,\\n        uint256 currentId,\\n        UFixed6 assets,\\n        UFixed6 shares,\\n        UFixed6 deposit,\\n        UFixed6 redemption\\n    ) internal pure {\\n        self.current = currentId;\\n        (self.assets, self.shares) = (self.assets.sub(assets), self.shares.sub(shares));\\n        (self.deposit, self.redemption) = (self.deposit.add(deposit), self.redemption.add(redemption));\\n    }\\n}\\n\\n/// @dev (external-safe): this library is safe to externalize\\nlibrary AccountStorageLib {\\n    // sig: 0xb8a09499\\n    error AccountStorageInvalidError();\\n\\n    function read(AccountStorage storage self) internal view returns (Account memory) {\\n        StoredAccount memory storedValue = self.value;\\n        return Account(\\n            uint256(storedValue.current),\\n            uint256(storedValue.latest),\\n            UFixed6.wrap(uint256(storedValue.shares)),\\n            UFixed6.wrap(uint256(storedValue.assets)),\\n            UFixed6.wrap(uint256(storedValue.deposit)),\\n            UFixed6.wrap(uint256(storedValue.redemption))\\n        );\\n    }\\n\\n    function store(AccountStorage storage self, Account memory newValue) internal {\\n        if (newValue.current > uint256(type(uint32).max)) revert AccountStorageInvalidError();\\n        if (newValue.latest > uint256(type(uint32).max)) revert AccountStorageInvalidError();\\n        if (newValue.shares.gt(UFixed6.wrap(type(uint64).max))) revert AccountStorageInvalidError();\\n        if (newValue.assets.gt(UFixed6.wrap(type(uint64).max))) revert AccountStorageInvalidError();\\n        if (newValue.deposit.gt(UFixed6.wrap(type(uint64).max))) revert AccountStorageInvalidError();\\n        if (newValue.redemption.gt(UFixed6.wrap(type(uint64).max))) revert AccountStorageInvalidError();\\n\\n        self.value = StoredAccount(\\n            uint32(newValue.current),\\n            uint32(newValue.latest),\\n            bytes24(0),\\n\\n            uint64(UFixed6.unwrap(newValue.shares)),\\n            uint64(UFixed6.unwrap(newValue.assets)),\\n            uint64(UFixed6.unwrap(newValue.deposit)),\\n            uint64(UFixed6.unwrap(newValue.redemption))\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x11c0884a09ba6106fc7c3935125e5e14a4c072c25c5daaed1306cb424eb51c4b\",\"license\":\"Apache-2.0\"},\"@equilibria/perennial-v2-vault/contracts/types/Checkpoint.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.13;\\n\\nimport { UFixed6, UFixed6Lib } from \\\"@equilibria/root/number/types/UFixed6.sol\\\";\\nimport { Fixed6, Fixed6Lib } from \\\"@equilibria/root/number/types/Fixed6.sol\\\";\\nimport { Checkpoint as PerennialCheckpoint } from \\\"@equilibria/perennial-v2/contracts/interfaces/IMarket.sol\\\";\\nimport { Account } from \\\"./Account.sol\\\";\\n\\n/// @dev Checkpoint type\\nstruct Checkpoint {\\n    /// @dev The total amount of pending deposits\\n    UFixed6 deposit;\\n\\n    /// @dev The total amount of pending redemptions\\n    UFixed6 redemption;\\n\\n    /// @dev The total shares at the checkpoint\\n    UFixed6 shares;\\n\\n    /// @dev The total assets at the checkpoint\\n    Fixed6 assets;\\n\\n    /// @dev The total fee at the checkpoint\\n    Fixed6 tradeFee;\\n\\n    /// @dev The total settlement fee at the checkpoint\\n    UFixed6 settlementFee;\\n\\n    /// @dev The number of deposits and redemptions during the checkpoint\\n    uint256 deposits;\\n\\n    /// @dev The number of deposits and redemptions during the checkpoint\\n    uint256 redemptions;\\n\\n    // @dev The timestamp of of the checkpoint\\n    uint256 timestamp;\\n}\\nusing CheckpointLib for Checkpoint global;\\nstruct StoredCheckpoint {\\n    /* slot 0 */\\n    uint64 deposit;         // <= 18.44t\\n    uint64 redemption;      // <= 18.44t\\n    uint64 shares;          // <= 18.44t\\n    int64 assets;           // <= 9.22t\\n\\n    /* slot 1 */\\n    int64 tradeFee;         // <= 9.22t\\n    uint64 settlementFee;   // <= 18.44t\\n    uint32 deposits;        // <= 4.29b\\n    uint32 timestamp;       // <= 4.29b\\n    uint32 redemptions;\\n    bytes4 __unallocated0__;\\n}\\nstruct CheckpointStorage { StoredCheckpoint value; }\\nusing CheckpointStorageLib for CheckpointStorage global;\\n\\n/// @title Checkpoint\\n/// @dev (external-unsafe): this library must be used internally only\\n/// @notice Holds the state for the checkpoint type\\nlibrary CheckpointLib {\\n    /// @notice Initializes the checkpoint\\n    /// @dev Saves the current shares, and the assets + liabilities in the vault itself (not in the markets)\\n    /// @param self The checkpoint to initialize\\n    /// @param timestamp The timestamp of the checkpoint\\n    /// @param global The global account\\n    function next(Checkpoint memory self, uint256 timestamp, Account memory global) internal pure {\\n        (self.timestamp, self.shares, self.assets) =\\n            (timestamp, global.shares, Fixed6Lib.from(-1, global.deposit.add(global.assets)));\\n        (self.deposit, self.redemption, self.tradeFee, self.settlementFee, self.deposits, self.redemptions) =\\n            (UFixed6Lib.ZERO, UFixed6Lib.ZERO, Fixed6Lib.ZERO, UFixed6Lib.ZERO, 0, 0);\\n    }\\n\\n    /// @notice Updates the checkpoint with a new deposit or redemption\\n    /// @param self The checkpoint to update\\n    /// @param deposit The amount of new deposits\\n    /// @param redemption The amount of new redemptions\\n    function update(Checkpoint memory self, UFixed6 deposit, UFixed6 redemption) internal pure {\\n        (self.deposit, self.redemption) =\\n            (self.deposit.add(deposit), self.redemption.add(redemption));\\n        if (!deposit.isZero()) self.deposits++;\\n        if (!redemption.isZero()) self.redemptions++;\\n    }\\n\\n    /// @notice Completes the checkpoint\\n    /// @dev Increments the assets by the snapshotted amount of collateral in the underlying markets\\n    /// @param self The checkpoint to complete\\n    /// @param marketCheckpoint The checkpoint to complete with\\n    function complete(Checkpoint memory self, PerennialCheckpoint memory marketCheckpoint) internal pure {\\n        self.assets = self.assets.add(marketCheckpoint.collateral);\\n        self.tradeFee = marketCheckpoint.tradeFee;\\n        self.settlementFee = marketCheckpoint.settlementFee;\\n    }\\n\\n    /// @notice Converts a given amount of assets to shares at checkpoint in the global context\\n    /// @param assets Number of assets to convert to shares\\n    /// @return Amount of shares for the given assets at checkpoint\\n    function toSharesGlobal(Checkpoint memory self, UFixed6 assets) internal pure returns (UFixed6) {\\n        // vault is fresh, use par value\\n        if (self.shares.isZero()) return assets;\\n\\n        // if vault is insolvent, default to par value\\n        UFixed6 settlementFee = _settlementFeeForOrders(self, self.deposits);\\n        return self.assets.lte(Fixed6Lib.ZERO) ?\\n            assets.unsafeSub(settlementFee) :\\n            _toShares(self, assets).unsafeSub(_toSharesExact(self, settlementFee));\\n    }\\n\\n    /// @notice Converts a given amount of shares to assets with checkpoint in the global context\\n    /// @param shares Number of shares to convert to shares\\n    /// @return Amount of assets for the given shares at checkpoint\\n    function toAssetsGlobal(Checkpoint memory self, UFixed6 shares) internal pure returns (UFixed6) {\\n        // vault is fresh, use par value\\n        UFixed6 settlementFee = _settlementFeeForOrders(self, self.redemptions);\\n        return (self.shares.isZero() ? shares : _toAssets(self, shares)).unsafeSub(settlementFee);\\n    }\\n\\n    /// @notice Converts a given amount of assets to shares at checkpoint in the local context\\n    /// @param assets Number of assets to convert to shares\\n    /// @return Amount of shares for the given assets at checkpoint\\n    function toSharesLocal(Checkpoint memory self, UFixed6 assets) internal pure returns (UFixed6) {\\n        // vault is fresh, use par value\\n        if (self.shares.isZero()) return assets;\\n\\n        // if vault is insolvent, default to par value\\n        UFixed6 settlementFee = _settlementFeeForOrders(self, 1);\\n        return self.assets.lte(Fixed6Lib.ZERO) ?\\n            assets.unsafeSub(settlementFee) :\\n            _toShares(self, assets).unsafeSub(_toSharesExact(self, settlementFee));\\n    }\\n\\n    /// @notice Converts a given amount of shares to assets with checkpoint in the local context\\n    /// @param shares Number of shares to convert to shares\\n    /// @return Amount of assets for the given shares at checkpoint\\n    function toAssetsLocal(Checkpoint memory self, UFixed6 shares) internal pure returns (UFixed6) {\\n        // vault is fresh, use par value\\n        UFixed6 settlementFee = _settlementFeeForOrders(self, 1);\\n        return (self.shares.isZero() ? shares : _toAssets(self, shares)).unsafeSub(settlementFee);\\n    }\\n\\n    /// @notice Converts a given amount of shares to assets with checkpoint in the global context\\n    /// @dev Dev used in limit calculations when no settlement fee is available\\n    /// @param shares Number of shares to convert to shares\\n    /// @return Amount of assets for the given shares at checkpoint\\n    function toAssets(Checkpoint memory self, UFixed6 shares) internal pure returns (UFixed6) {\\n        // vault is fresh, use par value\\n        return (self.shares.isZero() ? shares : _toAssets(self, shares));\\n    }\\n\\n    /// @notice Converts a given amount of assets to shares at checkpoint\\n    /// @param assets Number of assets to convert to shares\\n    /// @return Amount of shares for the given assets at checkpoint\\n    function _toShares(Checkpoint memory self, UFixed6 assets) private pure returns (UFixed6) {\\n        return _withSpread(self, _toSharesExact(self, assets));\\n    }\\n\\n    /// @notice Converts a given amount of shares to assets with checkpoint\\n    /// @param shares Number of shares to convert to shares\\n    /// @return Amount of assets for the given shares at checkpoint\\n    function _toAssets(Checkpoint memory self, UFixed6 shares) private pure returns (UFixed6) {\\n        return _withSpread(self, _toAssetsExact(self, shares));\\n    }\\n\\n    /// @notice Applies a spread to a given amount from the relative fee amount of the checkpoint\\n    /// @param self The checkpoint to apply the spread to\\n    /// @param amount The amount to apply the spread to\\n    function _withSpread(Checkpoint memory self, UFixed6 amount) private pure returns (UFixed6) {\\n        UFixed6 totalAmount = self.deposit.add(_toAssetsExact(self, self.redemption));\\n        UFixed6 totalAmountIncludingFee = UFixed6Lib.unsafeFrom(Fixed6Lib.from(totalAmount).sub(self.tradeFee));\\n\\n        return totalAmount.isZero() ?\\n            amount :\\n            amount.muldiv(totalAmountIncludingFee, totalAmount);\\n    }\\n\\n    function _settlementFeeForOrders(Checkpoint memory self, uint256 orders) private pure returns (UFixed6) {\\n        UFixed6 totalOrders = UFixed6Lib.from(self.deposits + self.redemptions);\\n        return totalOrders.isZero() ?\\n            UFixed6Lib.ZERO :\\n            self.settlementFee.muldivOut(UFixed6Lib.from(orders), totalOrders);\\n    }\\n\\n    function _toAssetsExact(Checkpoint memory self, UFixed6 shares) private pure returns (UFixed6) {\\n        return shares.muldiv(UFixed6Lib.unsafeFrom(self.assets), self.shares);\\n    }\\n\\n    function _toSharesExact(Checkpoint memory self, UFixed6 assets) private pure returns (UFixed6) {\\n        return assets.muldiv(self.shares, UFixed6Lib.unsafeFrom(self.assets));\\n    }\\n\\n    /// @notice Returns if the checkpoint is healthy\\n    /// @dev A checkpoint is unhealthy when it has shares but no assets, since this cannot be recovered from\\n    /// @param self The checkpoint to check\\n    /// @return Whether the checkpoint is healthy\\n    function unhealthy(Checkpoint memory self) internal pure returns (bool) {\\n        return !self.shares.isZero() && self.assets.lte(Fixed6Lib.ZERO);\\n    }\\n}\\n\\n/// @dev (external-safe): this library is safe to externalize\\nlibrary CheckpointStorageLib {\\n    // sig: 0xba85116a\\n    error CheckpointStorageInvalidError();\\n\\n    function read(CheckpointStorage storage self) internal view returns (Checkpoint memory) {\\n        StoredCheckpoint memory storedValue = self.value;\\n        return Checkpoint(\\n            UFixed6.wrap(uint256(storedValue.deposit)),\\n            UFixed6.wrap(uint256(storedValue.redemption)),\\n            UFixed6.wrap(uint256(storedValue.shares)),\\n            Fixed6.wrap(int256(storedValue.assets)),\\n            Fixed6.wrap(int256(storedValue.tradeFee)),\\n            UFixed6.wrap(uint256(storedValue.settlementFee)),\\n            uint256(storedValue.deposits),\\n            uint256(storedValue.redemptions),\\n            uint256(storedValue.timestamp)\\n        );\\n    }\\n\\n    function store(CheckpointStorage storage self, Checkpoint memory newValue) internal {\\n        if (newValue.deposit.gt(UFixed6.wrap(type(uint64).max))) revert CheckpointStorageInvalidError();\\n        if (newValue.redemption.gt(UFixed6.wrap(type(uint64).max))) revert CheckpointStorageInvalidError();\\n        if (newValue.shares.gt(UFixed6.wrap(type(uint64).max))) revert CheckpointStorageInvalidError();\\n        if (newValue.assets.gt(Fixed6.wrap(type(int64).max))) revert CheckpointStorageInvalidError();\\n        if (newValue.assets.lt(Fixed6.wrap(type(int64).min))) revert CheckpointStorageInvalidError();\\n        if (newValue.tradeFee.gt(Fixed6.wrap(type(int64).max))) revert CheckpointStorageInvalidError();\\n        if (newValue.tradeFee.lt(Fixed6.wrap(type(int64).min))) revert CheckpointStorageInvalidError();\\n        if (newValue.settlementFee.gt(UFixed6.wrap(type(uint64).max))) revert CheckpointStorageInvalidError();\\n        if (newValue.deposits > uint256(type(uint32).max)) revert CheckpointStorageInvalidError();\\n        if (newValue.redemptions > uint256(type(uint32).max)) revert CheckpointStorageInvalidError();\\n        if (newValue.timestamp > uint256(type(uint32).max)) revert CheckpointStorageInvalidError();\\n\\n        self.value = StoredCheckpoint(\\n            uint64(UFixed6.unwrap(newValue.deposit)),\\n            uint64(UFixed6.unwrap(newValue.redemption)),\\n            uint64(UFixed6.unwrap(newValue.shares)),\\n            int64(Fixed6.unwrap(newValue.assets)),\\n\\n            int64(Fixed6.unwrap(newValue.tradeFee)),\\n            uint64(UFixed6.unwrap(newValue.settlementFee)),\\n            uint32(newValue.deposits),\\n            uint32(newValue.timestamp),\\n            uint32(newValue.redemptions),\\n            bytes4(0)\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x386ecd2d065602a0b4f01f05a4fd152f13dbf4b531ca47687d239568ca468ca5\",\"license\":\"Apache-2.0\"},\"@equilibria/perennial-v2-vault/contracts/types/Registration.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.13;\\n\\nimport { IMarket } from \\\"@equilibria/perennial-v2/contracts/interfaces/IMarket.sol\\\";\\nimport \\\"@equilibria/root/number/types/UFixed6.sol\\\";\\n\\n/// @dev Registration type\\nstruct Registration {\\n    /// @dev The underlying market\\n    IMarket market;\\n\\n    /// @dev The weight of the market\\n    UFixed6 weight;\\n\\n    /// @dev The leverage of the market\\n    UFixed6 leverage;\\n}\\nstruct StoredRegistration {\\n    /* slot 0 */\\n    address market;\\n    uint32 weight;          // <= 4.29b\\n    uint32 leverage;        // <= 4290x\\n    bytes4 __unallocated0__;\\n}\\nstruct RegistrationStorage { StoredRegistration value; }\\nusing RegistrationStorageLib for RegistrationStorage global;\\n\\n/// @dev (external-safe): this library is safe to externalize\\nlibrary RegistrationStorageLib {\\n    // sig: 0x92f03c86\\n    error RegistrationStorageInvalidError();\\n\\n    function read(RegistrationStorage storage self) internal view returns (Registration memory) {\\n        StoredRegistration memory storedValue = self.value;\\n        return Registration(\\n            IMarket(storedValue.market),\\n            UFixed6.wrap(uint256(storedValue.weight)),\\n            UFixed6.wrap(uint256(storedValue.leverage))\\n        );\\n    }\\n\\n    function store(RegistrationStorage storage self, Registration memory newValue) internal {\\n        if (newValue.weight.gt(UFixed6.wrap(type(uint32).max))) revert RegistrationStorageInvalidError();\\n        if (newValue.leverage.gt(UFixed6.wrap(type(uint32).max))) revert RegistrationStorageInvalidError();\\n\\n        self.value = StoredRegistration(\\n            address(newValue.market),\\n            uint32(UFixed6.unwrap(newValue.weight)),\\n            uint32(UFixed6.unwrap(newValue.leverage)),\\n            bytes4(0)\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0xff4d24478e11b99fd5091fc6a020282f50a22157cadc969ab16b34e65c4f8a67\",\"license\":\"Apache-2.0\"},\"@equilibria/perennial-v2-vault/contracts/types/VaultParameter.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.13;\\n\\nimport \\\"@equilibria/root/number/types/UFixed6.sol\\\";\\n\\n/// @dev VaultParameter type\\nstruct VaultParameter {\\n    /// @dev The maximum total that can be deposited into the vault\\n    UFixed6 maxDeposit;\\n\\n    /// @dev The minimum amount that can be deposited into the vault at one time\\n    UFixed6 minDeposit;\\n}\\nstruct StoredVaultParameter {\\n    /* slot 0 */\\n    uint64 maxDeposit;\\n    uint64 minDeposit;\\n    bytes16 __unallocated0__;\\n}\\nstruct VaultParameterStorage { StoredVaultParameter value; } // SECURITY: must remain at (1) slots\\nusing VaultParameterStorageLib for VaultParameterStorage global;\\n\\n/// @dev (external-safe): this library is safe to externalize\\nlibrary VaultParameterStorageLib {\\n    // sig: 0x0f9f8b19\\n    error VaultParameterStorageInvalidError();\\n\\n    function read(VaultParameterStorage storage self) internal view returns (VaultParameter memory) {\\n        StoredVaultParameter memory storedValue = self.value;\\n\\n        return VaultParameter(\\n            UFixed6.wrap(uint256(storedValue.maxDeposit)),\\n            UFixed6.wrap(uint256(storedValue.minDeposit))\\n        );\\n    }\\n\\n    function store(VaultParameterStorage storage self, VaultParameter memory newValue) internal {\\n        if (newValue.maxDeposit.gt(UFixed6.wrap(type(uint64).max))) revert VaultParameterStorageInvalidError();\\n        if (newValue.minDeposit.gt(UFixed6.wrap(type(uint64).max))) revert VaultParameterStorageInvalidError();\\n\\n        self.value = StoredVaultParameter(\\n            uint64(UFixed6.unwrap(newValue.maxDeposit)),\\n            uint64(UFixed6.unwrap(newValue.minDeposit)),\\n            bytes16(0)\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0xaaf255a9577128d0924dbbec13c850edfcec159b73750510e48757ad45b9f29f\",\"license\":\"Apache-2.0\"},\"@equilibria/perennial-v2-verifier/contracts/types/Intent.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.13;\\n\\nimport { UFixed6, UFixed6Lib } from \\\"@equilibria/root/number/types/UFixed6.sol\\\";\\nimport { Fixed6 } from \\\"@equilibria/root/number/types/Fixed6.sol\\\";\\nimport { Common, CommonLib } from \\\"@equilibria/root/verifier/types/Common.sol\\\";\\n\\nstruct Intent {\\n    /// @dev The size and direction of the order being opened by the taker\\n    ///       - Positive opens long / Negative opens short\\n    ///       - The maker will open the opposite side of the order\\n    ///       - To close, open an order in the opposite direction\\n    Fixed6 amount;\\n\\n    /// @dev The price to execute the order at\\n    Fixed6 price;\\n\\n    /// @dev The solver fee, a percentage of the substractive interface fee\\n    UFixed6 fee;\\n\\n    /// @dev The referral address of the originator of the order (ex. the interface)\\n    address originator;\\n\\n    /// @dev The referral address of the solver of the order (ex. the router)\\n    address solver;\\n\\n    /// @dev The minimium collateralization ratio that must be maintained after the order is executed\\n    UFixed6 collateralization;\\n\\n    /// @dev The common information for the intent\\n    Common common;\\n}\\nusing IntentLib for Intent global;\\n\\n/// @title IntentLib\\n/// @notice Library for Intent logic and data.\\nlibrary IntentLib {\\n    bytes32 constant public STRUCT_HASH = keccak256(\\n        \\\"Intent(int256 amount,int256 price,uint256 fee,address originator,address solver,uint256 collateralization,Common common)\\\"\\n        \\\"Common(address account,address signer,address domain,uint256 nonce,uint256 group,uint256 expiry)\\\"\\n    );\\n\\n    function hash(Intent memory self) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(STRUCT_HASH, self.amount, self.price, self.fee, self.originator, self.solver, self.collateralization, CommonLib.hash(self.common)));\\n    }\\n}\\n\",\"keccak256\":\"0xc7bb16c559362c751d1889d6fea834be0066674ace8fe610f15122f1979b483b\",\"license\":\"Apache-2.0\"},\"@equilibria/perennial-v2/contracts/interfaces/IMarket.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.13;\\n\\nimport \\\"@equilibria/root/attribute/interfaces/IInstance.sol\\\";\\nimport \\\"@equilibria/root/number/types/UFixed6.sol\\\";\\nimport \\\"@equilibria/root/token/types/Token18.sol\\\";\\nimport \\\"@equilibria/perennial-v2-verifier/contracts/types/Intent.sol\\\";\\nimport \\\"./IOracleProvider.sol\\\";\\nimport \\\"../types/OracleVersion.sol\\\";\\nimport \\\"../types/MarketParameter.sol\\\";\\nimport \\\"../types/RiskParameter.sol\\\";\\nimport \\\"../types/Version.sol\\\";\\nimport \\\"../types/Local.sol\\\";\\nimport \\\"../types/Global.sol\\\";\\nimport \\\"../types/Position.sol\\\";\\nimport \\\"../types/Checkpoint.sol\\\";\\nimport \\\"../types/Guarantee.sol\\\";\\nimport \\\"../libs/VersionLib.sol\\\";\\n\\ninterface IMarket is IInstance {\\n    struct MarketDefinition {\\n        Token18 token;\\n        IOracleProvider oracle;\\n    }\\n\\n    struct Context {\\n        address account;\\n        MarketParameter marketParameter;\\n        RiskParameter riskParameter;\\n        OracleVersion latestOracleVersion;\\n        uint256 currentTimestamp;\\n        Global global;\\n        Local local;\\n        Position latestPositionGlobal;\\n        Position latestPositionLocal;\\n        Order pendingGlobal;\\n        Order pendingLocal;\\n    }\\n\\n    struct SettlementContext {\\n        Version latestVersion;\\n        Checkpoint latestCheckpoint;\\n        OracleVersion orderOracleVersion;\\n    }\\n\\n    struct UpdateContext {\\n        bool operator;\\n        bool signer;\\n        address liquidator;\\n        address orderReferrer;\\n        UFixed6 orderReferralFee;\\n        address guaranteeReferrer;\\n        UFixed6 guaranteeReferralFee;\\n        Order orderGlobal;\\n        Order orderLocal;\\n        Position currentPositionGlobal;\\n        Position currentPositionLocal;\\n        Guarantee guaranteeGlobal;\\n        Guarantee guaranteeLocal;\\n        UFixed6 collateralization;\\n    }\\n\\n    event Updated(address indexed sender, address indexed account, uint256 version, UFixed6 newMaker, UFixed6 newLong, UFixed6 newShort, Fixed6 collateral, bool protect, address referrer);\\n    event OrderCreated(address indexed account, Order order, Guarantee guarantee, address liquidator, address orderReferrer, address guaranteeReferrer);\\n    event PositionProcessed(uint256 orderId, Order order, VersionAccumulationResult accumulationResult);\\n    event AccountPositionProcessed(address indexed account, uint256 orderId, Order order, CheckpointAccumulationResult accumulationResult);\\n    event BeneficiaryUpdated(address newBeneficiary);\\n    event CoordinatorUpdated(address newCoordinator);\\n    /// @notice Fee earned by an account was transferred from market to a receiver\\n    /// @param account User who earned the fee\\n    /// @param receiver Delegated operator of the account, or the account itself\\n    /// @param amount Collateral transferred from market to receiver\\n    event FeeClaimed(address indexed account, address indexed receiver, UFixed6 amount);\\n    event ExposureClaimed(address indexed account, Fixed6 amount);\\n    event ParameterUpdated(MarketParameter newParameter);\\n    event RiskParameterUpdated(RiskParameter newRiskParameter);\\n\\n    // sig: 0x0fe90964\\n    error MarketInsufficientLiquidityError();\\n    // sig: 0x00e2b6a8\\n    error MarketInsufficientMarginError();\\n    // sig: 0x442145e5\\n    error MarketInsufficientCollateralError();\\n    // sig: 0xba555da7\\n    error MarketProtectedError();\\n    // sig: 0x6ed43d8e\\n    error MarketMakerOverLimitError();\\n    // sig: 0x29ab4c44\\n    error MarketClosedError();\\n    // sig: 0x07732aee\\n    error MarketCollateralBelowLimitError();\\n    // sig: 0x5bdace60\\n    error MarketOperatorNotAllowedError();\\n    // sig: 0x8a68c1dc\\n    error MarketNotSingleSidedError();\\n    // sig: 0x736f9fda\\n    error MarketOverCloseError();\\n    // sig: 0x935bdc21\\n    error MarketExceedsPendingIdLimitError();\\n    // sig: 0x9bca0625\\n    error MarketNotCoordinatorError();\\n    // sig: 0xb602d086\\n    error MarketNotBeneficiaryError();\\n    // sig: 0x3222db45\\n    /// @custom:error Sender is not authorized to interact with markets on behalf of the account\\n    error MarketNotOperatorError();\\n    // sig: 0x534f7fe6\\n    error MarketInvalidProtectionError();\\n    // sig: 0xab1e3a00\\n    error MarketStalePriceError();\\n    // sig: 0x15f9ae70\\n    error MarketEfficiencyUnderLimitError();\\n    // sig: 0x7302d51a\\n    error MarketInvalidMarketParameterError(uint256 code);\\n    // sig: 0xc5f0e98a\\n    error MarketInvalidRiskParameterError(uint256 code);\\n    // sig: 0x9dbdc5fd\\n    error MarketInvalidReferrerError();\\n    // sig: 0x5c5cb438\\n    error MarketSettleOnlyError();\\n    // sig: 0x1e9d2296\\n    error MarketInvalidIntentFeeError();\\n\\n    // sig: 0x2142bc27\\n    error GlobalStorageInvalidError();\\n    // sig: 0xc83d08ec\\n    error LocalStorageInvalidError();\\n    // sig: 0x7c53e926\\n    error MarketParameterStorageInvalidError();\\n    // sig: 0x98eb4898\\n    error PositionStorageLocalInvalidError();\\n    // sig: 0x7ecd083f\\n    error RiskParameterStorageInvalidError();\\n    // sig: 0xd2777e72\\n    error VersionStorageInvalidError();\\n\\n    function initialize(MarketDefinition calldata definition_) external;\\n    function migrate() external;\\n    function token() external view returns (Token18);\\n    function oracle() external view returns (IOracleProvider);\\n    function beneficiary() external view returns (address);\\n    function coordinator() external view returns (address);\\n    function positions(address account) external view returns (Position memory);\\n    function pendingOrders(address account, uint256 id) external view returns (Order memory);\\n    function guarantees(address account, uint256 id) external view returns (Guarantee memory);\\n    function pendings(address account) external view returns (Order memory);\\n    function locals(address account) external view returns (Local memory);\\n    function versions(uint256 timestamp) external view returns (Version memory);\\n    function position() external view returns (Position memory);\\n    function pendingOrder(uint256 id) external view returns (Order memory);\\n    function guarantee(uint256 id) external view returns (Guarantee memory);\\n    function pending() external view returns (Order memory);\\n    function global() external view returns (Global memory);\\n    function checkpoints(address account, uint256 version) external view returns (Checkpoint memory);\\n    function liquidators(address account, uint256 id) external view returns (address);\\n    function orderReferrers(address account, uint256 id) external view returns (address);\\n    function guaranteeReferrers(address account, uint256 id) external view returns (address);\\n    function settle(address account) external;\\n    function update(address account, Intent calldata intent, bytes memory signature) external;\\n    function update(address account, Fixed6 amount, Fixed6 collateral, address referrer) external;\\n    function update(address account, UFixed6 newMaker, UFixed6 newLong, UFixed6 newShort, Fixed6 collateral, bool protect) external;\\n    function update(address account, UFixed6 newMaker, UFixed6 newLong, UFixed6 newShort, Fixed6 collateral, bool protect, address referrer) external;\\n    function parameter() external view returns (MarketParameter memory);\\n    function riskParameter() external view returns (RiskParameter memory);\\n    function updateBeneficiary(address newBeneficiary) external;\\n    function updateCoordinator(address newCoordinator) external;\\n    function updateParameter(MarketParameter memory newParameter) external;\\n    function updateRiskParameter(RiskParameter memory newRiskParameter) external;\\n    function claimFee(address account) external returns (UFixed6);\\n}\\n\",\"keccak256\":\"0x5026f1a049b0f85e82c98fee8fbcb6b37662852f89e7c375068ee3557a73217d\",\"license\":\"Apache-2.0\"},\"@equilibria/perennial-v2/contracts/interfaces/IOracleProvider.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.13;\\n\\nimport { OracleReceipt } from \\\"../types/OracleReceipt.sol\\\";\\nimport { OracleVersion } from \\\"../types/OracleVersion.sol\\\";\\nimport { IMarket } from \\\"./IMarket.sol\\\";\\n\\n/// @dev OracleVersion Invariants\\n///       - Version are requested at a timestamp, the current timestamp is determined by the oracle\\n///         - The current timestamp may not be equal to block.timestamp, for example when batching timestamps\\n///       - Versions are allowed to \\\"fail\\\" and will be marked as .valid = false\\n///         - Invalid versions will always include the latest valid price as its price field\\n///       - Versions must be committed in order, i.e. all requested versions prior to latestVersion must be available\\n///       - Non-requested versions may be committed, but will not receive a settlement fee\\n///         - This is useful for immediately liquidating an account with a valid off-chain price in between orders\\n///         - Satisfying the above constraints, only versions more recent than the latest version may be committed\\n///       - Current must always be greater than Latest, never equal\\ninterface IOracleProvider {\\n    // sig: 0x652fafab\\n    error OracleProviderUnauthorizedError();\\n\\n    event OracleProviderVersionRequested(uint256 indexed version, bool newPrice);\\n    event OracleProviderVersionFulfilled(OracleVersion version);\\n\\n    function request(IMarket market, address account) external;\\n    function status() external view returns (OracleVersion memory, uint256);\\n    function latest() external view returns (OracleVersion memory);\\n    function current() external view returns (uint256);\\n    function at(uint256 timestamp) external view returns (OracleVersion memory, OracleReceipt memory);\\n}\",\"keccak256\":\"0xf5f11c678eb5bc91447ef0d919e2dd9dfa266985cd58597e3ee87fe3fca335c9\",\"license\":\"Apache-2.0\"},\"@equilibria/perennial-v2/contracts/interfaces/IOracleProviderFactory.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.13;\\n\\nimport \\\"../types/OracleVersion.sol\\\";\\nimport \\\"./IOracleProvider.sol\\\";\\n\\ninterface IOracleProviderFactory {\\n    event OracleCreated(IOracleProvider indexed oracle, bytes32 indexed id);\\n\\n    function oracles(bytes32 id) external view returns (IOracleProvider);\\n    function ids(IOracleProvider oracleProvider) external view returns (bytes32 id);\\n}\",\"keccak256\":\"0x10eb1122101464339de763d911365e5b3baf10f66ef6a269bed3f36193285328\",\"license\":\"Apache-2.0\"},\"@equilibria/perennial-v2/contracts/libs/CheckpointLib.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.13;\\n\\nimport \\\"@equilibria/root/accumulator/types/Accumulator6.sol\\\";\\nimport \\\"../interfaces/IMarket.sol\\\";\\nimport \\\"../types/OracleVersion.sol\\\";\\nimport \\\"../types/RiskParameter.sol\\\";\\nimport \\\"../types/Global.sol\\\";\\nimport \\\"../types/Local.sol\\\";\\nimport \\\"../types/Order.sol\\\";\\nimport \\\"../types/Version.sol\\\";\\nimport \\\"../types/Checkpoint.sol\\\";\\nimport \\\"../types/Guarantee.sol\\\";\\n\\n\\nstruct CheckpointAccumulationResponse {\\n    /// @dev Total Collateral change due to collateral, price override, and trade fee and offset\\n    Fixed6 collateral;\\n\\n    /// @dev Liquidation fee accumulated for this checkpoint (only if the order is protected)\\n    UFixed6 liquidationFee;\\n\\n    /// @dev Subtractive fee accumulated from the previous position to the next position (this amount is included in the linear fee)\\n    UFixed6 subtractiveFee;\\n\\n    /// @dev Solver fee accumulated the previous position to the next position (this amount is included in the linear fee)\\n    UFixed6 solverFee;\\n}\\n\\nstruct CheckpointAccumulationResult {\\n    /// @dev Total Collateral change due to pnl, funding, and interest from the previous position to the next position\\n    Fixed6 collateral;\\n\\n    /// @dev Collateral change from the difference between the price override and underlying market price\\n    Fixed6 priceOverride;\\n\\n    /// @dev Trade fee accumulated for this checkpoint\\n    UFixed6 tradeFee;\\n\\n    /// @dev Trade price impact accumulated for this checkpoint\\n    Fixed6 offset;\\n\\n    /// @dev Settlement fee charged for this checkpoint\\n    UFixed6 settlementFee;\\n\\n    /// @dev Liquidation fee accumulated for this checkpoint (only if the order is protected)\\n    UFixed6 liquidationFee;\\n\\n    /// @dev Subtractive fee accumulated from the previous position to the next position (this amount is included in the linear fee)\\n    UFixed6 subtractiveFee;\\n\\n    /// @dev Solver fee accumulated the previous position to the next position (this amount is included in the linear fee)\\n    UFixed6 solverFee;\\n}\\n\\n/// @title CheckpointLib\\n/// @dev (external-safe): this library is safe to externalize\\n/// @notice Manages the logic for the local order accumulation\\nlibrary CheckpointLib {\\n    /// @notice Accumulate pnl and fees from the latest position to next position\\n    /// @param order The next order\\n    /// @param fromVersion The previous latest version\\n    /// @param toVersion The next latest version\\n    /// @return next The next checkpoint\\n    /// @return response The accumulated pnl and fees\\n    function accumulate(\\n        IMarket.Context memory context,\\n        IMarket.SettlementContext memory settlementContext,\\n        uint256 orderId,\\n        Order memory order,\\n        Guarantee memory guarantee,\\n        Version memory fromVersion,\\n        Version memory toVersion\\n    ) external returns (Checkpoint memory next, CheckpointAccumulationResponse memory) {\\n        CheckpointAccumulationResult memory result;\\n\\n        // accumulate\\n        result.collateral = _accumulateCollateral(context.latestPositionLocal, fromVersion, toVersion);\\n        result.priceOverride = _accumulatePriceOverride(guarantee, toVersion);\\n        (result.tradeFee, result.subtractiveFee, result.solverFee) = _accumulateFee(order, guarantee, toVersion);\\n        result.offset = _accumulateOffset(order, guarantee, toVersion);\\n        result.settlementFee = _accumulateSettlementFee(order, guarantee, toVersion);\\n        result.liquidationFee = _accumulateLiquidationFee(order, toVersion);\\n\\n        // update checkpoint\\n        next.collateral = settlementContext.latestCheckpoint.collateral\\n            .sub(settlementContext.latestCheckpoint.tradeFee)                       // trade fee processed post settlement\\n            .sub(Fixed6Lib.from(settlementContext.latestCheckpoint.settlementFee)); // settlement / liquidation fee processed post settlement\\n        next.collateral = next.collateral\\n            .add(settlementContext.latestCheckpoint.transfer)                       // deposit / withdrawal processed post settlement\\n            .add(result.collateral)                                                 // incorporate collateral change at this settlement\\n            .add(result.priceOverride);                                             // incorporate price override pnl at this settlement\\n        next.transfer = order.collateral;\\n        next.tradeFee = Fixed6Lib.from(result.tradeFee).add(result.offset);\\n        next.settlementFee = result.settlementFee.add(result.liquidationFee);\\n\\n        emit IMarket.AccountPositionProcessed(context.account, orderId, order, result);\\n\\n        return (next, _response(result));\\n    }\\n\\n    /// @notice Converts the accumulation result into a response\\n    /// @param result The accumulation result\\n    /// @return response The accumulation response\\n    function _response(\\n        CheckpointAccumulationResult memory result\\n    ) private pure returns (CheckpointAccumulationResponse memory response) {\\n        response.collateral = result.collateral\\n            .add(result.priceOverride)\\n            .sub(Fixed6Lib.from(result.tradeFee))\\n            .sub(result.offset)\\n            .sub(Fixed6Lib.from(result.settlementFee));\\n        response.liquidationFee = result.liquidationFee;\\n        response.subtractiveFee = result.subtractiveFee;\\n        response.solverFee = result.solverFee;\\n    }\\n\\n    /// @notice Accumulate pnl, funding, and interest from the latest position to next position\\n    /// @param fromPosition The previous latest position\\n    /// @param fromVersion The previous latest version\\n    /// @param toVersion The next version\\n    function _accumulateCollateral(\\n        Position memory fromPosition,\\n        Version memory fromVersion,\\n        Version memory toVersion\\n    ) private pure returns (Fixed6) {\\n        return toVersion.makerValue.accumulated(fromVersion.makerValue, fromPosition.maker)\\n            .add(toVersion.longValue.accumulated(fromVersion.longValue, fromPosition.long))\\n            .add(toVersion.shortValue.accumulated(fromVersion.shortValue, fromPosition.short));\\n    }\\n\\n    /// @notice Accumulate trade fees for the next position\\n    /// @param order The next order\\n    /// @param guarantee The next guarantee\\n    /// @param toVersion The next version\\n    function _accumulateFee(\\n        Order memory order,\\n        Guarantee memory guarantee,\\n        Version memory toVersion\\n    ) private pure returns (UFixed6 tradeFee, UFixed6 subtractiveFee, UFixed6 solverFee) {\\n        UFixed6 takerTotal = order.takerTotal().sub(guarantee.takerFee);\\n\\n        // accumulate total trade fees on maker and taker orders\\n        UFixed6 makerFee = Fixed6Lib.ZERO\\n            .sub(toVersion.makerFee.accumulated(Accumulator6(Fixed6Lib.ZERO), order.makerTotal()))\\n            .abs();\\n        UFixed6 takerFee = Fixed6Lib.ZERO\\n            .sub(toVersion.takerFee.accumulated(Accumulator6(Fixed6Lib.ZERO), takerTotal))\\n            .abs();\\n\\n        // compute portion of trade fees that are subtractive\\n        UFixed6 makerSubtractiveFee = order.makerTotal().isZero() ?\\n            UFixed6Lib.ZERO :\\n            makerFee.muldiv(order.makerReferral, order.makerTotal());\\n        UFixed6 takerSubtractiveFee = takerTotal.isZero() ?\\n            UFixed6Lib.ZERO :\\n            takerFee.muldiv(order.takerReferral, takerTotal);\\n\\n        // compute portion of subtractive fees that are solver fees\\n        solverFee = takerTotal.isZero() ?\\n            UFixed6Lib.ZERO :\\n            takerFee.muldiv(guarantee.referral, takerTotal); // guarantee.referral is instantiated as a subset of order.takerReferral\\n\\n        tradeFee = makerFee.add(takerFee);\\n        subtractiveFee = makerSubtractiveFee.add(takerSubtractiveFee).sub(solverFee);\\n\\n    }\\n\\n    /// @notice Accumulate price offset for the next position\\n    /// @dev This includes adjustment for linear, proportional, and adiabatic order fees\\n    /// @param order The next order\\n    /// @param guarantee The next guarantee\\n    /// @param toVersion The next version\\n    function _accumulateOffset(\\n        Order memory order,\\n        Guarantee memory guarantee,\\n        Version memory toVersion\\n    ) private pure returns (Fixed6) {\\n        (UFixed6 takerPos, UFixed6 takerNeg) =\\n            (order.takerPos().sub(guarantee.takerPos), order.takerNeg().sub(guarantee.takerNeg));\\n\\n        return Fixed6Lib.ZERO\\n            .sub(toVersion.makerOffset.accumulated(Accumulator6(Fixed6Lib.ZERO), order.makerTotal()))\\n            .sub(toVersion.takerPosOffset.accumulated(Accumulator6(Fixed6Lib.ZERO), takerPos))\\n            .sub(toVersion.takerNegOffset.accumulated(Accumulator6(Fixed6Lib.ZERO), takerNeg));\\n    }\\n\\n\\n    /// @notice Accumulate settlement fees for the next position\\n    /// @param order The next order\\n    /// @param guarantee The next guarantee\\n    /// @param toVersion The next version\\n    function _accumulateSettlementFee(\\n        Order memory order,\\n        Guarantee memory guarantee,\\n        Version memory toVersion\\n    ) private pure returns (UFixed6) {\\n        uint256 orders = order.orders - guarantee.orders;\\n\\n        return toVersion.settlementFee.accumulated(Accumulator6(Fixed6Lib.ZERO), UFixed6Lib.from(orders)).abs();\\n    }\\n\\n    /// @notice Accumulate liquidation fees for the next position\\n    /// @param order The next order\\n    /// @param toVersion The next version\\n    function _accumulateLiquidationFee(\\n        Order memory order,\\n        Version memory toVersion\\n    ) private pure returns (UFixed6) {\\n        if (!order.protected()) return UFixed6Lib.ZERO;\\n        return toVersion.liquidationFee.accumulated(Accumulator6(Fixed6Lib.ZERO), UFixed6Lib.ONE).abs();\\n    }\\n\\n    /// @notice Accumulate price override pnl for the next position\\n    /// @param guarantee The next guarantee\\n    /// @param toVersion The next version\\n    function _accumulatePriceOverride(\\n        Guarantee memory guarantee,\\n        Version memory toVersion\\n    ) private pure returns (Fixed6) {\\n        if (!toVersion.valid) return Fixed6Lib.ZERO;\\n        return guarantee.taker().mul(toVersion.price).sub(guarantee.notional);\\n    }\\n}\\n\",\"keccak256\":\"0x3cee07e0b8282584ec46d0f2ecc4cf5487195186dff7f8dcebfa07bfe33447f4\",\"license\":\"Apache-2.0\"},\"@equilibria/perennial-v2/contracts/libs/VersionLib.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.13;\\n\\nimport \\\"@equilibria/root/accumulator/types/Accumulator6.sol\\\";\\nimport \\\"@equilibria/root/accumulator/types/UAccumulator6.sol\\\";\\nimport \\\"../interfaces/IMarket.sol\\\";\\nimport \\\"../types/ProtocolParameter.sol\\\";\\nimport \\\"../types/MarketParameter.sol\\\";\\nimport \\\"../types/RiskParameter.sol\\\";\\nimport \\\"../types/Global.sol\\\";\\nimport \\\"../types/Position.sol\\\";\\nimport \\\"../types/Version.sol\\\";\\nimport \\\"../types/OracleVersion.sol\\\";\\nimport \\\"../types/OracleReceipt.sol\\\";\\n\\n/// @dev The response of the version accumulation\\n///      Contains only select fee information needed for the downstream market contract\\n///      Returned by the accumulate function\\nstruct VersionAccumulationResponse {\\n    /// @dev The total market fee charged including (tradeFee, tradeOffsetMarket, fundingFee, interestFee)\\n    UFixed6 marketFee;\\n\\n    /// @dev The settlement fee charged\\n    UFixed6 settlementFee;\\n\\n    /// @dev The market's adiabatic exposure\\n    Fixed6 marketExposure;\\n}\\n\\n/// @dev The result of the version accumulation\\n///      Contains all the accumulated values for the version\\n///      Emitted via the PositionProcessed event\\nstruct VersionAccumulationResult {\\n    /// @dev The trade fee charged\\n    UFixed6 tradeFee;\\n\\n    /// @dev The subtractive fee charged\\n    UFixed6 subtractiveFee;\\n\\n    /// @dev The total price impact of the trade (including linear, proportional, and adiabatic)\\n    Fixed6 tradeOffset;\\n\\n    /// @dev The portion of the trade offset that the makers receive\\n    Fixed6 tradeOffsetMaker;\\n\\n    /// @dev The portion of the trade offset that the market receives (if there are no makers)\\n    UFixed6 tradeOffsetMarket;\\n\\n    /// @dev The adiabatic exposure accrued\\n    Fixed6 adiabaticExposure;\\n\\n    /// @dev The adiabatic exposure accrued by makers\\n    Fixed6 adiabaticExposureMaker;\\n\\n    /// @dev The adiabatic exposure accrued by the market\\n    Fixed6 adiabaticExposureMarket;\\n\\n    /// @dev Funding accrued by makers\\n    Fixed6 fundingMaker;\\n\\n    /// @dev Funding accrued by longs\\n    Fixed6 fundingLong;\\n\\n    /// @dev Funding accrued by shorts\\n    Fixed6 fundingShort;\\n\\n    /// @dev Funding received by the protocol\\n    UFixed6 fundingFee;\\n\\n    /// @dev Interest accrued by makers\\n    Fixed6 interestMaker;\\n\\n    /// @dev Interest accrued by longs\\n    Fixed6 interestLong;\\n\\n    /// @dev Interest accrued by shorts\\n    Fixed6 interestShort;\\n\\n    /// @dev Interest received by the protocol\\n    UFixed6 interestFee;\\n\\n    /// @dev Price-based profit/loss accrued by makers\\n    Fixed6 pnlMaker;\\n\\n    /// @dev Price-based profit/loss accrued by longs\\n    Fixed6 pnlLong;\\n\\n    /// @dev Price-based profit/loss accrued by shorts\\n    Fixed6 pnlShort;\\n\\n    /// @dev Total settlement fee charged\\n    UFixed6 settlementFee;\\n\\n    /// @dev Snapshot of the riskParameter.liquidationFee at the version (0 if not valid)\\n    UFixed6 liquidationFee;\\n}\\n\\n/// @dev The in-memory context for the version accumulation\\nstruct VersionAccumulationContext {\\n    Global global;\\n    Position fromPosition;\\n    uint256 orderId;\\n    Order order;\\n    Guarantee guarantee;\\n    OracleVersion fromOracleVersion;\\n    OracleVersion toOracleVersion;\\n    OracleReceipt toOracleReceipt;\\n    MarketParameter marketParameter;\\n    RiskParameter riskParameter;\\n}\\n\\n/// @title VersionLib\\n/// @dev (external-safe): this library is safe to externalize\\n/// @notice Manages the logic for the global order accumulation\\nlibrary VersionLib {\\n    /// @notice Accumulates the global state for the period from `fromVersion` to `toOracleVersion`\\n    function accumulate(\\n        IMarket.Context memory context,\\n        IMarket.SettlementContext memory settlementContext,\\n        uint256 newOrderId,\\n        Order memory newOrder,\\n        Guarantee memory newGuarantee,\\n        OracleVersion memory oracleVersion,\\n        OracleReceipt memory oracleReceipt\\n    ) external returns (Version memory next, Global memory nextGlobal, VersionAccumulationResponse memory response) {\\n        VersionAccumulationContext memory accumulationContext = VersionAccumulationContext(\\n            context.global,\\n            context.latestPositionGlobal,\\n            newOrderId,\\n            newOrder,\\n            newGuarantee,\\n            settlementContext.orderOracleVersion,\\n            oracleVersion,\\n            oracleReceipt,\\n            context.marketParameter,\\n            context.riskParameter\\n        );\\n\\n        return _accumulate(settlementContext.latestVersion, accumulationContext);\\n    }\\n\\n    /// @notice Accumulates the global state for the period from `fromVersion` to `toOracleVersion`\\n    /// @param self The Version object to update\\n    /// @param context The accumulation context\\n    /// @return next The accumulated version\\n    /// @return nextGlobal The next global state\\n    /// @return response The accumulation response\\n    function _accumulate(\\n        Version memory self,\\n        VersionAccumulationContext memory context\\n    ) private returns (Version memory next, Global memory nextGlobal, VersionAccumulationResponse memory response) {\\n        VersionAccumulationResult memory result;\\n\\n        // setup next accumulators\\n        _next(self, next);\\n\\n        // record oracle version\\n        (next.valid, next.price) = (context.toOracleVersion.valid, context.toOracleVersion.price);\\n        context.global.latestPrice = context.toOracleVersion.price;\\n\\n        // accumulate settlement fee\\n        result.settlementFee = _accumulateSettlementFee(next, context);\\n\\n        // accumulate liquidation fee\\n        result.liquidationFee = _accumulateLiquidationFee(next, context);\\n\\n        // accumulate fee\\n        _accumulateFee(next, context, result);\\n\\n        // accumulate linear fee\\n        _accumulateLinearFee(next, context, result);\\n\\n        // accumulate proportional fee\\n        _accumulateProportionalFee(next, context, result);\\n\\n        // accumulate adiabatic exposure\\n        _accumulateAdiabaticExposure(next, context, result);\\n\\n        // accumulate adiabatic fee\\n        _accumulateAdiabaticFee(next, context, result);\\n\\n        // if closed, don't accrue anything else\\n        if (context.marketParameter.closed) return _return(context, result, next);\\n\\n        // accumulate funding\\n        (result.fundingMaker, result.fundingLong, result.fundingShort, result.fundingFee) =\\n            _accumulateFunding(next, context);\\n\\n        // accumulate interest\\n        (result.interestMaker, result.interestLong, result.interestShort, result.interestFee) =\\n            _accumulateInterest(next, context);\\n\\n        // accumulate P&L\\n        (result.pnlMaker, result.pnlLong, result.pnlShort) = _accumulatePNL(next, context);\\n\\n        return _return(context, result, next);\\n    }\\n\\n    function _return(\\n        VersionAccumulationContext memory context,\\n        VersionAccumulationResult memory result,\\n        Version memory next\\n    ) private returns (Version memory, Global memory, VersionAccumulationResponse memory) {\\n        emit IMarket.PositionProcessed(context.orderId, context.order, result);\\n\\n        return (next, context.global, _response(result));\\n    }\\n\\n    /// @notice Converts the accumulation result into a response\\n    /// @param result The accumulation result\\n    /// @return response The accumulation response\\n    function _response(\\n        VersionAccumulationResult memory result\\n    ) private pure returns (VersionAccumulationResponse memory response) {\\n        response.marketFee = result.tradeFee\\n            .add(result.tradeOffsetMarket)\\n            .add(result.fundingFee)\\n            .add(result.interestFee);\\n        response.settlementFee = result.settlementFee;\\n        response.marketExposure = result.adiabaticExposureMarket;\\n    }\\n\\n    /// @notice Copies over the version-over-version accumulators to prepare the next version\\n    /// @param self The Version object to update\\n    function _next(Version memory self, Version memory next) internal pure {\\n        next.makerValue._value = self.makerValue._value;\\n        next.longValue._value = self.longValue._value;\\n        next.shortValue._value = self.shortValue._value;\\n    }\\n\\n    /// @notice Globally accumulates settlement fees since last oracle update\\n    /// @param next The Version object to update\\n    /// @param context The accumulation context\\n    function _accumulateSettlementFee(\\n        Version memory next,\\n        VersionAccumulationContext memory context\\n    ) private pure returns (UFixed6 settlementFee) {\\n        uint256 orders = context.order.orders - context.guarantee.orders;\\n        settlementFee = orders == 0 ? UFixed6Lib.ZERO : context.toOracleReceipt.settlementFee;\\n        next.settlementFee.decrement(Fixed6Lib.from(settlementFee), UFixed6Lib.from(orders));\\n    }\\n\\n    /// @notice Globally accumulates hypothetical liquidation fee since last oracle update\\n    /// @param next The Version object to update\\n    /// @param context The accumulation context\\n    function _accumulateLiquidationFee(\\n        Version memory next,\\n        VersionAccumulationContext memory context\\n    ) private pure returns (UFixed6 liquidationFee) {\\n        liquidationFee = context.toOracleVersion.valid ?\\n            context.toOracleReceipt.settlementFee.mul(context.riskParameter.liquidationFee) :\\n            UFixed6Lib.ZERO;\\n        next.liquidationFee.decrement(Fixed6Lib.from(liquidationFee), UFixed6Lib.ONE);\\n    }\\n\\n    /// @notice Globally accumulates linear fees since last oracle update\\n    /// @param next The Version object to update\\n    /// @param context The accumulation context\\n    function _accumulateFee(\\n        Version memory next,\\n        VersionAccumulationContext memory context,\\n        VersionAccumulationResult memory result\\n    ) private pure {\\n        UFixed6 makerFee = context.order.makerTotal()\\n            .mul(context.toOracleVersion.price.abs())\\n            .mul(context.marketParameter.makerFee);\\n        next.makerFee.decrement(Fixed6Lib.from(makerFee), context.order.makerTotal());\\n        UFixed6 makerSubtractiveFee = context.order.makerTotal().isZero() ?\\n            UFixed6Lib.ZERO :\\n            makerFee.muldiv(context.order.makerReferral, context.order.makerTotal());\\n\\n        UFixed6 takerTotal = context.order.takerTotal().sub(context.guarantee.takerFee);\\n        UFixed6 takerFee = takerTotal\\n            .mul(context.toOracleVersion.price.abs())\\n            .mul(context.marketParameter.takerFee);\\n        next.takerFee.decrement(Fixed6Lib.from(takerFee), takerTotal);\\n        UFixed6 takerSubtractiveFee = takerTotal.isZero() ?\\n            UFixed6Lib.ZERO :\\n            takerFee.muldiv(context.order.takerReferral, takerTotal);\\n\\n        result.tradeFee = result.tradeFee.add(makerFee).add(takerFee).sub(makerSubtractiveFee).sub(takerSubtractiveFee);\\n        result.subtractiveFee = result.subtractiveFee.add(makerSubtractiveFee).add(takerSubtractiveFee);\\n    }\\n\\n    /// @notice Globally accumulates linear fees since last oracle update\\n    /// @param next The Version object to update\\n    /// @param context The accumulation context\\n    function _accumulateLinearFee(\\n        Version memory next,\\n        VersionAccumulationContext memory context,\\n        VersionAccumulationResult memory result\\n    ) private pure {\\n        UFixed6 makerLinearFee = context.riskParameter.makerFee.linear(\\n            Fixed6Lib.from(context.order.makerTotal()),\\n            context.toOracleVersion.price.abs()\\n        );\\n        next.makerOffset.decrement(Fixed6Lib.from(makerLinearFee), context.order.makerTotal());\\n\\n        UFixed6 takerPosTotal = context.order.takerPos().sub(context.guarantee.takerPos);\\n        UFixed6 takerPosLinearFee = context.riskParameter.takerFee.linear(\\n            Fixed6Lib.from(takerPosTotal),\\n            context.toOracleVersion.price.abs()\\n        );\\n        next.takerPosOffset.decrement(Fixed6Lib.from(takerPosLinearFee), takerPosTotal);\\n\\n        UFixed6 takerNegTotal = context.order.takerNeg().sub(context.guarantee.takerNeg);\\n        UFixed6 takerNegLinearFee = context.riskParameter.takerFee.linear(\\n            Fixed6Lib.from(takerNegTotal),\\n            context.toOracleVersion.price.abs()\\n        );\\n        next.takerNegOffset.decrement(Fixed6Lib.from(takerNegLinearFee), takerNegTotal);\\n\\n        UFixed6 linearFee = makerLinearFee.add(takerPosLinearFee).add(takerNegLinearFee);\\n        UFixed6 marketFee = context.fromPosition.maker.isZero() ? linearFee : UFixed6Lib.ZERO;\\n        UFixed6 makerFee = linearFee.sub(marketFee);\\n        next.makerValue.increment(Fixed6Lib.from(makerFee), context.fromPosition.maker);\\n\\n        result.tradeOffset = result.tradeOffset.add(Fixed6Lib.from(linearFee));\\n        result.tradeOffsetMaker = result.tradeOffsetMaker.add(Fixed6Lib.from(makerFee));\\n        result.tradeOffsetMarket = result.tradeOffsetMarket.add(marketFee);\\n    }\\n\\n    /// @notice Globally accumulates proportional fees since last oracle update\\n    /// @param next The Version object to update\\n    /// @param context The accumulation context\\n    function _accumulateProportionalFee(\\n        Version memory next,\\n        VersionAccumulationContext memory context,\\n        VersionAccumulationResult memory result\\n    ) private pure {\\n        UFixed6 makerProportionalFee = context.riskParameter.makerFee.proportional(\\n            Fixed6Lib.from(context.order.makerTotal()),\\n            context.toOracleVersion.price.abs()\\n        );\\n        next.makerOffset.decrement(Fixed6Lib.from(makerProportionalFee), context.order.makerTotal());\\n\\n        UFixed6 takerPos = context.order.takerPos().sub(context.guarantee.takerPos);\\n        UFixed6 takerPosProportionalFee = context.riskParameter.takerFee.proportional(\\n            Fixed6Lib.from(takerPos),\\n            context.toOracleVersion.price.abs()\\n        );\\n        next.takerPosOffset.decrement(Fixed6Lib.from(takerPosProportionalFee), takerPos);\\n\\n        UFixed6 takerNeg = context.order.takerNeg().sub(context.guarantee.takerNeg);\\n        UFixed6 takerNegProportionalFee = context.riskParameter.takerFee.proportional(\\n            Fixed6Lib.from(takerNeg),\\n            context.toOracleVersion.price.abs()\\n        );\\n        next.takerNegOffset.decrement(Fixed6Lib.from(takerNegProportionalFee), takerNeg);\\n\\n        UFixed6 proportionalFee = makerProportionalFee.add(takerPosProportionalFee).add(takerNegProportionalFee);\\n        UFixed6 marketFee = context.fromPosition.maker.isZero() ? proportionalFee : UFixed6Lib.ZERO;\\n        UFixed6 makerFee = proportionalFee.sub(marketFee);\\n        next.makerValue.increment(Fixed6Lib.from(makerFee), context.fromPosition.maker);\\n\\n        result.tradeOffset = result.tradeOffset.add(Fixed6Lib.from(proportionalFee));\\n        result.tradeOffsetMaker = result.tradeOffsetMaker.add(Fixed6Lib.from(makerFee));\\n        result.tradeOffsetMarket = result.tradeOffsetMarket.add(marketFee);\\n    }\\n\\n    /// @notice Globally accumulates adiabatic fees since last oracle update\\n    /// @param next The Version object to update\\n    /// @param context The accumulation context\\n    function _accumulateAdiabaticFee(\\n        Version memory next,\\n        VersionAccumulationContext memory context,\\n        VersionAccumulationResult memory result\\n    ) private pure {\\n        Fixed6 adiabaticFee;\\n\\n        // position fee from positive skew taker orders\\n        UFixed6 takerPos = context.order.takerPos().sub(context.guarantee.takerPos);\\n        adiabaticFee = context.riskParameter.takerFee.adiabatic(\\n            context.fromPosition.skew(),\\n            Fixed6Lib.from(takerPos),\\n            context.toOracleVersion.price.abs()\\n        );\\n        next.takerPosOffset.decrement(adiabaticFee, takerPos);\\n        result.tradeOffset = result.tradeOffset.add(adiabaticFee);\\n\\n        // position fee from negative skew taker orders\\n        UFixed6 takerNeg = context.order.takerNeg().sub(context.guarantee.takerNeg);\\n        adiabaticFee = context.riskParameter.takerFee.adiabatic(\\n            context.fromPosition.skew().add(Fixed6Lib.from(takerPos)),\\n            Fixed6Lib.from(-1, takerNeg),\\n            context.toOracleVersion.price.abs()\\n        );\\n        next.takerNegOffset.decrement(adiabaticFee, takerNeg);\\n        result.tradeOffset = result.tradeOffset.add(adiabaticFee);\\n    }\\n\\n    /// @notice Globally accumulates single component of the position fees exposure since last oracle update\\n    /// @param next The Version object to update\\n    /// @param context The accumulation context\\n    /// @param result The accumulation result\\n    function _accumulateAdiabaticExposure(\\n        Version memory next,\\n        VersionAccumulationContext memory context,\\n        VersionAccumulationResult memory result\\n    ) private pure {\\n        Fixed6 exposure = context.riskParameter.takerFee.exposure(context.fromPosition.skew());\\n\\n        Fixed6 adiabaticExposure = context.toOracleVersion.price.sub(context.fromOracleVersion.price).mul(exposure);\\n        Fixed6 adiabaticExposureMaker = adiabaticExposure.mul(Fixed6Lib.NEG_ONE);\\n        Fixed6 adiabaticExposureMarket = context.fromPosition.maker.isZero() ? adiabaticExposureMaker : Fixed6Lib.ZERO;\\n        adiabaticExposureMaker = adiabaticExposureMaker.sub(adiabaticExposureMarket);\\n        next.makerValue.increment(adiabaticExposureMaker, context.fromPosition.maker);\\n\\n        result.adiabaticExposure = adiabaticExposure;\\n        result.adiabaticExposureMarket = adiabaticExposureMarket;\\n        result.adiabaticExposureMaker = adiabaticExposureMaker;\\n    }\\n\\n    /// @notice Globally accumulates all long-short funding since last oracle update\\n    /// @param next The Version object to update\\n    /// @param context The accumulation context\\n    /// @return fundingMaker The total funding accrued by makers\\n    /// @return fundingLong The total funding accrued by longs\\n    /// @return fundingShort The total funding accrued by shorts\\n    /// @return fundingFee The total fee accrued from funding accumulation\\n    function _accumulateFunding(Version memory next, VersionAccumulationContext memory context) private pure returns (\\n        Fixed6 fundingMaker,\\n        Fixed6 fundingLong,\\n        Fixed6 fundingShort,\\n        UFixed6 fundingFee\\n    ) {\\n        Fixed6 toSkew = context.toOracleVersion.valid ?\\n            context.fromPosition.skew().add(context.order.long()).sub(context.order.short()) :\\n            context.fromPosition.skew();\\n\\n        // Compute long-short funding rate\\n        Fixed6 funding = context.global.pAccumulator.accumulate(\\n            context.riskParameter.pController,\\n            toSkew.unsafeDiv(Fixed6Lib.from(context.riskParameter.takerFee.scale)).min(Fixed6Lib.ONE).max(Fixed6Lib.NEG_ONE),\\n            context.fromOracleVersion.timestamp,\\n            context.toOracleVersion.timestamp,\\n            context.fromPosition.takerSocialized().mul(context.fromOracleVersion.price.abs())\\n        );\\n\\n        // Handle maker receive-only status\\n        if (context.riskParameter.makerReceiveOnly && funding.sign() != context.fromPosition.skew().sign())\\n            funding = funding.mul(Fixed6Lib.NEG_ONE);\\n\\n        // Initialize long and short funding\\n        (fundingLong, fundingShort) = (Fixed6Lib.NEG_ONE.mul(funding), funding);\\n\\n        // Compute fee spread\\n        fundingFee = funding.abs().mul(context.marketParameter.fundingFee);\\n        Fixed6 fundingSpread = Fixed6Lib.from(fundingFee).div(Fixed6Lib.from(2));\\n\\n        // Adjust funding with spread\\n        (fundingLong, fundingShort) = (\\n            fundingLong.sub(Fixed6Lib.from(fundingFee)).add(fundingSpread),\\n            fundingShort.sub(fundingSpread)\\n        );\\n\\n        // Redirect net portion of minor's side to maker\\n        if (context.fromPosition.long.gt(context.fromPosition.short)) {\\n            fundingMaker = fundingShort.mul(Fixed6Lib.from(context.fromPosition.socializedMakerPortion()));\\n            fundingShort = fundingShort.sub(fundingMaker);\\n        }\\n        if (context.fromPosition.short.gt(context.fromPosition.long)) {\\n            fundingMaker = fundingLong.mul(Fixed6Lib.from(context.fromPosition.socializedMakerPortion()));\\n            fundingLong = fundingLong.sub(fundingMaker);\\n        }\\n\\n        next.makerValue.increment(fundingMaker, context.fromPosition.maker);\\n        next.longValue.increment(fundingLong, context.fromPosition.long);\\n        next.shortValue.increment(fundingShort, context.fromPosition.short);\\n    }\\n\\n    /// @notice Globally accumulates all maker interest since last oracle update\\n    /// @param next The Version object to update\\n    /// @param context The accumulation context\\n    /// @return interestMaker The total interest accrued by makers\\n    /// @return interestLong The total interest accrued by longs\\n    /// @return interestShort The total interest accrued by shorts\\n    /// @return interestFee The total fee accrued from interest accumulation\\n    function _accumulateInterest(\\n        Version memory next,\\n        VersionAccumulationContext memory context\\n    ) private pure returns (Fixed6 interestMaker, Fixed6 interestLong, Fixed6 interestShort, UFixed6 interestFee) {\\n        UFixed6 notional = context.fromPosition.long.add(context.fromPosition.short).min(context.fromPosition.maker).mul(context.fromOracleVersion.price.abs());\\n\\n        // Compute maker interest\\n        UFixed6 interest = context.riskParameter.utilizationCurve.accumulate(\\n            context.fromPosition.utilization(context.riskParameter),\\n            context.fromOracleVersion.timestamp,\\n            context.toOracleVersion.timestamp,\\n            notional\\n        );\\n\\n        // Compute fee\\n        interestFee = interest.mul(context.marketParameter.interestFee);\\n\\n        // Adjust long and short funding with spread\\n        interestLong = Fixed6Lib.from(\\n            context.fromPosition.major().isZero() ?\\n            interest :\\n            interest.muldiv(context.fromPosition.long, context.fromPosition.long.add(context.fromPosition.short))\\n        );\\n        interestShort = Fixed6Lib.from(interest).sub(interestLong);\\n        interestMaker = Fixed6Lib.from(interest.sub(interestFee));\\n\\n        interestLong = interestLong.mul(Fixed6Lib.NEG_ONE);\\n        interestShort = interestShort.mul(Fixed6Lib.NEG_ONE);\\n        next.makerValue.increment(interestMaker, context.fromPosition.maker);\\n        next.longValue.increment(interestLong, context.fromPosition.long);\\n        next.shortValue.increment(interestShort, context.fromPosition.short);\\n    }\\n\\n    /// @notice Globally accumulates position profit & loss since last oracle update\\n    /// @param next The Version object to update\\n    /// @param context The accumulation context\\n    /// @return pnlMaker The total pnl accrued by makers\\n    /// @return pnlLong The total pnl accrued by longs\\n    /// @return pnlShort The total pnl accrued by shorts\\n    function _accumulatePNL(\\n        Version memory next,\\n        VersionAccumulationContext memory context\\n    ) private pure returns (Fixed6 pnlMaker, Fixed6 pnlLong, Fixed6 pnlShort) {\\n        pnlLong = context.toOracleVersion.price.sub(context.fromOracleVersion.price)\\n            .mul(Fixed6Lib.from(context.fromPosition.longSocialized()));\\n        pnlShort = context.fromOracleVersion.price.sub(context.toOracleVersion.price)\\n            .mul(Fixed6Lib.from(context.fromPosition.shortSocialized()));\\n        pnlMaker = pnlLong.add(pnlShort).mul(Fixed6Lib.NEG_ONE);\\n\\n        next.longValue.increment(pnlLong, context.fromPosition.long);\\n        next.shortValue.increment(pnlShort, context.fromPosition.short);\\n        next.makerValue.increment(pnlMaker, context.fromPosition.maker);\\n    }\\n}\\n\",\"keccak256\":\"0xf3468aeda53f7e0d58b88b5d052a87c8cfa665da34c23b3e0b9434aa83bd57ce\",\"license\":\"Apache-2.0\"},\"@equilibria/perennial-v2/contracts/types/Checkpoint.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.13;\\n\\nimport \\\"@equilibria/root/accumulator/types/Accumulator6.sol\\\";\\nimport \\\"./OracleVersion.sol\\\";\\nimport \\\"./RiskParameter.sol\\\";\\nimport \\\"./Global.sol\\\";\\nimport \\\"./Local.sol\\\";\\nimport \\\"./Order.sol\\\";\\nimport \\\"./Version.sol\\\";\\n\\n/// @dev Checkpoint type\\nstruct Checkpoint {\\n    /// @dev The trade fee that the order incurred at the checkpoint settlement\\n    Fixed6 tradeFee;\\n\\n    // @dev The settlement and liquidation fee that the order incurred at the checkpoint settlement\\n    UFixed6 settlementFee;\\n\\n    /// @dev The amount deposited or withdrawn at the checkpoint settlement\\n    Fixed6 transfer;\\n\\n    /// @dev The collateral at the time of the checkpoint settlement\\n    Fixed6 collateral;\\n}\\nstruct CheckpointStorage { uint256 slot0; }\\nusing CheckpointStorageLib for CheckpointStorage global;\\n\\n/// @dev Manually encodes and decodes the Checkpoint struct into storage.\\n///      (external-safe): this library is safe to externalize\\n///\\n///     struct StoredCheckpoint {\\n///         /* slot 0 */\\n///         int48 tradeFee;\\n///         uint48 settlementFee;\\n///         int64 transfer;\\n///         int64 collateral;\\n///     }\\n///\\nlibrary CheckpointStorageLib {\\n    // sig: 0xba85116a\\n    error CheckpointStorageInvalidError();\\n\\n    function read(CheckpointStorage storage self) internal view returns (Checkpoint memory) {\\n        uint256 slot0 = self.slot0;\\n        return Checkpoint(\\n            Fixed6.wrap(int256(slot0 << (256 - 48)) >> (256 - 48)),\\n            UFixed6.wrap(uint256(slot0 << (256 - 48 - 48)) >> (256 - 48)),\\n            Fixed6.wrap(int256(slot0 << (256 - 48 - 48 - 64)) >> (256 - 64)),\\n            Fixed6.wrap(int256(slot0 << (256 - 48 - 48 - 64 - 64)) >> (256 - 64))\\n        );\\n    }\\n\\n    function store(CheckpointStorage storage self, Checkpoint memory newValue) external {\\n        if (newValue.tradeFee.gt(Fixed6.wrap(type(int48).max))) revert CheckpointStorageInvalidError();\\n        if (newValue.tradeFee.lt(Fixed6.wrap(type(int48).min))) revert CheckpointStorageInvalidError();\\n        if (newValue.settlementFee.gt(UFixed6.wrap(type(uint48).max))) revert CheckpointStorageInvalidError();\\n        if (newValue.transfer.gt(Fixed6.wrap(type(int64).max))) revert CheckpointStorageInvalidError();\\n        if (newValue.transfer.lt(Fixed6.wrap(type(int64).min))) revert CheckpointStorageInvalidError();\\n        if (newValue.collateral.gt(Fixed6.wrap(type(int64).max))) revert CheckpointStorageInvalidError();\\n        if (newValue.collateral.lt(Fixed6.wrap(type(int64).min))) revert CheckpointStorageInvalidError();\\n\\n        uint256 encoded0 =\\n            uint256(Fixed6.unwrap(newValue.tradeFee)        << (256 - 48)) >> (256 - 48) |\\n            uint256(UFixed6.unwrap(newValue.settlementFee)  << (256 - 48)) >> (256 - 48 - 48) |\\n            uint256(Fixed6.unwrap(newValue.transfer)        << (256 - 64)) >> (256 - 48 - 48 - 64) |\\n            uint256(Fixed6.unwrap(newValue.collateral)      << (256 - 64)) >> (256 - 48 - 48 - 64 - 64);\\n\\n        assembly {\\n            sstore(self.slot, encoded0)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x19a22222c8bcaa8b09d17023f057b85e70eb0d7be3894f16d41f5872a7957643\",\"license\":\"Apache-2.0\"},\"@equilibria/perennial-v2/contracts/types/Global.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.13;\\n\\nimport \\\"@equilibria/root/pid/types/PAccumulator6.sol\\\";\\nimport \\\"./ProtocolParameter.sol\\\";\\nimport \\\"./MarketParameter.sol\\\";\\nimport \\\"../libs/VersionLib.sol\\\";\\n\\n/// @dev Global type\\nstruct Global {\\n    /// @dev The current position ID\\n    uint256 currentId;\\n\\n    /// @dev The latest position id\\n    uint256 latestId;\\n\\n    /// @dev The accrued protocol fee\\n    UFixed6 protocolFee;\\n\\n    /// @dev The accrued oracle fee\\n    UFixed6 oracleFee;\\n\\n    /// @dev The accrued risk fee\\n    UFixed6 riskFee;\\n\\n    /// @dev The latest valid price in the market\\n    Fixed6 latestPrice;\\n\\n    /// @dev The accumulated market exposure\\n    Fixed6 exposure;\\n\\n    /// @dev The current PAccumulator state\\n    PAccumulator6 pAccumulator;\\n}\\nusing GlobalLib for Global global;\\nstruct GlobalStorage { uint256 slot0; uint256 slot1; } // SECURITY: must remain at (2) slots\\nusing GlobalStorageLib for GlobalStorage global;\\n\\n/// @title Global\\n/// @dev (external-unsafe): this library must be used internally only\\n/// @notice Holds the global market state\\nlibrary GlobalLib {\\n    /// @notice Updates market exposure based on a change in the risk parameter configuration\\n    /// @param self The Global object to update\\n    /// @param latestRiskParameter The latest risk parameter configuration\\n    /// @param newRiskParameter The new risk parameter configuration\\n    /// @param latestPosition The latest position\\n    function update(\\n        Global memory self,\\n        RiskParameter memory latestRiskParameter,\\n        RiskParameter memory newRiskParameter,\\n        Position memory latestPosition\\n    ) internal pure {\\n        Fixed6 exposureChange = latestRiskParameter.takerFee\\n            .exposure(newRiskParameter.takerFee, latestPosition.skew(), self.latestPrice.abs());\\n        self.exposure = self.exposure.sub(exposureChange);\\n    }\\n\\n    /// @notice Increments the fees by `amount` using current parameters\\n    /// @dev Computes the fees based on the current market parameters\\n    ///      market fee -> trade fee + market's trade offset + funding fee + interest fee\\n    ///        1. oracle fee taken out as a percentage of what's left of market fee\\n    ///        2. risk fee taken out as a percentage of what's left of market fee\\n    ///        3. protocol fee is what's left of market fee\\n    /// @param self The Global object to update\\n    /// @param newLatestId The new latest position id\\n    /// @param accumulation The accumulation result\\n    /// @param marketParameter The current market parameters\\n    /// @param oracleReceipt The receipt of the corresponding oracle version\\n    function update(\\n        Global memory self,\\n        uint256 newLatestId,\\n        VersionAccumulationResponse memory accumulation,\\n        MarketParameter memory marketParameter,\\n        OracleReceipt memory oracleReceipt\\n    ) internal pure {\\n        UFixed6 marketFee = accumulation.marketFee;\\n\\n        UFixed6 oracleFee = marketFee.mul(oracleReceipt.oracleFee);\\n        marketFee = marketFee.sub(oracleFee);\\n\\n        UFixed6 riskFee = marketFee.mul(marketParameter.riskFee);\\n        marketFee = marketFee.sub(riskFee);\\n\\n        self.latestId = newLatestId;\\n        self.protocolFee = self.protocolFee.add(marketFee);\\n        self.oracleFee = self.oracleFee.add(accumulation.settlementFee).add(oracleFee);\\n        self.riskFee = self.riskFee.add(riskFee);\\n        self.exposure = self.exposure.add(accumulation.marketExposure);\\n    }\\n\\n    /// @notice Overrides the price of the oracle with the latest global version if it is empty\\n    /// @param self The Global object to read from\\n    /// @param oracleVersion The oracle version to update\\n    function overrideIfZero(Global memory self, OracleVersion memory oracleVersion) internal pure {\\n        if (oracleVersion.price.isZero()) oracleVersion.price = self.latestPrice;\\n    }\\n}\\n\\n/// @dev Manually encodes and decodes the Global struct into storage.\\n///      (external-safe): this library is safe to externalize\\n///\\n///     struct StoredGlobal {\\n///         /* slot 0 */\\n///         uint32 currentId;           // <= 4.29b\\n///         uint32 latestId;            // <= 4.29b\\n///         uint48 protocolFee;         // <= 281m\\n///         uint48 oracleFee;           // <= 281m\\n///         uint48 riskFee;             // <= 281m\\n///\\n///         /* slot 1 */\\n///         int32 pAccumulator.value;   // <= 214000%\\n///         int24 pAccumulator.skew;    // <= 838%\\n///         int64 latestPrice;          // <= 9.22t\\n///         int64 exposure;             // <= 9.22t\\n///     }\\n///\\nlibrary GlobalStorageLib {\\n    // sig: 0x2142bc27\\n    error GlobalStorageInvalidError();\\n\\n    function read(GlobalStorage storage self) internal view returns (Global memory) {\\n        (uint256 slot0, uint256 slot1) = (self.slot0, self.slot1);\\n        return Global(\\n            uint256(slot0 << (256 - 32)) >> (256 - 32),\\n            uint256(slot0 << (256 - 32 - 32)) >> (256 - 32),\\n            UFixed6.wrap(uint256(slot0 << (256 - 32 - 32 - 48)) >> (256 - 48)),\\n            UFixed6.wrap(uint256(slot0 << (256 - 32 - 32 - 48 - 48)) >> (256 - 48)),\\n            UFixed6.wrap(uint256(slot0 << (256 - 32 - 32 - 48 - 48 - 48)) >> (256 - 48)),\\n            Fixed6.wrap(int256(slot1 << (256 - 32 - 24 - 64)) >> (256 - 64)),\\n            Fixed6.wrap(int256(slot1 << (256 - 32 - 24 - 64 - 64)) >> (256 - 64)),\\n            PAccumulator6(\\n                Fixed6.wrap(int256(slot1 << (256 - 32)) >> (256 - 32)),\\n                Fixed6.wrap(int256(slot1 << (256 - 32 - 24)) >> (256 - 24))\\n            )\\n        );\\n    }\\n\\n    function store(GlobalStorage storage self, Global memory newValue) external {\\n        if (newValue.currentId > uint256(type(uint32).max)) revert GlobalStorageInvalidError();\\n        if (newValue.latestId > uint256(type(uint32).max)) revert GlobalStorageInvalidError();\\n        if (newValue.protocolFee.gt(UFixed6.wrap(type(uint48).max))) revert GlobalStorageInvalidError();\\n        if (newValue.oracleFee.gt(UFixed6.wrap(type(uint48).max))) revert GlobalStorageInvalidError();\\n        if (newValue.riskFee.gt(UFixed6.wrap(type(uint48).max))) revert GlobalStorageInvalidError();\\n        if (newValue.latestPrice.gt(Fixed6.wrap(type(int64).max))) revert GlobalStorageInvalidError();\\n        if (newValue.latestPrice.lt(Fixed6.wrap(type(int64).min))) revert GlobalStorageInvalidError();\\n        if (newValue.exposure.gt(Fixed6.wrap(type(int64).max))) revert GlobalStorageInvalidError();\\n        if (newValue.exposure.lt(Fixed6.wrap(type(int64).min))) revert GlobalStorageInvalidError();\\n        if (newValue.pAccumulator._value.gt(Fixed6.wrap(type(int32).max))) revert GlobalStorageInvalidError();\\n        if (newValue.pAccumulator._value.lt(Fixed6.wrap(type(int32).min))) revert GlobalStorageInvalidError();\\n        if (newValue.pAccumulator._skew.gt(Fixed6.wrap(type(int24).max))) revert GlobalStorageInvalidError();\\n        if (newValue.pAccumulator._skew.lt(Fixed6.wrap(type(int24).min))) revert GlobalStorageInvalidError();\\n\\n        uint256 encoded0 =\\n            uint256(newValue.currentId << (256 - 32)) >> (256 - 32) |\\n            uint256(newValue.latestId << (256 - 32)) >> (256 - 32 - 32) |\\n            uint256(UFixed6.unwrap(newValue.protocolFee) << (256 - 48)) >> (256 - 32 - 32 - 48) |\\n            uint256(UFixed6.unwrap(newValue.oracleFee) << (256 - 48)) >> (256 - 32 - 32 - 48 - 48) |\\n            uint256(UFixed6.unwrap(newValue.riskFee) << (256 - 48)) >> (256 - 32 - 32 - 48 - 48 - 48);\\n\\n        uint256 encoded1 =\\n            uint256(Fixed6.unwrap(newValue.pAccumulator._value) << (256 - 32)) >> (256 - 32) |\\n            uint256(Fixed6.unwrap(newValue.pAccumulator._skew) << (256 - 24)) >> (256 - 32 - 24) |\\n            uint256(Fixed6.unwrap(newValue.latestPrice) << (256 - 64)) >> (256 - 32 - 24 - 64) |\\n            uint256(Fixed6.unwrap(newValue.exposure) << (256 - 64)) >> (256 - 32 - 24 - 64 - 64);\\n\\n        assembly {\\n            sstore(self.slot, encoded0)\\n            sstore(add(self.slot, 1), encoded1)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x44686dc21f3a15b1fd1ea0437a893db6501a89508f9a74302707f8c9dcf8ec1f\",\"license\":\"Apache-2.0\"},\"@equilibria/perennial-v2/contracts/types/Guarantee.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.13;\\n\\nimport \\\"./Order.sol\\\";\\n\\n/// @dev Guarantee type\\nstruct Guarantee {\\n    /// @dev The quantity of guarantees that that will be exempt from the settlement fee\\n    uint256 orders;\\n\\n    /// @dev The notional of the magnitude with the price override (local only)\\n    Fixed6 notional;\\n\\n    /// @dev The positive skew (open long / close short) guarantee size\\n    UFixed6 takerPos;\\n\\n    /// @dev The negative skew (close long / open short) guarantee size\\n    UFixed6 takerNeg;\\n\\n    /// @dev The magnitude of the guarantee that be exempt from the trade fee\\n    UFixed6 takerFee;\\n\\n    /// @dev The referral fee multiplied by the size applicable to the referral (local only)\\n    UFixed6 referral;\\n}\\nusing GuaranteeLib for Guarantee global;\\nstruct GuaranteeStorageGlobal { uint256 slot0; uint256 slot1; } // SECURITY: must remain at (2) slots\\nusing GuaranteeStorageGlobalLib for GuaranteeStorageGlobal global;\\nstruct GuaranteeStorageLocal { uint256 slot0; uint256 slot1; } // SECURITY: must remain at (2) slots\\nusing GuaranteeStorageLocalLib for GuaranteeStorageLocal global;\\n\\n/// @title Guarantee\\n/// @dev (external-unsafe): this library must be used internally only\\n/// @notice Holds the state for an account's update guarantee\\nlibrary GuaranteeLib {\\n    /// @notice Prepares the next guarantee from the current guarantee\\n    /// @param self The guarantee object to update\\n    function next(Guarantee memory self) internal pure  {\\n        invalidate(self);\\n        self.orders = 0;\\n    }\\n\\n    /// @notice Invalidates the guarantee\\n    /// @param self The guarantee object to update\\n    function invalidate(Guarantee memory self) internal pure {\\n        (self.takerPos, self.takerNeg, self.notional, self.takerFee, self.referral) =\\n            (UFixed6Lib.ZERO, UFixed6Lib.ZERO, Fixed6Lib.ZERO, UFixed6Lib.ZERO, UFixed6Lib.ZERO);\\n    }\\n\\n    /// @notice Creates a new guarantee from an order\\n    /// @param order The order to create the guarantee from\\n    /// @param priceOverride The price override\\n    /// @param referralFee The the percentage of the subtractive fee to take as a solver referral fee\\n    /// @param chargeSettlementFee Whether the order will still be charged the settlement fee\\n    /// @param chargeTradeFee Whether the order will still be charged the trade fee\\n    /// @return newGuarantee The resulting guarantee\\n    function from(\\n        Order memory order,\\n        Fixed6 priceOverride,\\n        UFixed6 referralFee,\\n        bool chargeSettlementFee,\\n        bool chargeTradeFee\\n    ) internal pure returns (Guarantee memory newGuarantee) {\\n        // maker orders and one intent order per fill will be required to pay the settlement fee\\n        if (!order.takerTotal().isZero() && !chargeSettlementFee) newGuarantee.orders = order.orders;\\n\\n        (newGuarantee.takerPos, newGuarantee.takerNeg) =\\n            (order.longPos.add(order.shortNeg), order.longNeg.add(order.shortPos));\\n        newGuarantee.takerFee = chargeTradeFee ? UFixed6Lib.ZERO : order.takerTotal();\\n\\n        newGuarantee.notional = taker(newGuarantee).mul(priceOverride);\\n        newGuarantee.referral = order.takerReferral.mul(referralFee);\\n    }\\n\\n    /// @notice Returns the taker delta of the guarantee\\n    /// @param self The guarantee object to check\\n    /// @return The taker delta of the guarantee\\n    function taker(Guarantee memory self) internal pure returns (Fixed6) {\\n        return Fixed6Lib.from(self.takerPos).sub(Fixed6Lib.from(self.takerNeg));\\n    }\\n\\n    /// @notice Returns the total taker delta of the guarantee\\n    /// @param self The guarantee object to check\\n    /// @return The total taker delta of the guarantee\\n    function takerTotal(Guarantee memory self) internal pure returns (UFixed6) {\\n        return self.takerPos.add(self.takerNeg);\\n    }\\n\\n    /// @notice Updates the current global guarantee with a new local guarantee\\n    /// @param self The guarantee object to update\\n    /// @param guarantee The new guarantee\\n    function add(Guarantee memory self, Guarantee memory guarantee) internal pure {\\n        self.orders = self.orders + guarantee.orders;\\n        (self.notional, self.takerPos, self.takerNeg, self.takerFee, self.referral) = (\\n            self.notional.add(guarantee.notional),\\n            self.takerPos.add(guarantee.takerPos),\\n            self.takerNeg.add(guarantee.takerNeg),\\n            self.takerFee.add(guarantee.takerFee),\\n            self.referral.add(guarantee.referral)\\n        );\\n    }\\n}\\n\\n/// @dev Manually encodes and decodes the global Guarantee struct into storage.\\n///      (external-safe): this library is safe to externalize\\n///\\n///     struct StoredGuaranteeGlobal {\\n///         /* slot 0 */\\n///         uint32 orders;\\n///         uint64 takerPos;\\n///         uint64 takerNeg;\\n///         uint64 takerFee;\\n///     }\\n///\\nlibrary GuaranteeStorageGlobalLib {\\n    function read(GuaranteeStorageGlobal storage self) internal view returns (Guarantee memory) {\\n        uint256 slot0 = self.slot0;\\n        return Guarantee(\\n            uint256(slot0 << (256 - 32)) >> (256 - 32),\\n            Fixed6Lib.ZERO,\\n            UFixed6.wrap(uint256(slot0 << (256 - 32 - 64)) >> (256 - 64)),\\n            UFixed6.wrap(uint256(slot0 << (256 - 32 - 64 - 64)) >> (256 - 64)),\\n            UFixed6.wrap(uint256(slot0 << (256 - 32 - 64 - 64 - 64)) >> (256 - 64)),\\n            UFixed6Lib.ZERO\\n        );\\n    }\\n\\n    function store(GuaranteeStorageGlobal storage self, Guarantee memory newValue) internal {\\n        GuaranteeStorageLib.validate(newValue);\\n\\n        uint256 encoded0 =\\n            uint256(newValue.orders << (256 - 32)) >> (256 - 32) |\\n            uint256(UFixed6.unwrap(newValue.takerPos) << (256 - 64)) >> (256 - 32 - 64) |\\n            uint256(UFixed6.unwrap(newValue.takerNeg) << (256 - 64)) >> (256 - 32 - 64 - 64) |\\n            uint256(UFixed6.unwrap(newValue.takerFee) << (256 - 64)) >> (256 - 32 - 64 - 64 - 64);\\n\\n        assembly {\\n            sstore(self.slot, encoded0)\\n        }\\n    }\\n}\\n\\n/// @dev Manually encodes and decodes the local Guarantee struct into storage.\\n///      (external-safe): this library is safe to externalize\\n///\\n///     struct StoredGuaranteeLocal {\\n///         /* slot 0 */\\n///         uint32 orders;\\n///         int64 notional;\\n///         uint64 takerPos;\\n///         uint64 takerNeg;\\n///\\n///         /* slot 1 */\\n///         uint64 takerFee;\\n///         uint64 referral;\\n///     }\\n///\\nlibrary GuaranteeStorageLocalLib {\\n    function read(GuaranteeStorageLocal storage self) internal view returns (Guarantee memory) {\\n        (uint256 slot0, uint256 slot1) = (self.slot0, self.slot1);\\n        return Guarantee(\\n            uint256(slot0 << (256 - 32)) >> (256 - 32),\\n            Fixed6.wrap(int256(slot0 << (256 - 32 - 64)) >> (256 - 64)),\\n            UFixed6.wrap(uint256(slot0 << (256 - 32 - 64 - 64)) >> (256 - 64)),\\n            UFixed6.wrap(uint256(slot0 << (256 - 32 - 64 - 64 - 64)) >> (256 - 64)),\\n            UFixed6.wrap(uint256(slot1 << (256 - 64)) >> (256 - 64)),\\n            UFixed6.wrap(uint256(slot1 << (256 - 64 - 64)) >> (256 - 64))\\n        );\\n    }\\n\\n    function store(GuaranteeStorageLocal storage self, Guarantee memory newValue) internal {\\n        GuaranteeStorageLib.validate(newValue);\\n\\n        if (newValue.notional.gt(Fixed6.wrap(type(int64).max))) revert GuaranteeStorageLib.GuaranteeStorageInvalidError();\\n        if (newValue.notional.lt(Fixed6.wrap(type(int64).min))) revert GuaranteeStorageLib.GuaranteeStorageInvalidError();\\n        if (newValue.referral.gt(UFixed6.wrap(type(uint64).max))) revert GuaranteeStorageLib.GuaranteeStorageInvalidError();\\n\\n        uint256 encoded0 =\\n            uint256(newValue.orders << (256 - 32)) >> (256 - 32) |\\n            uint256(Fixed6.unwrap(newValue.notional) << (256 - 64)) >> (256 - 32 - 64) |\\n            uint256(UFixed6.unwrap(newValue.takerPos) << (256 - 64)) >> (256 - 32 - 64 - 64) |\\n            uint256(UFixed6.unwrap(newValue.takerNeg) << (256 - 64)) >> (256 - 32 - 64 - 64 - 64);\\n        uint256 encode1 =\\n            uint256(UFixed6.unwrap(newValue.takerFee) << (256 - 64)) >> (256 - 64) |\\n            uint256(UFixed6.unwrap(newValue.referral) << (256 - 64)) >> (256 - 64 - 64);\\n\\n        assembly {\\n            sstore(self.slot, encoded0)\\n            sstore(add(self.slot, 1), encode1)\\n        }\\n    }\\n}\\n\\nlibrary GuaranteeStorageLib {\\n    // sig: 0xfd030f36\\n    error GuaranteeStorageInvalidError();\\n\\n    function validate(Guarantee memory newValue) internal pure {\\n        if (newValue.orders > type(uint32).max) revert GuaranteeStorageInvalidError();\\n        if (newValue.takerPos.gt(UFixed6.wrap(type(uint64).max))) revert GuaranteeStorageLib.GuaranteeStorageInvalidError();\\n        if (newValue.takerNeg.gt(UFixed6.wrap(type(uint64).max))) revert GuaranteeStorageLib.GuaranteeStorageInvalidError();\\n        if (newValue.takerFee.gt(UFixed6.wrap(type(uint64).max))) revert GuaranteeStorageLib.GuaranteeStorageInvalidError();\\n    }\\n}\",\"keccak256\":\"0x903286b562e3c7df7481792dea946edde53a369e93245a2645f914c290927c1d\",\"license\":\"Apache-2.0\"},\"@equilibria/perennial-v2/contracts/types/Local.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.13;\\n\\nimport \\\"@equilibria/root/number/types/Fixed6.sol\\\";\\nimport \\\"@equilibria/root/accumulator/types/UAccumulator6.sol\\\";\\nimport \\\"@equilibria/root/accumulator/types/Accumulator6.sol\\\";\\nimport \\\"./Version.sol\\\";\\nimport \\\"./Position.sol\\\";\\nimport \\\"./RiskParameter.sol\\\";\\nimport \\\"./OracleVersion.sol\\\";\\nimport \\\"./Order.sol\\\";\\nimport \\\"./Checkpoint.sol\\\";\\nimport \\\"../libs/CheckpointLib.sol\\\";\\n\\n/// @dev Local type\\nstruct Local {\\n    /// @dev The current position id\\n    uint256 currentId;\\n\\n    /// @dev The latest position id\\n    uint256 latestId;\\n\\n    /// @dev The collateral balance\\n    Fixed6 collateral;\\n\\n    /// @dev The claimable balance\\n    UFixed6 claimable;\\n}\\nusing LocalLib for Local global;\\nstruct LocalStorage { uint256 slot0; uint256 slot1; }\\nusing LocalStorageLib for LocalStorage global;\\n\\n/// @title Local\\n/// @dev (external-unsafe): this library must be used internally only\\n/// @notice Holds the local account state\\nlibrary LocalLib {\\n    /// @notice Updates the collateral with the new deposit or withdrwal\\n    /// @param self The Local object to update\\n    /// @param transfer The amount to update the collateral by\\n    function update(Local memory self, Fixed6 transfer) internal pure {\\n        self.collateral = self.collateral.add(transfer);\\n    }\\n\\n    /// @notice Updates the collateral with the new collateral change\\n    /// @param self The Local object to update\\n    /// @param accumulation The accumulation result\\n    function update(\\n        Local memory self,\\n        uint256 newId,\\n        CheckpointAccumulationResponse memory accumulation\\n    ) internal pure {\\n        self.collateral = self.collateral.add(accumulation.collateral).sub(Fixed6Lib.from(accumulation.liquidationFee));\\n        self.latestId = newId;\\n    }\\n\\n    /// @notice Updates the claimable with the new amount\\n    /// @param self The Local object to update\\n    /// @param amount The amount to update the claimable by\\n    function credit(Local memory self, UFixed6 amount) internal pure {\\n        self.claimable = self.claimable.add(amount);\\n    }\\n}\\n\\n/// @dev Manually encodes and decodes the Local struct into storage.\\n///      (external-safe): this library is safe to externalize\\n///\\n///     struct StoredLocal {\\n///         /* slot 0 */\\n///         uint32 currentId;       // <= 4.29b\\n///         uint32 latestId;        // <= 4.29b\\n///         int64 collateral;       // <= 9.22t\\n///         uint64 claimable;       // <= 18.44t\\n///         bytes4 __DEPRECATED;    // UNSAFE UNTIL RESET\\n///     }\\n///\\nlibrary LocalStorageLib {\\n    // sig: 0xc83d08ec\\n    error LocalStorageInvalidError();\\n\\n    function read(LocalStorage storage self) internal view returns (Local memory) {\\n        uint256 slot0 = self.slot0;\\n        return Local(\\n            uint256(slot0 << (256 - 32)) >> (256 - 32),\\n            uint256(slot0 << (256 - 32 - 32)) >> (256 - 32),\\n            Fixed6.wrap(int256(slot0 << (256 - 32 - 32 - 64)) >> (256 - 64)),\\n            UFixed6.wrap(uint256(slot0 << (256 - 32 - 32 - 64 - 64)) >> (256 - 64))\\n        );\\n    }\\n\\n    function store(LocalStorage storage self, Local memory newValue) internal {\\n        if (newValue.currentId > uint256(type(uint32).max)) revert LocalStorageInvalidError();\\n        if (newValue.latestId > uint256(type(uint32).max)) revert LocalStorageInvalidError();\\n        if (newValue.collateral.gt(Fixed6.wrap(type(int64).max))) revert LocalStorageInvalidError();\\n        if (newValue.collateral.lt(Fixed6.wrap(type(int64).min))) revert LocalStorageInvalidError();\\n        if (newValue.claimable.gt(UFixed6.wrap(type(uint64).max))) revert LocalStorageInvalidError();\\n\\n        uint256 encoded0 =\\n            uint256(newValue.currentId << (256 - 32)) >> (256 - 32) |\\n            uint256(newValue.latestId << (256 - 32)) >> (256 - 32 - 32) |\\n            uint256(Fixed6.unwrap(newValue.collateral) << (256 - 64)) >> (256 - 32 - 32 - 64) |\\n            uint256(UFixed6.unwrap(newValue.claimable) << (256 - 64)) >> (256 - 32 - 32 - 64 - 64);\\n\\n        assembly {\\n            sstore(self.slot, encoded0)\\n        }\\n    }\\n}\",\"keccak256\":\"0x813782df64338a7aec64164e5deeed64b10ba4a3656d63fb05083778045fef4d\",\"license\":\"Apache-2.0\"},\"@equilibria/perennial-v2/contracts/types/MarketParameter.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.13;\\n\\nimport \\\"@equilibria/root/token/types/Token18.sol\\\";\\nimport \\\"@equilibria/root/number/types/UFixed6.sol\\\";\\nimport \\\"./ProtocolParameter.sol\\\";\\n\\n/// @dev MarketParameter type\\nstruct MarketParameter {\\n    /// @dev The fee that is taken out of funding\\n    UFixed6 fundingFee;\\n\\n    /// @dev The fee that is taken out of interest\\n    UFixed6 interestFee;\\n\\n    /// @dev The fee that is taken out of maker and taker fees\\n    UFixed6 makerFee;\\n\\n    /// @dev The fee that is taken out of maker and taker fees\\n    UFixed6 takerFee;\\n\\n    /// @dev The share of the collected fees that is paid to the risk coordinator\\n    UFixed6 riskFee;\\n\\n    /// @dev The maximum amount of orders that can be pending at one time globally\\n    uint256 maxPendingGlobal;\\n\\n    /// @dev The maximum amount of orders that can be pending at one time per account\\n    uint256 maxPendingLocal;\\n\\n    /// @dev Whether the market is in close-only mode\\n    bool closed;\\n\\n     /// @dev Whether the market is in settle-only mode\\n    bool settle;\\n}\\nstruct MarketParameterStorage { uint256 slot0; uint256 slot1; } // SECURITY: must remain at (2) slots\\nusing MarketParameterStorageLib for MarketParameterStorage global;\\n\\n/// @dev Manually encodes and decodes the MarketParameter struct into storage.\\n///      (external-safe): this library is safe to externalize\\n///\\n///    struct StoredMarketParameter {\\n///        /* slot 0 */\\n///        uint24 fundingFee;          // <= 1677%\\n///        uint24 interestFee;         // <= 1677%\\n///        uint24 makerFee;            // <= 1677%\\n///        uint24 takerFee;            // <= 1677%\\n///        uint24 __unallocated__;     // <= 1677%\\n///        uint24 riskFee;             // <= 1677%\\n///        uint16 maxPendingGlobal;    // <= 65k\\n///        uint16 maxPendingLocal;     // <= 65k\\n///        uint48 __unallocated__;     // <= 281m\\n///        uint8 flags;\\n///    }\\n///\\nlibrary MarketParameterStorageLib {\\n    // sig: 0x7c53e926\\n    error MarketParameterStorageInvalidError();\\n\\n    function read(MarketParameterStorage storage self) internal view returns (MarketParameter memory) {\\n        uint256 slot0 = self.slot0;\\n\\n        uint256 flags = uint256(slot0 << (256 - 24 - 24 - 24 - 24 - 24 - 24 - 16 - 16 - 48 - 8)) >> (256 - 8);\\n        (bool closed, bool settle) =\\n            (flags & 0x04 == 0x04, flags & 0x08 == 0x08);\\n\\n        return MarketParameter(\\n            UFixed6.wrap(uint256(slot0 << (256 - 24)) >> (256 - 24)),\\n            UFixed6.wrap(uint256(slot0 << (256 - 24 - 24)) >> (256 - 24)),\\n            UFixed6.wrap(uint256(slot0 << (256 - 24 - 24 - 24)) >> (256 - 24)),\\n            UFixed6.wrap(uint256(slot0 << (256 - 24 - 24 - 24 - 24)) >> (256 - 24)),\\n            UFixed6.wrap(uint256(slot0 << (256 - 24 - 24 - 24 - 24 - 24 - 24)) >> (256 - 24)),\\n            uint256(slot0 << (256 - 24 - 24 - 24 - 24 - 24 - 24 - 16)) >> (256 - 16),\\n            uint256(slot0 << (256 - 24 - 24 - 24 - 24 - 24 - 24 - 16 - 16)) >> (256 - 16),\\n            closed,\\n            settle\\n        );\\n    }\\n\\n    function validate(MarketParameter memory self, ProtocolParameter memory protocolParameter) private pure {\\n        if (self.fundingFee.max(self.interestFee).max(self.makerFee).max(self.takerFee).gt(protocolParameter.maxCut))\\n            revert MarketParameterStorageInvalidError();\\n\\n        if (self.riskFee.gt(UFixed6Lib.ONE))\\n            revert MarketParameterStorageInvalidError();\\n    }\\n\\n    function validateAndStore(\\n        MarketParameterStorage storage self,\\n        MarketParameter memory newValue,\\n        ProtocolParameter memory protocolParameter\\n    ) external {\\n        validate(newValue, protocolParameter);\\n\\n        if (newValue.maxPendingGlobal > uint256(type(uint16).max)) revert MarketParameterStorageInvalidError();\\n        if (newValue.maxPendingLocal > uint256(type(uint16).max)) revert MarketParameterStorageInvalidError();\\n\\n        _store(self, newValue);\\n    }\\n\\n    function _store(MarketParameterStorage storage self, MarketParameter memory newValue) private {\\n        uint256 flags = (newValue.closed ? 0x04 : 0x00) |\\n            (newValue.settle ? 0x08 : 0x00);\\n\\n        uint256 encoded0 =\\n            uint256(UFixed6.unwrap(newValue.fundingFee) << (256 - 24)) >> (256 - 24) |\\n            uint256(UFixed6.unwrap(newValue.interestFee) << (256 - 24)) >> (256 - 24 - 24) |\\n            uint256(UFixed6.unwrap(newValue.makerFee) << (256 - 24)) >> (256 - 24 - 24 - 24) |\\n            uint256(UFixed6.unwrap(newValue.takerFee) << (256 - 24)) >> (256 - 24 - 24 - 24 - 24) |\\n            uint256(UFixed6.unwrap(newValue.riskFee) << (256 - 24)) >> (256 - 24 - 24 - 24 - 24 - 24 - 24) |\\n            uint256(newValue.maxPendingGlobal << (256 - 16)) >> (256 - 24 - 24 - 24 - 24 - 24 - 24 - 16) |\\n            uint256(newValue.maxPendingLocal << (256 - 16)) >> (256 - 24 - 24 - 24 - 24 - 24 - 24 - 16 - 16) |\\n            uint256(flags << (256 - 8)) >> (256 - 24 - 24 - 24 - 24 - 24 - 24 - 16 - 16 - 48 - 8);\\n\\n        assembly {\\n            sstore(self.slot, encoded0)\\n        }\\n    }\\n}\",\"keccak256\":\"0x95338665ec5f9b4f85492ca8c02f5a2a29cf08933bd899f072f062eb966dcc23\",\"license\":\"Apache-2.0\"},\"@equilibria/perennial-v2/contracts/types/OracleReceipt.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.13;\\n\\nimport { UFixed6 } from \\\"@equilibria/root/number/types/UFixed6.sol\\\";\\n\\n/// @dev The cost receipt of for a corresponding oracle version\\nstruct OracleReceipt {\\n    /// @dev The fixed settlement fee of the request\\n    UFixed6 settlementFee;\\n\\n    /// @dev The relative oracle fee percentage of the request\\n    UFixed6 oracleFee;\\n}\\n\",\"keccak256\":\"0x686ef41f5b492f41fdbfe8b27afd42beac4d70b08e90e6f93e6ecffbe9b175a2\",\"license\":\"Apache-2.0\"},\"@equilibria/perennial-v2/contracts/types/OracleVersion.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.13;\\n\\nimport \\\"@equilibria/root/number/types/Fixed6.sol\\\";\\n\\n/// @dev A singular oracle version with its corresponding data\\nstruct OracleVersion {\\n    /// @dev the timestamp of the oracle update\\n    uint256 timestamp;\\n\\n    /// @dev The oracle price of the corresponding version\\n    Fixed6 price;\\n\\n    /// @dev Whether the version is valid\\n    bool valid;\\n}\\n\",\"keccak256\":\"0x543d36affe7b862bf72fac9cfb40a639d2b3fe1b32d9181552d523bc64d9a0f7\",\"license\":\"Apache-2.0\"},\"@equilibria/perennial-v2/contracts/types/Order.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.13;\\n\\nimport \\\"./OracleVersion.sol\\\";\\nimport \\\"./RiskParameter.sol\\\";\\nimport \\\"./Global.sol\\\";\\nimport \\\"./Local.sol\\\";\\nimport \\\"./Position.sol\\\";\\nimport \\\"./MarketParameter.sol\\\";\\n\\n/// @dev Order type\\nstruct Order {\\n    /// @dev The timestamp of the order\\n    uint256 timestamp;\\n\\n    /// @dev The quantity of orders that are included in this order\\n    uint256 orders;\\n\\n    /// @dev The change in the collateral\\n    Fixed6 collateral;\\n\\n    /// @dev The positive skew maker order size\\n    UFixed6 makerPos;\\n\\n    /// @dev The negative skew maker order size\\n    UFixed6 makerNeg;\\n\\n    /// @dev The positive skew long order size\\n    UFixed6 longPos;\\n\\n    /// @dev The negative skew long order size\\n    UFixed6 longNeg;\\n\\n    /// @dev The positive skew short order size\\n    UFixed6 shortPos;\\n\\n    /// @dev The negative skew short order size\\n    UFixed6 shortNeg;\\n\\n    /// @dev The protection status semaphore (local only)\\n    uint256 protection;\\n\\n    /// @dev The referral fee multiplied by the size applicable to the referral\\n    UFixed6 makerReferral;\\n\\n    /// @dev The referral fee multiplied by the size applicable to the referral\\n    UFixed6 takerReferral;\\n}\\nusing OrderLib for Order global;\\nstruct OrderStorageGlobal { uint256 slot0; uint256 slot1; uint256 slot2; } // SECURITY: must remain at (3) slots\\nusing OrderStorageGlobalLib for OrderStorageGlobal global;\\nstruct OrderStorageLocal { uint256 slot0; uint256 slot1; } // SECURITY: must remain at (2) slots\\nusing OrderStorageLocalLib for OrderStorageLocal global;\\n\\n/// @title Order\\n/// @dev (external-unsafe): this library must be used internally only\\n/// @notice Holds the state for an account's update order\\nlibrary OrderLib {\\n    /// @notice Returns whether the order is ready to be settled\\n    /// @param self The order object to check\\n    /// @param latestVersion The latest oracle version\\n    /// @return Whether the order is ready to be settled\\n    function ready(Order memory self, OracleVersion memory latestVersion) internal pure returns (bool) {\\n        return latestVersion.timestamp >= self.timestamp;\\n    }\\n\\n    /// @notice Prepares the next order from the current order\\n    /// @param self The order object to update\\n    /// @param timestamp The current timestamp\\n    function next(Order memory self, uint256 timestamp) internal pure  {\\n        invalidate(self);\\n        (self.timestamp, self.orders, self.collateral, self.protection) = (timestamp, 0, Fixed6Lib.ZERO, 0);\\n    }\\n\\n    /// @notice Invalidates the order\\n    /// @param self The order object to update\\n    function invalidate(Order memory self) internal pure {\\n        (self.makerReferral, self.takerReferral) =\\n            (UFixed6Lib.ZERO, UFixed6Lib.ZERO);\\n        (self.makerPos, self.makerNeg, self.longPos, self.longNeg, self.shortPos, self.shortNeg) =\\n            (UFixed6Lib.ZERO, UFixed6Lib.ZERO, UFixed6Lib.ZERO, UFixed6Lib.ZERO, UFixed6Lib.ZERO, UFixed6Lib.ZERO);\\n    }\\n\\n    /// @notice Creates a new order from the an intent order request\\n    /// @param timestamp The current timestamp\\n    /// @param position The current position\\n    /// @param amount The magnitude and direction of the order\\n    /// @param collateral The change in the collateral\\n    /// @param referralFee The referral fee\\n    /// @return newOrder The resulting order\\n    function from(\\n        uint256 timestamp,\\n        Position memory position,\\n        Fixed6 amount,\\n        Fixed6 collateral,\\n        UFixed6 referralFee\\n    ) internal pure returns (Order memory newOrder) {\\n        newOrder.timestamp = timestamp;\\n        newOrder.collateral = collateral;\\n        newOrder.orders = amount.isZero() ? 0 : 1;\\n        newOrder.takerReferral = amount.abs().mul(referralFee);\\n\\n        // If the order is not counter to the current position, it is opening\\n        if (amount.sign() == 0 || position.skew().sign() == 0 || position.skew().sign() == amount.sign()) {\\n            newOrder.longPos = amount.max(Fixed6Lib.ZERO).abs();\\n            newOrder.shortPos = amount.min(Fixed6Lib.ZERO).abs();\\n\\n        // If the order is counter to the current position, it is closing\\n        } else {\\n            newOrder.shortNeg = amount.max(Fixed6Lib.ZERO).abs();\\n            newOrder.longNeg = amount.min(Fixed6Lib.ZERO).abs();\\n        }\\n    }\\n\\n    /// @notice Creates a new order from the current position and an update request\\n    /// @param timestamp The current timestamp\\n    /// @param position The current position\\n    /// @param collateral The change in the collateral\\n    /// @param newMaker The new maker\\n    /// @param newLong The new long\\n    /// @param newShort The new short\\n    /// @param protect Whether to protect the order\\n    /// @param referralFee The referral fee\\n    /// @return newOrder The resulting order\\n    function from(\\n        uint256 timestamp,\\n        Position memory position,\\n        Fixed6 collateral,\\n        UFixed6 newMaker,\\n        UFixed6 newLong,\\n        UFixed6 newShort,\\n        bool protect,\\n        UFixed6 referralFee\\n    ) internal pure returns (Order memory newOrder) {\\n        (Fixed6 makerAmount, Fixed6 longAmount, Fixed6 shortAmount) = (\\n            Fixed6Lib.from(newMaker).sub(Fixed6Lib.from(position.maker)),\\n            Fixed6Lib.from(newLong).sub(Fixed6Lib.from(position.long)),\\n            Fixed6Lib.from(newShort).sub(Fixed6Lib.from(position.short))\\n        );\\n\\n        UFixed6 referral = makerAmount.abs().add(longAmount.abs()).add(shortAmount.abs()).mul(referralFee);\\n\\n        newOrder = Order(\\n            timestamp,\\n            0,\\n            collateral,\\n            makerAmount.max(Fixed6Lib.ZERO).abs(),\\n            makerAmount.min(Fixed6Lib.ZERO).abs(),\\n            longAmount.max(Fixed6Lib.ZERO).abs(),\\n            longAmount.min(Fixed6Lib.ZERO).abs(),\\n            shortAmount.max(Fixed6Lib.ZERO).abs(),\\n            shortAmount.min(Fixed6Lib.ZERO).abs(),\\n            protect ? 1 : 0,\\n            makerAmount.isZero() ? UFixed6Lib.ZERO : referral,\\n            makerAmount.isZero() ? referral : UFixed6Lib.ZERO\\n        );\\n        if (!isEmpty(newOrder)) newOrder.orders = 1;\\n    }\\n\\n    /// @notice Returns whether the order increases any of the account's positions\\n    /// @return Whether the order increases any of the account's positions\\n    function increasesPosition(Order memory self) internal pure returns (bool) {\\n        return increasesMaker(self) || increasesTaker(self);\\n    }\\n\\n    /// @notice Returns whether the order increases the account's long or short positions\\n    /// @return Whether the order increases the account's long or short positions\\n    function increasesTaker(Order memory self) internal pure returns (bool) {\\n        return !self.longPos.isZero() || !self.shortPos.isZero();\\n    }\\n\\n    /// @notice Returns whether the order increases the account's maker position\\n    /// @return Whether the order increases the account's maker positions\\n    function increasesMaker(Order memory self) internal pure returns (bool) {\\n        return !self.makerPos.isZero();\\n    }\\n\\n    /// @notice Returns whether the order decreases the liquidity of the market\\n    /// @return Whether the order decreases the liquidity of the market\\n    function decreasesLiquidity(Order memory self, Position memory currentPosition) internal pure returns (bool) {\\n        Fixed6 currentSkew = currentPosition.skew();\\n        Fixed6 latestSkew = currentSkew.sub(long(self)).add(short(self));\\n        return !self.makerNeg.isZero() || currentSkew.abs().gt(latestSkew.abs());\\n    }\\n\\n    /// @notice Returns whether the order decreases the efficieny of the market\\n    /// @dev Decreased efficiency ratio intuitively means that the market is \\\"more efficient\\\" on an OI to LP basis.\\n    /// @return Whether the order decreases the liquidity of the market\\n    function decreasesEfficiency(Order memory self, Position memory currentPosition) internal pure returns (bool) {\\n        UFixed6 currentMajor = currentPosition.major();\\n        UFixed6 latestMajor = UFixed6Lib.from(Fixed6Lib.from(currentPosition.long).sub(long(self)))\\n            .max(UFixed6Lib.from(Fixed6Lib.from(currentPosition.short).sub(short(self))));\\n        return !self.makerNeg.isZero() || currentMajor.gt(latestMajor);\\n    }\\n\\n    /// @notice Returns whether the order is applicable for liquidity checks\\n    /// @param self The Order object to check\\n    /// @param marketParameter The market parameter\\n    /// @return Whether the order is applicable for liquidity checks\\n    function liquidityCheckApplicable(\\n        Order memory self,\\n        MarketParameter memory marketParameter\\n    ) internal pure returns (bool) {\\n        return !marketParameter.closed &&\\n        // not \\\"a taker order that is increasing\\\" ->\\n        // not (any of the following)\\n        //  - taker is empty (not a taker order)\\n        //  - taker is increasing (position going more long or short)\\n            ((long(self).isZero() && short(self).isZero()) || increasesTaker(self));\\n    }\\n\\n    /// @notice Returns whether the order is protected\\n    /// @param self The order object to check\\n    /// @return Whether the order is protected\\n    function protected(Order memory self) internal pure returns (bool) {\\n        return self.protection != 0;\\n    }\\n\\n    /// @notice Returns whether the order is empty\\n    /// @param self The order object to check\\n    /// @return Whether the order is empty\\n    function isEmpty(Order memory self) internal pure returns (bool) {\\n        return pos(self).isZero() && neg(self).isZero();\\n    }\\n\\n     /// @notice Returns the direction of the order\\n    /// @dev 0 = maker, 1 = long, 2 = short\\n    /// @param self The position object to check\\n    /// @return The direction of the position\\n    function direction(Order memory self) internal pure returns (uint256) {\\n        if (!self.longPos.isZero() || !self.longNeg.isZero()) return 1;\\n        if (!self.shortPos.isZero() || !self.shortNeg.isZero()) return 2;\\n\\n        return 0;\\n    }\\n\\n    /// @notice Returns the magnitude of the order\\n    /// @param self The order object to check\\n    /// @return The magnitude of the order\\n    function magnitude(Order memory self) internal pure returns (Fixed6) {\\n        return maker(self).add(long(self)).add(short(self));\\n    }\\n\\n    /// @notice Returns the maker delta of the order\\n    /// @param self The order object to check\\n    /// @return The maker delta of the order\\n    function maker(Order memory self) internal pure returns (Fixed6) {\\n        return Fixed6Lib.from(self.makerPos).sub(Fixed6Lib.from(self.makerNeg));\\n    }\\n\\n    /// @notice Returns the long delta of the order\\n    /// @param self The order object to check\\n    /// @return The long delta of the order\\n    function long(Order memory self) internal pure returns (Fixed6) {\\n        return Fixed6Lib.from(self.longPos).sub(Fixed6Lib.from(self.longNeg));\\n    }\\n\\n    /// @notice Returns the short delta of the order\\n    /// @param self The order object to check\\n    /// @return The short delta of the order\\n    function short(Order memory self) internal pure returns (Fixed6) {\\n        return Fixed6Lib.from(self.shortPos).sub(Fixed6Lib.from(self.shortNeg));\\n    }\\n\\n    /// @notice Returns the positive taker delta of the order\\n    /// @param self The order object to check\\n    /// @return The positive taker delta of the order\\n    function takerPos(Order memory self) internal pure returns (UFixed6) {\\n        return self.longPos.add(self.shortNeg);\\n    }\\n\\n    /// @notice Returns the negative taker delta of the order\\n    /// @param self The order object to check\\n    /// @return The negative taker delta of the order\\n    function takerNeg(Order memory self) internal pure returns (UFixed6) {\\n        return self.shortPos.add(self.longNeg);\\n    }\\n\\n    /// @notice Returns the total maker delta of the order\\n    /// @param self The order object to check\\n    /// @return The total maker delta of the order\\n    function makerTotal(Order memory self) internal pure returns (UFixed6) {\\n        return self.makerPos.add(self.makerNeg);\\n    }\\n\\n    /// @notice Returns the total taker delta of the order\\n    /// @param self The order object to check\\n    /// @return The total taker delta of the order\\n    function takerTotal(Order memory self) internal pure returns (UFixed6) {\\n        return self.takerPos().add(self.takerNeg());\\n    }\\n\\n    /// @notice Returns the positive delta of the order\\n    /// @param self The order object to check\\n    /// @return The positive delta of the order\\n    function pos(Order memory self) internal pure returns (UFixed6) {\\n        return self.makerPos.add(self.longPos).add(self.shortPos);\\n    }\\n\\n    /// @notice Returns the positive delta of the order\\n    /// @param self The order object to check\\n    /// @return The positive delta of the order\\n    function neg(Order memory self) internal pure returns (UFixed6) {\\n        return self.makerNeg.add(self.longNeg).add(self.shortNeg);\\n    }\\n\\n    /// @notice Updates the current global order with a new local order\\n    /// @param self The order object to update\\n    /// @param order The new order\\n    function add(Order memory self, Order memory order) internal pure {\\n        (self.orders, self.collateral, self.protection, self.makerReferral, self.takerReferral) = (\\n            self.orders + order.orders,\\n            self.collateral.add(order.collateral),\\n            self.protection + order.protection,\\n            self.makerReferral.add(order.makerReferral),\\n            self.takerReferral.add(order.takerReferral)\\n        );\\n\\n        (self.makerPos, self.makerNeg, self.longPos, self.longNeg, self.shortPos, self.shortNeg) = (\\n            self.makerPos.add(order.makerPos),\\n            self.makerNeg.add(order.makerNeg),\\n            self.longPos.add(order.longPos),\\n            self.longNeg.add(order.longNeg),\\n            self.shortPos.add(order.shortPos),\\n            self.shortNeg.add(order.shortNeg)\\n        );\\n    }\\n\\n    /// @notice Subtracts the latest local order from current global order\\n    /// @param self The order object to update\\n    /// @param order The latest order\\n    function sub(Order memory self, Order memory order) internal pure {\\n        (self.orders, self.collateral, self.protection, self.makerReferral, self.takerReferral) = (\\n            self.orders - order.orders,\\n            self.collateral.sub(order.collateral),\\n            self.protection - order.protection,\\n            self.makerReferral.sub(order.makerReferral),\\n            self.takerReferral.sub(order.takerReferral)\\n        );\\n\\n        (self.makerPos, self.makerNeg, self.longPos, self.longNeg, self.shortPos, self.shortNeg) = (\\n            self.makerPos.sub(order.makerPos),\\n            self.makerNeg.sub(order.makerNeg),\\n            self.longPos.sub(order.longPos),\\n            self.longNeg.sub(order.longNeg),\\n            self.shortPos.sub(order.shortPos),\\n            self.shortNeg.sub(order.shortNeg)\\n        );\\n    }\\n}\\n\\n/// @dev Manually encodes and decodes the global Order struct into storage.\\n///      (external-safe): this library is safe to externalize\\n///\\n///     struct StoredOrderGlobal {\\n///         /* slot 0 */\\n///         uint32 timestamp;\\n///         uint32 orders;\\n///         int64 collateral;\\n///         uint64 makerPos;\\n///         uint64 makerNeg;\\n///\\n///         /* slot 1 */\\n///         uint64 longPos;\\n///         uint64 longNeg;\\n///         uint64 shortPos;\\n///         uint64 shortNeg;\\n///\\n///         /* slot 2 */\\n///         uint64 takerReferral;\\n///         uint64 makerReferral;\\n///     }\\n///\\nlibrary OrderStorageGlobalLib {\\n    function read(OrderStorageGlobal storage self) internal view returns (Order memory) {\\n        (uint256 slot0, uint256 slot1, uint256 slot2) = (self.slot0, self.slot1, self.slot2);\\n\\n        return Order(\\n            uint256(slot0 << (256 - 32)) >> (256 - 32),\\n            uint256(slot0 << (256 - 32 - 32)) >> (256 - 32),\\n            Fixed6.wrap(int256(slot0 << (256 - 32 - 32 - 64)) >> (256 - 64)),\\n            UFixed6.wrap(uint256(slot0 << (256 - 32 - 32 - 64 - 64)) >> (256 - 64)),\\n            UFixed6.wrap(uint256(slot0 << (256 - 32 - 32 - 64 - 64 - 64)) >> (256 - 64)),\\n            UFixed6.wrap(uint256(slot1 << (256 - 64)) >> (256 - 64)),\\n            UFixed6.wrap(uint256(slot1 << (256 - 64 - 64)) >> (256 - 64)),\\n            UFixed6.wrap(uint256(slot1 << (256 - 64 - 64 - 64)) >> (256 - 64)),\\n            UFixed6.wrap(uint256(slot1 << (256 - 64 - 64 - 64 - 64)) >> (256 - 64)),\\n            0,\\n            UFixed6.wrap(uint256(slot2 << (256 - 64)) >> (256 - 64)),\\n            UFixed6.wrap(uint256(slot2 << (256 - 64 - 64)) >> (256 - 64))\\n        );\\n    }\\n\\n    function store(OrderStorageGlobal storage self, Order memory newValue) internal {\\n        OrderStorageLib.validate(newValue);\\n\\n        if (newValue.makerPos.gt(UFixed6.wrap(type(uint64).max))) revert OrderStorageLib.OrderStorageInvalidError();\\n        if (newValue.makerNeg.gt(UFixed6.wrap(type(uint64).max))) revert OrderStorageLib.OrderStorageInvalidError();\\n        if (newValue.longPos.gt(UFixed6.wrap(type(uint64).max))) revert OrderStorageLib.OrderStorageInvalidError();\\n        if (newValue.longNeg.gt(UFixed6.wrap(type(uint64).max))) revert OrderStorageLib.OrderStorageInvalidError();\\n        if (newValue.shortPos.gt(UFixed6.wrap(type(uint64).max))) revert OrderStorageLib.OrderStorageInvalidError();\\n        if (newValue.shortNeg.gt(UFixed6.wrap(type(uint64).max))) revert OrderStorageLib.OrderStorageInvalidError();\\n\\n        uint256 encoded0 =\\n            uint256(newValue.timestamp << (256 - 32)) >> (256 - 32) |\\n            uint256(newValue.orders << (256 - 32)) >> (256 - 32 - 32) |\\n            uint256(Fixed6.unwrap(newValue.collateral) << (256 - 64)) >> (256 - 32 - 32 - 64) |\\n            uint256(UFixed6.unwrap(newValue.makerPos) << (256 - 64)) >> (256 - 32 - 32 - 64 - 64) |\\n            uint256(UFixed6.unwrap(newValue.makerNeg) << (256 - 64)) >> (256 - 32 - 32 - 64 - 64 - 64);\\n        uint256 encoded1 =\\n            uint256(UFixed6.unwrap(newValue.longPos) << (256 - 64)) >> (256 - 64) |\\n            uint256(UFixed6.unwrap(newValue.longNeg) << (256 - 64)) >> (256 - 64 - 64) |\\n            uint256(UFixed6.unwrap(newValue.shortPos) << (256 - 64)) >> (256 - 64 - 64 - 64) |\\n            uint256(UFixed6.unwrap(newValue.shortNeg) << (256 - 64)) >> (256 - 64 - 64 - 64 - 64);\\n        uint256 encoded2 =\\n            uint256(UFixed6.unwrap(newValue.makerReferral) << (256 - 64)) >> (256 - 64) |\\n            uint256(UFixed6.unwrap(newValue.takerReferral) << (256 - 64)) >> (256 - 64 - 64);\\n\\n        assembly {\\n            sstore(self.slot, encoded0)\\n            sstore(add(self.slot, 1), encoded1)\\n            sstore(add(self.slot, 2), encoded2)\\n        }\\n    }\\n}\\n\\n/// @dev Manually encodes and decodes the local Order struct into storage.\\n///\\n///     struct StoredOrderLocal {\\n///         /* slot 0 */\\n///         uint32 timestamp;\\n///         uint32 orders;\\n///         int64 collateral;\\n///         uint2 direction;\\n///         uint62 magnitudePos;\\n///         uint62 magnitudeNeg;\\n///         uint1 protection;\\n///\\n///         /* slot 1 */\\n///         uint64 takerReferral;\\n///         uint64 makerReferral;\\n///     }\\n///\\nlibrary OrderStorageLocalLib {\\n    function read(OrderStorageLocal storage self) internal view returns (Order memory) {\\n        (uint256 slot0, uint256 slot1) = (self.slot0, self.slot1);\\n\\n        uint256 direction = uint256(slot0 << (256 - 32 - 32 - 64 - 2)) >> (256 - 2);\\n        UFixed6 magnitudePos = UFixed6.wrap(uint256(slot0 << (256 - 32 - 32 - 64 - 2 - 62)) >> (256 - 62));\\n        UFixed6 magnitudeNeg = UFixed6.wrap(uint256(slot0 << (256 - 32 - 32 - 64 - 2 - 62 - 62)) >> (256 - 62));\\n\\n        return Order(\\n            uint256(slot0 << (256 - 32)) >> (256 - 32),\\n            uint256(slot0 << (256 - 32 - 32)) >> (256 - 32),\\n            Fixed6.wrap(int256(slot0 << (256 - 32 - 32 - 64)) >> (256 - 64)),\\n            direction == 0 ? magnitudePos : UFixed6Lib.ZERO,\\n            direction == 0 ? magnitudeNeg : UFixed6Lib.ZERO,\\n            direction == 1 ? magnitudePos : UFixed6Lib.ZERO,\\n            direction == 1 ? magnitudeNeg : UFixed6Lib.ZERO,\\n            direction == 2 ? magnitudePos : UFixed6Lib.ZERO,\\n            direction == 2 ? magnitudeNeg : UFixed6Lib.ZERO,\\n            uint256(slot0 << (256 - 32 - 32 - 64 - 2 - 62 - 62 - 1)) >> (256 - 1),\\n            UFixed6.wrap(uint256(slot1 << (256 - 64)) >> (256 - 64)),\\n            UFixed6.wrap(uint256(slot1 << (256 - 64 - 64)) >> (256 - 64))\\n        );\\n    }\\n\\n    function store(OrderStorageLocal storage self, Order memory newValue) internal {\\n        OrderStorageLib.validate(newValue);\\n\\n        (UFixed6 magnitudePos, UFixed6 magnitudeNeg) = (newValue.pos(), newValue.neg());\\n\\n        if (magnitudePos.gt(UFixed6.wrap(2 ** 62 - 1))) revert OrderStorageLib.OrderStorageInvalidError();\\n        if (magnitudeNeg.gt(UFixed6.wrap(2 ** 62 - 1))) revert OrderStorageLib.OrderStorageInvalidError();\\n        if (newValue.protection > 1) revert OrderStorageLib.OrderStorageInvalidError();\\n\\n        uint256 encoded0 =\\n            uint256(newValue.timestamp << (256 - 32)) >> (256 - 32) |\\n            uint256(newValue.orders << (256 - 32)) >> (256 - 32 - 32) |\\n            uint256(Fixed6.unwrap(newValue.collateral) << (256 - 64)) >> (256 - 32 - 32 - 64) |\\n            uint256(newValue.direction() << (256 - 2)) >> (256 - 32 - 32 - 64 - 2) |\\n            uint256(UFixed6.unwrap(magnitudePos) << (256 - 62)) >> (256 - 32 - 32 - 64 - 2 - 62) |\\n            uint256(UFixed6.unwrap(magnitudeNeg) << (256 - 62)) >> (256 - 32 - 32 - 64 - 2 - 62 - 62) |\\n            uint256(newValue.protection << (256 - 1)) >> (256 - 32 - 32 - 64 - 2 - 62 - 62 - 1);\\n        uint256 encoded1 =\\n            uint256(UFixed6.unwrap(newValue.makerReferral) << (256 - 64)) >> (256 - 64) |\\n            uint256(UFixed6.unwrap(newValue.takerReferral) << (256 - 64)) >> (256 - 64 - 64);\\n\\n        assembly {\\n            sstore(self.slot, encoded0)\\n            sstore(add(self.slot, 1), encoded1)\\n        }\\n    }\\n}\\n\\nlibrary OrderStorageLib {\\n    // sig: 0x67e45965\\n    error OrderStorageInvalidError();\\n\\n    function validate(Order memory newValue) internal pure {\\n        if (newValue.timestamp > type(uint32).max) revert OrderStorageInvalidError();\\n        if (newValue.orders > type(uint32).max) revert OrderStorageInvalidError();\\n        if (newValue.collateral.gt(Fixed6.wrap(type(int64).max))) revert OrderStorageInvalidError();\\n        if (newValue.collateral.lt(Fixed6.wrap(type(int64).min))) revert OrderStorageInvalidError();\\n        if (newValue.makerReferral.gt(UFixed6.wrap(type(uint64).max))) revert OrderStorageInvalidError();\\n        if (newValue.takerReferral.gt(UFixed6.wrap(type(uint64).max))) revert OrderStorageInvalidError();\\n    }\\n}\",\"keccak256\":\"0x91cd953e4d8fd43f71ca914ae137a844a74bb436b2f2b6d3e2b79200db4ae98e\",\"license\":\"Apache-2.0\"},\"@equilibria/perennial-v2/contracts/types/Position.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.13;\\n\\nimport \\\"./OracleVersion.sol\\\";\\nimport \\\"./RiskParameter.sol\\\";\\nimport \\\"./Global.sol\\\";\\nimport \\\"./Local.sol\\\";\\nimport \\\"./Order.sol\\\";\\n\\n/// @dev Order type\\nstruct Position {\\n    /// @dev The timestamp of the position\\n    uint256 timestamp;\\n\\n    /// @dev The maker position size\\n    UFixed6 maker;\\n\\n    /// @dev The long position size\\n    UFixed6 long;\\n\\n    /// @dev The short position size\\n    UFixed6 short;\\n}\\nusing PositionLib for Position global;\\nstruct PositionStorageGlobal { uint256 slot0; uint256 slot1; } // SECURITY: must remain at (2) slots\\nusing PositionStorageGlobalLib for PositionStorageGlobal global;\\nstruct PositionStorageLocal { uint256 slot0; uint256 slot1; } // SECURITY: must remain at (2) slots\\nusing PositionStorageLocalLib for PositionStorageLocal global;\\n\\n/// @title Position\\n/// @dev (external-unsafe): this library must be used internally only\\n/// @notice Holds the state for a position\\nlibrary PositionLib {\\n    /// @notice Returns a cloned copy of the position\\n    /// @param self The position object to clone\\n    /// @return A cloned copy of the position\\n    function clone(Position memory self) internal pure returns (Position memory) {\\n        return Position(self.timestamp, self.maker, self.long, self.short);\\n    }\\n\\n    /// @notice Updates the position with a new order\\n    /// @param self The position object to update\\n    /// @param order The new order\\n    function update(Position memory self, Order memory order) internal pure {\\n        self.timestamp = order.timestamp;\\n\\n        (self.maker, self.long, self.short) = (\\n            UFixed6Lib.from(Fixed6Lib.from(self.maker).add(order.maker())),\\n            UFixed6Lib.from(Fixed6Lib.from(self.long).add(order.long())),\\n            UFixed6Lib.from(Fixed6Lib.from(self.short).add(order.short()))\\n        );\\n    }\\n\\n    /// @notice Returns the direction of the position\\n    /// @dev 0 = maker, 1 = long, 2 = short\\n    /// @param self The position object to check\\n    /// @return The direction of the position\\n    function direction(Position memory self) internal pure returns (uint256) {\\n        return self.long.isZero() ? (self.short.isZero() ? 0 : 2) : 1;\\n    }\\n\\n    /// @notice Returns the maximum position size\\n    /// @param self The position object to check\\n    /// @return The maximum position size\\n    function magnitude(Position memory self) internal pure returns (UFixed6) {\\n        return self.long.max(self.short).max(self.maker);\\n    }\\n\\n    /// @notice Returns the maximum taker position size\\n    /// @param self The position object to check\\n    /// @return The maximum taker position size\\n    function major(Position memory self) internal pure returns (UFixed6) {\\n        return self.long.max(self.short);\\n    }\\n\\n    /// @notice Returns the minimum maker position size\\n    /// @param self The position object to check\\n    /// @return The minimum maker position size\\n    function minor(Position memory self) internal pure returns (UFixed6) {\\n        return self.long.min(self.short);\\n    }\\n\\n    /// @notice Returns the skew of the position\\n    /// @param self The position object to check\\n    /// @return The skew of the position\\n    function skew(Position memory self) internal pure returns (Fixed6) {\\n        return Fixed6Lib.from(self.long).sub(Fixed6Lib.from(self.short));\\n    }\\n\\n    /// @notice Returns the utilization of the position\\n    /// @dev utilization = major / (maker + minor)\\n    /// @param self The position object to check\\n    /// @param riskParameter The current risk parameter\\n    /// @return The utilization of the position\\n    function utilization(Position memory self, RiskParameter memory riskParameter) internal pure returns (UFixed6) {\\n        // long-short net utilization of the maker position\\n        UFixed6 netUtilization = major(self).unsafeDiv(self.maker.add(minor(self)));\\n\\n        // efficiency limit utilization of the maker position\\n        UFixed6 efficiencyUtilization = major(self).mul(riskParameter.efficiencyLimit).unsafeDiv(self.maker);\\n\\n        // maximum of the two utilizations, capped at 100%\\n        return netUtilization.max(efficiencyUtilization).min(UFixed6Lib.ONE);\\n    }\\n\\n    /// @notice Returns the portion of the position that is covered by the maker\\n    /// @param self The position object to check\\n    /// @return The portion of the position that is covered by the maker\\n    function socializedMakerPortion(Position memory self) internal pure returns (UFixed6) {\\n        return takerSocialized(self).isZero() ?\\n            UFixed6Lib.ZERO :\\n            takerSocialized(self).sub(minor(self)).div(takerSocialized(self));\\n    }\\n\\n    /// @notice Returns the long position with socialization taken into account\\n    /// @param self The position object to check\\n    /// @return The long position with socialization taken into account\\n    function longSocialized(Position memory self) internal pure returns (UFixed6) {\\n        return self.maker.add(self.short).min(self.long);\\n    }\\n\\n    /// @notice Returns the short position with socialization taken into account\\n    /// @param self The position object to check\\n    /// @return The short position with socialization taken into account\\n    function shortSocialized(Position memory self) internal pure returns (UFixed6) {\\n        return self.maker.add(self.long).min(self.short);\\n    }\\n\\n    /// @notice Returns the major position with socialization taken into account\\n    /// @param self The position object to check\\n    /// @return The major position with socialization taken into account\\n    function takerSocialized(Position memory self) internal pure returns (UFixed6) {\\n        return major(self).min(minor(self).add(self.maker));\\n    }\\n\\n    /// @notice Returns the efficiency of the position\\n    /// @dev efficiency = maker / major\\n    /// @param self The position object to check\\n    /// @return The efficiency of the position\\n    function efficiency(Position memory self) internal pure returns (UFixed6) {\\n        return self.maker.unsafeDiv(major(self)).min(UFixed6Lib.ONE);\\n    }\\n\\n    /// @notice Returns the whether the position is socialized\\n    /// @param self The position object to check\\n    /// @return Whether the position is socialized\\n    function socialized(Position memory self) internal pure returns (bool) {\\n        return self.maker.add(self.short).lt(self.long) || self.maker.add(self.long).lt(self.short);\\n    }\\n\\n    /// @notice Returns the whether the position is single-sided\\n    /// @param self The position object to check\\n    /// @return Whether the position is single-sided\\n    function singleSided(Position memory self) internal pure returns (bool) {\\n        return magnitude(self).eq(self.long.add(self.short).add(self.maker));\\n    }\\n\\n    /// @notice Returns the whether the position is empty\\n    /// @param self The position object to check\\n    /// @return Whether the position is empty\\n    function empty(Position memory self) internal pure returns (bool) {\\n        return magnitude(self).isZero();\\n    }\\n\\n    /// @notice Returns the maintenance requirement of the position\\n    /// @param positionMagnitude The position magnitude value to check\\n    /// @param latestVersion The latest oracle version\\n    /// @param riskParameter The current risk parameter\\n    /// @return The maintenance requirement of the position\\n    function maintenance(\\n        UFixed6 positionMagnitude,\\n        OracleVersion memory latestVersion,\\n        RiskParameter memory riskParameter\\n    ) internal pure returns (UFixed6) {\\n        return _collateralRequirement(positionMagnitude, latestVersion, riskParameter.maintenance, riskParameter.minMaintenance);\\n    }\\n\\n    /// @notice Returns the margin requirement of the position\\n    /// @param positionMagnitude The position magnitude value to check\\n    /// @param latestVersion The latest oracle version\\n    /// @param riskParameter The current risk parameter\\n    /// @param collateralization The collateralization requirement override provided by the caller\\n    /// @return The margin requirement of the position\\n    function margin(\\n        UFixed6 positionMagnitude,\\n        OracleVersion memory latestVersion,\\n        RiskParameter memory riskParameter,\\n        UFixed6 collateralization\\n    ) internal pure returns (UFixed6) {\\n        return _collateralRequirement(positionMagnitude, latestVersion, riskParameter.margin.max(collateralization), riskParameter.minMargin);\\n    }\\n\\n    /// @notice Returns the maintenance requirement of the position\\n    /// @param self The position object to check\\n    /// @param latestVersion The latest oracle version\\n    /// @param riskParameter The current risk parameter\\n    /// @return The maintenance requirement of the position\\n    function maintenance(\\n        Position memory self,\\n        OracleVersion memory latestVersion,\\n        RiskParameter memory riskParameter\\n    ) internal pure returns (UFixed6) {\\n        return maintenance(magnitude(self), latestVersion, riskParameter);\\n    }\\n\\n    /// @notice Returns the margin requirement of the position\\n    /// @param self The position object to check\\n    /// @param latestVersion The latest oracle version\\n    /// @param riskParameter The current risk parameter\\n    /// @return The margin requirement of the position\\n    function margin(\\n        Position memory self,\\n        OracleVersion memory latestVersion,\\n        RiskParameter memory riskParameter\\n    ) internal pure returns (UFixed6) {\\n        return margin(magnitude(self), latestVersion, riskParameter, UFixed6Lib.ZERO);\\n    }\\n\\n    /// @notice Returns the collateral requirement of the position magnitude\\n    /// @param positionMagnitude The position magnitude value to check\\n    /// @param latestVersion The latest oracle version\\n    /// @param requirementRatio The ratio requirement to the notional\\n    /// @param requirementFixed The fixed requirement\\n    /// @return The collateral requirement of the position magnitude\\n    function _collateralRequirement(\\n        UFixed6 positionMagnitude,\\n        OracleVersion memory latestVersion,\\n        UFixed6 requirementRatio,\\n        UFixed6 requirementFixed\\n    ) private pure returns (UFixed6) {\\n        if (positionMagnitude.isZero()) return UFixed6Lib.ZERO;\\n        return positionMagnitude.mul(latestVersion.price.abs()).mul(requirementRatio).max(requirementFixed);\\n    }\\n\\n    /// @notice Returns the whether the position is maintained\\n    /// @dev shortfall is considered solvent for 0-position\\n    /// @param positionMagnitude The position magnitude value to check\\n    /// @param latestVersion The latest oracle version\\n    /// @param riskParameter The current risk parameter\\n    /// @param collateral The current account's collateral\\n    /// @return Whether the position is maintained\\n    function maintained(\\n        UFixed6 positionMagnitude,\\n        OracleVersion memory latestVersion,\\n        RiskParameter memory riskParameter,\\n        Fixed6 collateral\\n    ) internal pure returns (bool) {\\n        return UFixed6Lib.unsafeFrom(collateral).gte(maintenance(positionMagnitude, latestVersion, riskParameter));\\n    }\\n\\n    /// @notice Returns the whether the position is margined\\n    /// @dev shortfall is considered solvent for 0-position\\n    /// @param positionMagnitude The position magnitude value to check\\n    /// @param latestVersion The latest oracle version\\n    /// @param riskParameter The current risk parameter\\n    /// @param collateralization The collateralization requirement override provided by the caller\\n    /// @param collateral The current account's collateral\\n    /// @return Whether the position is margined\\n    function margined(\\n        UFixed6 positionMagnitude,\\n        OracleVersion memory latestVersion,\\n        RiskParameter memory riskParameter,\\n        UFixed6 collateralization,\\n        Fixed6 collateral\\n    ) internal pure returns (bool) {\\n        return UFixed6Lib.unsafeFrom(collateral).gte(margin(positionMagnitude, latestVersion, riskParameter, collateralization));\\n    }\\n\\n    /// @notice Returns the whether the position is maintained\\n    /// @dev shortfall is considered solvent for 0-position\\n    /// @param self The position object to check\\n    /// @param latestVersion The latest oracle version\\n    /// @param riskParameter The current risk parameter\\n    /// @param collateral The current account's collateral\\n    /// @return Whether the position is maintained\\n    function maintained(\\n        Position memory self,\\n        OracleVersion memory latestVersion,\\n        RiskParameter memory riskParameter,\\n        Fixed6 collateral\\n    ) internal pure returns (bool) {\\n        return maintained(magnitude(self), latestVersion, riskParameter, collateral);\\n    }\\n\\n    /// @notice Returns the whether the position is margined\\n    /// @dev shortfall is considered solvent for 0-position\\n    /// @param self The position object to check\\n    /// @param latestVersion The latest oracle version\\n    /// @param riskParameter The current risk parameter\\n    /// @param collateralization The collateralization requirement override provided by the caller\\n    /// @param collateral The current account's collateral\\n    /// @return Whether the position is margined\\n    function margined(\\n        Position memory self,\\n        OracleVersion memory latestVersion,\\n        RiskParameter memory riskParameter,\\n        UFixed6 collateralization,\\n        Fixed6 collateral\\n    ) internal pure returns (bool) {\\n        return margined(magnitude(self), latestVersion, riskParameter, collateralization, collateral);\\n    }\\n}\\n\\n/// @dev Manually encodes and decodes the global Position struct into storage.\\n///      (external-safe): this library is safe to externalize\\n///\\n///     struct StoredPositionGlobal {\\n///         /* slot 0 */\\n///         uint32 timestamp;\\n///         uint32 __unallocated__;\\n///         uint64 maker;\\n///         uint64 long;\\n///         uint64 short;\\n///\\n///         /* slot 1 */\\n///         uint64 maker (deprecated);\\n///         uint192 __unallocated__;\\n///     }\\n///\\nlibrary PositionStorageGlobalLib {\\n    function read(PositionStorageGlobal storage self) internal view returns (Position memory) {\\n        uint256 slot0 = self.slot0;\\n        return Position(\\n            uint256(slot0 << (256 - 32)) >> (256 - 32),\\n            UFixed6.wrap(uint256(slot0 << (256 - 32 - 32 - 64)) >> (256 - 64)),\\n            UFixed6.wrap(uint256(slot0 << (256 - 32 - 32 - 64 - 64)) >> (256 - 64)),\\n            UFixed6.wrap(uint256(slot0 << (256 - 32 - 32 - 64 - 64 - 64)) >> (256 - 64))\\n        );\\n    }\\n\\n    function store(PositionStorageGlobal storage self, Position memory newValue) public {\\n        PositionStorageLib.validate(newValue);\\n\\n        if (newValue.maker.gt(UFixed6.wrap(type(uint64).max))) revert PositionStorageLib.PositionStorageInvalidError();\\n        if (newValue.long.gt(UFixed6.wrap(type(uint64).max))) revert PositionStorageLib.PositionStorageInvalidError();\\n        if (newValue.short.gt(UFixed6.wrap(type(uint64).max))) revert PositionStorageLib.PositionStorageInvalidError();\\n\\n        uint256 encoded0 =\\n            uint256(newValue.timestamp << (256 - 32)) >> (256 - 32) |\\n            uint256(UFixed6.unwrap(newValue.maker) << (256 - 64)) >> (256 - 32 - 32 - 64) |\\n            uint256(UFixed6.unwrap(newValue.long) << (256 - 64)) >> (256 - 32 - 32 - 64 - 64) |\\n            uint256(UFixed6.unwrap(newValue.short) << (256 - 64)) >> (256 - 32 - 32 - 64 - 64 - 64);\\n\\n        assembly {\\n            sstore(self.slot, encoded0)\\n        }\\n    }\\n\\n    function migrate(PositionStorageGlobal storage self) external {\\n        Position memory position = read(self);\\n        uint256 slot1 = self.slot1;\\n        UFixed6 deprecatedMaker = UFixed6.wrap(uint256(slot1 << (256 - 64)) >> (256 - 64));\\n\\n        // only migrate if the deprecated maker is set and new maker is unset to avoid double-migration\\n        if (!position.maker.isZero())\\n            revert PositionStorageLib.PositionStorageInvalidMigrationError();\\n\\n        position.maker = deprecatedMaker;\\n        store(self, position);\\n        assembly {\\n            sstore(add(self.slot, 1), 0) // Part of the v2.3 migration. Can be removed once migration is complete.\\n        }\\n    }\\n}\\n\\n/// @dev Manually encodes and decodes the local Position struct into storage.\\n///      (external-safe): this library is safe to externalize\\n///\\n///     struct StoredPositionLocal (v0) {\\n///         /* slot 0 */\\n///         uint32 timestamp;\\n///         uint216 __unallocated__;\\n///         uint8 layout;\\n///\\n///         /* slot 1 */\\n///         uint2 direction;\\n///         uint62 magnitude;\\n///         uint192 __unallocated__;\\n///     }\\n///\\n///     note: fresh Positions will still default to v0 until they are saved to, but this is safe because\\n///           slot1 is still reserved and will return correct default values.\\n///\\n///     struct StoredPositionLocal (v1) {\\n///         /* slot 0 */\\n///         uint32 timestamp;\\n///         uint2 direction;\\n///         uint62 magnitude;\\n///         uint152 __unallocated__;\\n///         uint8 layout; // v2.3 migration -- can remove once all accounts have been migrated\\n///     }\\n///\\nlibrary PositionStorageLocalLib {\\n    function read(PositionStorageLocal storage self) internal view returns (Position memory) {\\n        (uint256 slot0, uint256 slot1) = (self.slot0, self.slot1);\\n        uint256 layout = uint256(slot0 << (256 - 32 - 216 - 8)) >> (256 - 8);\\n\\n        uint256 direction = layout == 0 ?\\n            uint256(slot1 << (256 - 2)) >> (256 - 2) :\\n            uint256(slot0 << (256 - 32 - 2)) >> (256 - 2);\\n        UFixed6 magnitude = layout == 0 ?\\n            UFixed6.wrap(uint256(slot1 << (256 - 2 - 62)) >> (256 - 62)) :\\n            UFixed6.wrap(uint256(slot0 << (256 - 32 - 2 - 62)) >> (256 - 62));\\n\\n        return Position(\\n            uint256(slot0 << (256 - 32)) >> (256 - 32),\\n            direction == 0 ? magnitude : UFixed6Lib.ZERO,\\n            direction == 1 ? magnitude : UFixed6Lib.ZERO,\\n            direction == 2 ? magnitude : UFixed6Lib.ZERO\\n        );\\n    }\\n\\n    function store(PositionStorageLocal storage self, Position memory newValue) external {\\n        PositionStorageLib.validate(newValue);\\n\\n        uint256 layout = 1;\\n        UFixed6 magnitude = newValue.magnitude();\\n\\n        if (magnitude.gt(UFixed6.wrap(2 ** 62 - 1))) revert PositionStorageLib.PositionStorageInvalidError();\\n\\n        uint256 encoded0 =\\n            uint256(newValue.timestamp << (256 - 32)) >> (256 - 32) |\\n            uint256(newValue.direction() << (256 - 2)) >> (256 - 32 - 2) |\\n            uint256(UFixed6.unwrap(magnitude) << (256 - 62)) >> (256 - 32 - 2 - 62) |\\n            uint256(layout << (256 - 8)) >> (256 - 32 - 2 - 62 - 152 - 8);\\n\\n        assembly {\\n            sstore(self.slot, encoded0)\\n            sstore(add(self.slot, 1), 0) // Part of the v2.3 migration. Can be removed once migration is complete.\\n        }\\n    }\\n}\\n\\nlibrary PositionStorageLib {\\n    // sig: 0x52a8a97f\\n    error PositionStorageInvalidError();\\n    // sig: 0x1bacb3a2\\n    error PositionStorageInvalidMigrationError();\\n\\n    function validate(Position memory newValue) internal pure {\\n        if (newValue.timestamp > type(uint32).max) revert PositionStorageInvalidError();\\n    }\\n}\",\"keccak256\":\"0x36ed4d9bfacef9ebe8e1ef2dd398d66d820b06df563751f2a759626bbc8e27b2\",\"license\":\"Apache-2.0\"},\"@equilibria/perennial-v2/contracts/types/ProtocolParameter.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.13;\\n\\nimport \\\"@equilibria/root/number/types/UFixed6.sol\\\";\\n\\n/// @dev ProtocolParameter type\\nstruct ProtocolParameter {\\n    /// @dev The maximum for market fee parameters\\n    UFixed6 maxFee;\\n\\n    /// @dev The maximum for market absolute fee parameters\\n    UFixed6 maxFeeAbsolute;\\n\\n    /// @dev The maximum for market cut parameters\\n    UFixed6 maxCut;\\n\\n    /// @dev The maximum for market rate parameters\\n    UFixed6 maxRate;\\n\\n    /// @dev The minimum for market maintenance parameters\\n    UFixed6 minMaintenance;\\n\\n    /// @dev The minimum for market efficiency parameters\\n    UFixed6 minEfficiency;\\n\\n    /// @dev The default referrer fee percentage for orders\\n    UFixed6 referralFee;\\n\\n    /// @dev The minimum ratio between scale vs makerLimit / efficiencyLimit\\n    UFixed6 minScale;\\n}\\nstruct StoredProtocolParameter {\\n    /* slot 0 (28) */\\n    uint24 maxFee;                  // <= 1677%\\n    uint48 maxFeeAbsolute;          // <= 281m\\n    uint24 maxCut;                  // <= 1677%\\n    uint32 maxRate;                 // <= 214748% (capped at 31 bits to accommodate int32 rates)\\n    uint24 minMaintenance;          // <= 1677%\\n    uint24 minEfficiency;           // <= 1677%\\n    uint24 referralFee;             // <= 1677%\\n    uint24 minScale;                // <= 1677%\\n}\\nstruct ProtocolParameterStorage { StoredProtocolParameter value; } // SECURITY: must remain at (1) slots\\nusing ProtocolParameterStorageLib for ProtocolParameterStorage global;\\n\\n/// @dev (external-safe): this library is safe to externalize\\nlibrary ProtocolParameterStorageLib {\\n    // sig: 0x4dc1bc59\\n    error ProtocolParameterStorageInvalidError();\\n\\n    function read(ProtocolParameterStorage storage self) internal view returns (ProtocolParameter memory) {\\n        StoredProtocolParameter memory value = self.value;\\n        return ProtocolParameter(\\n            UFixed6.wrap(uint256(value.maxFee)),\\n            UFixed6.wrap(uint256(value.maxFeeAbsolute)),\\n            UFixed6.wrap(uint256(value.maxCut)),\\n            UFixed6.wrap(uint256(value.maxRate)),\\n            UFixed6.wrap(uint256(value.minMaintenance)),\\n            UFixed6.wrap(uint256(value.minEfficiency)),\\n            UFixed6.wrap(uint256(value.referralFee)),\\n            UFixed6.wrap(uint256(value.minScale))\\n        );\\n    }\\n\\n    function validate(ProtocolParameter memory self) internal pure {\\n        if (self.maxCut.gt(UFixed6Lib.ONE)) revert ProtocolParameterStorageInvalidError();\\n        if (self.referralFee.gt(UFixed6Lib.ONE)) revert ProtocolParameterStorageInvalidError();\\n        if (self.minScale.gt(UFixed6Lib.ONE)) revert ProtocolParameterStorageInvalidError();\\n    }\\n\\n    function validateAndStore(ProtocolParameterStorage storage self, ProtocolParameter memory newValue) internal {\\n        validate(newValue);\\n\\n        if (newValue.maxFee.gt(UFixed6.wrap(type(uint24).max))) revert ProtocolParameterStorageInvalidError();\\n        if (newValue.maxFeeAbsolute.gt(UFixed6.wrap(type(uint48).max))) revert ProtocolParameterStorageInvalidError();\\n        if (newValue.maxRate.gt(UFixed6.wrap(type(uint32).max / 2))) revert ProtocolParameterStorageInvalidError();\\n        if (newValue.minMaintenance.gt(UFixed6.wrap(type(uint24).max))) revert ProtocolParameterStorageInvalidError();\\n        if (newValue.minEfficiency.gt(UFixed6.wrap(type(uint24).max))) revert ProtocolParameterStorageInvalidError();\\n\\n        self.value = StoredProtocolParameter(\\n            uint24(UFixed6.unwrap(newValue.maxFee)),\\n            uint48(UFixed6.unwrap(newValue.maxFeeAbsolute)),\\n            uint24(UFixed6.unwrap(newValue.maxCut)),\\n            uint32(UFixed6.unwrap(newValue.maxRate)),\\n            uint24(UFixed6.unwrap(newValue.minMaintenance)),\\n            uint24(UFixed6.unwrap(newValue.minEfficiency)),\\n            uint24(UFixed6.unwrap(newValue.referralFee)),\\n            uint24(UFixed6.unwrap(newValue.minScale))\\n        );\\n    }\\n}\",\"keccak256\":\"0x5579346699f5dbf17553654cd03ed38e6f4503452120c2afe2998354a17c002e\",\"license\":\"Apache-2.0\"},\"@equilibria/perennial-v2/contracts/types/RiskParameter.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.13;\\n\\nimport \\\"@equilibria/root/number/types/UFixed6.sol\\\";\\nimport \\\"@equilibria/root/utilization/types/UJumpRateUtilizationCurve6.sol\\\";\\nimport \\\"@equilibria/root/pid/types/PController6.sol\\\";\\nimport \\\"@equilibria/root/adiabatic/types/LinearAdiabatic6.sol\\\";\\nimport \\\"@equilibria/root/adiabatic/types/NoopAdiabatic6.sol\\\";\\nimport \\\"../interfaces/IOracleProvider.sol\\\";\\nimport \\\"./ProtocolParameter.sol\\\";\\n\\n/// @dev RiskParameter type\\nstruct RiskParameter {\\n    /// @dev The minimum amount of collateral required to open a new position as a percentage of notional\\n    UFixed6 margin;\\n\\n    /// @dev The minimum amount of collateral that must be maintained as a percentage of notional\\n    UFixed6 maintenance;\\n\\n    /// @dev The taker impact fee\\n    LinearAdiabatic6 takerFee;\\n\\n    /// @dev The maker fee configuration\\n    NoopAdiabatic6 makerFee;\\n\\n    /// @dev The maximum amount of maker positions that opened\\n    UFixed6 makerLimit;\\n\\n    /// @dev The minimum limit of the efficiency metric\\n    UFixed6 efficiencyLimit;\\n\\n    /// @dev The percentage fee on the notional that is charged when a position is liquidated\\n    UFixed6 liquidationFee;\\n\\n    /// @dev The utilization curve that is used to compute maker interest\\n    UJumpRateUtilizationCurve6 utilizationCurve;\\n\\n    /// @dev The p controller that is used to compute long-short funding\\n    PController6 pController;\\n\\n    /// @dev The minimum fixed amount that is required to open a position\\n    UFixed6 minMargin;\\n\\n    /// @dev The minimum fixed amount that is required for maintenance\\n    UFixed6 minMaintenance;\\n\\n    /// @dev The maximum amount of time since the latest oracle version that update may still be called\\n    uint256 staleAfter;\\n\\n    /// @dev Whether or not the maker should always receive positive funding\\n    bool makerReceiveOnly;\\n}\\nstruct RiskParameterStorage { uint256 slot0; uint256 slot1; uint256 slot2; } // SECURITY: must remain at (3) slots\\nusing RiskParameterStorageLib for RiskParameterStorage global;\\n\\n/// @dev Manually encodes and decodes the local Position struct into storage.\\n///      (external-safe): this library is safe to externalize\\n///\\n///    struct StoredRiskParameter {\\n///        /* slot 0 */ (30)\\n///        uint24 margin;                              // <= 1677%\\n///        uint24 maintenance;                         // <= 1677%\\n///        uint24 takerLinearFee;                      // <= 1677%\\n///        uint24 takerProportionalFee;                // <= 1677%\\n///        uint24 takerAdiabaticFee;                   // <= 1677% (must maintain location due to updateRiskParameter)\\n///        uint24 makerLinearFee;                      // <= 1677%\\n///        uint24 makerProportionalFee;                // <= 1677%\\n///        uint48 makerLimit;                          // <= 281t (no decimals)\\n///        uint24 efficiencyLimit;                     // <= 1677%\\n///\\n///        /* slot 1 */ (28)\\n///        bytes3 __unallocated__;\\n///        uint48 takerSkewScale;                      // <= 281t (no decimals) (must maintain location due to updateRiskParameter)\\n///        uint24 utilizationCurveMinRate;             // <= 1677%\\n///        uint24 utilizationCurveMaxRate;             // <= 1677%\\n///        uint24 utilizationCurveTargetRate;          // <= 1677%\\n///        uint24 utilizationCurveTargetUtilization;   // <= 1677%\\n///        int32 pControllerMin;                       // <= 214748%\\n///\\n///        /* slot 2 */ (32)\\n///        uint48 pControllerK;                        // <= 281m\\n///        int32 pControllerMax;                       // <= 214748%\\n///        uint48 minMargin;                           // <= 281m\\n///        uint48 minMaintenance;                      // <= 281m\\n///        uint48 liquidationFee;                      // <= 281m\\n///        uint24 staleAfter;                          // <= 16m s\\n///        bool makerReceiveOnly;\\n///    }\\nlibrary RiskParameterStorageLib {\\n    // sig: 0x7ecd083f\\n    error RiskParameterStorageInvalidError();\\n\\n    function read(RiskParameterStorage storage self) internal view returns (RiskParameter memory) {\\n        (uint256 slot0, uint256 slot1, uint256 slot2) = (self.slot0, self.slot1, self.slot2);\\n        return RiskParameter(\\n            UFixed6.wrap(uint256(       slot0 << (256 - 24)) >> (256 - 24)),\\n            UFixed6.wrap(uint256(       slot0 << (256 - 24 - 24)) >> (256 - 24)),\\n            LinearAdiabatic6(\\n                UFixed6.wrap(uint256(   slot0 << (256 - 24 - 24 - 24)) >> (256 - 24)),\\n                UFixed6.wrap(uint256(   slot0 << (256 - 24 - 24 - 24 - 24)) >> (256 - 24)),\\n                UFixed6.wrap(uint256(   slot0 << (256 - 24 - 24 - 24 - 24 - 24)) >> (256 - 24)),\\n                UFixed6Lib.from(uint256(slot1 << (256 - 24 - 48 - 48)) >> (256 - 48))\\n            ),\\n            NoopAdiabatic6(\\n                UFixed6.wrap(uint256(   slot0 << (256 - 24 - 24 - 24 - 24 - 24 - 24)) >> (256 - 24)),\\n                UFixed6.wrap(uint256(   slot0 << (256 - 24 - 24 - 24 - 24 - 24 - 24 - 24)) >> (256 - 24)),\\n                UFixed6Lib.from(uint256(slot1 << (256 - 24 - 48)) >> (256 - 48))\\n            ),\\n            UFixed6Lib.from(uint256(    slot0 << (256 - 24 - 24 - 24 - 24 - 24 - 24 - 24 - 48)) >> (256 - 48)),\\n            UFixed6.wrap(uint256(       slot0 << (256 - 24 - 24 - 24 - 24 - 24 - 24 - 24 - 48 - 24)) >> (256 - 24)),\\n\\n            UFixed6.wrap(uint256(       slot2 << (256 - 48 - 32 - 48 - 48 - 48)) >> (256 - 48)),\\n            UJumpRateUtilizationCurve6(\\n                UFixed6.wrap(uint256(   slot1 << (256 - 24 - 48 - 48 - 24)) >> (256 - 24)),\\n                UFixed6.wrap(uint256(   slot1 << (256 - 24 - 48 - 48 - 24 - 24)) >> (256 - 24)),\\n                UFixed6.wrap(uint256(   slot1 << (256 - 24 - 48 - 48 - 24 - 24 - 24)) >> (256 - 24)),\\n                UFixed6.wrap(uint256(   slot1 << (256 - 24 - 48 - 48 - 24 - 24 - 24 - 24)) >> (256 - 24))\\n            ),\\n\\n            PController6(\\n                UFixed6.wrap(uint256(   slot2 << (256 - 48)) >> (256 - 48)),\\n                Fixed6.wrap(int256(     slot1 << (256 - 24 - 48 - 48 - 24 - 24 - 24 - 24 - 32)) >> (256 - 32)),\\n                Fixed6.wrap(int256(     slot2 << (256 - 48 - 32)) >> (256 - 32))\\n            ),\\n            UFixed6.wrap(uint256(       slot2 << (256 - 48 - 32 - 48)) >> (256 - 48)),\\n            UFixed6.wrap(uint256(       slot2 << (256 - 48 - 32 - 48 - 48)) >> (256 - 48)),\\n                         uint256(       slot2 << (256 - 48 - 32 - 48 - 48 - 48 - 24)) >> (256 - 24),\\n            0 !=        (uint256(       slot2 << (256 - 48 - 32 - 48 - 48 - 48 - 24 - 8)) >> (256 - 8))\\n        );\\n    }\\n\\n    function validate(RiskParameter memory self, ProtocolParameter memory protocolParameter) private pure {\\n        if (\\n            self.takerFee.linearFee.max(self.takerFee.proportionalFee).max(self.takerFee.adiabaticFee)\\n                .max(self.makerFee.linearFee).max(self.makerFee.proportionalFee)\\n                .gt(protocolParameter.maxFee)\\n        ) revert RiskParameterStorageInvalidError();\\n\\n        if (self.liquidationFee.gt(protocolParameter.maxFeeAbsolute)) revert RiskParameterStorageInvalidError();\\n\\n        if (\\n            self.utilizationCurve.minRate.max(self.utilizationCurve.maxRate).max(self.utilizationCurve.targetRate)\\n                .max(self.pController.max.abs()).max(self.pController.min.abs())\\n                .gt(protocolParameter.maxRate)\\n        ) revert RiskParameterStorageInvalidError();\\n\\n        if (self.maintenance.lt(protocolParameter.minMaintenance)) revert RiskParameterStorageInvalidError();\\n\\n        if (self.margin.lt(self.maintenance)) revert RiskParameterStorageInvalidError();\\n\\n        if (self.efficiencyLimit.lt(protocolParameter.minEfficiency)) revert RiskParameterStorageInvalidError();\\n\\n        if (self.utilizationCurve.targetUtilization.gt(UFixed6Lib.ONE)) revert RiskParameterStorageInvalidError();\\n\\n        if (self.minMaintenance.lt(self.liquidationFee)) revert RiskParameterStorageInvalidError();\\n\\n        if (self.minMargin.lt(self.minMaintenance)) revert RiskParameterStorageInvalidError();\\n\\n        UFixed6 scaleLimit = self.makerLimit.div(self.efficiencyLimit).mul(protocolParameter.minScale);\\n        if (self.takerFee.scale.lt(scaleLimit) || self.makerFee.scale.lt(scaleLimit))\\n            revert RiskParameterStorageInvalidError();\\n    }\\n\\n    function validateAndStore(\\n        RiskParameterStorage storage self,\\n        RiskParameter memory newValue,\\n        ProtocolParameter memory protocolParameter\\n    ) external {\\n        validate(newValue, protocolParameter);\\n\\n        if (newValue.margin.gt(UFixed6.wrap(type(uint24).max))) revert RiskParameterStorageInvalidError();\\n        if (newValue.minMargin.gt(UFixed6.wrap(type(uint48).max))) revert RiskParameterStorageInvalidError();\\n        if (newValue.efficiencyLimit.gt(UFixed6.wrap(type(uint24).max))) revert RiskParameterStorageInvalidError();\\n        if (newValue.makerLimit.gt(UFixed6Lib.from(type(uint48).max))) revert RiskParameterStorageInvalidError();\\n        if (newValue.pController.k.gt(UFixed6.wrap(type(uint48).max))) revert RiskParameterStorageInvalidError();\\n        if (newValue.takerFee.scale.gt(UFixed6Lib.from(type(uint48).max))) revert RiskParameterStorageInvalidError();\\n        if (newValue.makerFee.scale.gt(UFixed6Lib.from(type(uint48).max))) revert RiskParameterStorageInvalidError();\\n        if (newValue.staleAfter > uint256(type(uint24).max)) revert RiskParameterStorageInvalidError();\\n\\n        uint256 encoded0 =\\n            uint256(UFixed6.unwrap(newValue.margin)                    << (256 - 24)) >> (256 - 24) |\\n            uint256(UFixed6.unwrap(newValue.maintenance)               << (256 - 24)) >> (256 - 24 - 24) |\\n            uint256(UFixed6.unwrap(newValue.takerFee.linearFee)        << (256 - 24)) >> (256 - 24 - 24 - 24) |\\n            uint256(UFixed6.unwrap(newValue.takerFee.proportionalFee)  << (256 - 24)) >> (256 - 24 - 24 - 24 - 24) |\\n            uint256(UFixed6.unwrap(newValue.takerFee.adiabaticFee)     << (256 - 24)) >> (256 - 24 - 24 - 24 - 24 - 24) |\\n            uint256(UFixed6.unwrap(newValue.makerFee.linearFee)        << (256 - 24)) >> (256 - 24 - 24 - 24 - 24 - 24 - 24) |\\n            uint256(UFixed6.unwrap(newValue.makerFee.proportionalFee)  << (256 - 24)) >> (256 - 24 - 24 - 24 - 24 - 24 - 24 - 24) |\\n            uint256(newValue.makerLimit.truncate()                     << (256 - 48)) >> (256 - 24 - 24 - 24 - 24 - 24 - 24 - 24 - 48) |\\n            uint256(UFixed6.unwrap(newValue.efficiencyLimit)           << (256 - 24)) >> (256 - 24 - 24 - 24 - 24 - 24 - 24 - 24 - 48 - 24);\\n\\n        uint256 encoded1 =\\n            uint256(newValue.makerFee.scale.truncate()                          << (256 - 48)) >> (256 - 24 - 48) |\\n            uint256(newValue.takerFee.scale.truncate()                          << (256 - 48)) >> (256 - 24 - 48 - 48) |\\n            uint256(UFixed6.unwrap(newValue.utilizationCurve.minRate)           << (256 - 24)) >> (256 - 24 - 48 - 48 - 24) |\\n            uint256(UFixed6.unwrap(newValue.utilizationCurve.maxRate)           << (256 - 24)) >> (256 - 24 - 48 - 48 - 24 - 24) |\\n            uint256(UFixed6.unwrap(newValue.utilizationCurve.targetRate)        << (256 - 24)) >> (256 - 24 - 48 - 48 - 24 - 24 - 24) |\\n            uint256(UFixed6.unwrap(newValue.utilizationCurve.targetUtilization) << (256 - 24)) >> (256 - 24 - 48 - 48 - 24 - 24 - 24 - 24) |\\n            uint256(Fixed6.unwrap(newValue.pController.min)                     << (256 - 32)) >> (256 - 24 - 48 - 48 - 24 - 24 - 24 - 24 - 32);\\n\\n        uint256 encoded2 =\\n            uint256(UFixed6.unwrap(newValue.pController.k)                  << (256 - 48)) >> (256 - 48) |\\n            uint256(Fixed6.unwrap(newValue.pController.max)                 << (256 - 32)) >> (256 - 48 - 32) |\\n            uint256(UFixed6.unwrap(newValue.minMargin)                      << (256 - 48)) >> (256 - 48 - 32 - 48) |\\n            uint256(UFixed6.unwrap(newValue.minMaintenance)                 << (256 - 48)) >> (256 - 48 - 32 - 48 - 48) |\\n            uint256(UFixed6.unwrap(newValue.liquidationFee)                 << (256 - 48)) >> (256 - 48 - 32 - 48 - 48 - 48) |\\n            uint256(newValue.staleAfter                                     << (256 - 24)) >> (256 - 48 - 32 - 48 - 48 - 48 - 24) |\\n            uint256((newValue.makerReceiveOnly ? uint256(1) : uint256(0))   << (256 - 8))  >> (256 - 48 - 32 - 48 - 48 - 48 - 24 - 8);\\n\\n        assembly {\\n            sstore(self.slot, encoded0)\\n            sstore(add(self.slot, 1), encoded1)\\n            sstore(add(self.slot, 2), encoded2)\\n        }\\n    }\\n}\",\"keccak256\":\"0x90af6779c06bcca0c852369861872b5df6ff3e2091bbad2286516b65e624afcd\",\"license\":\"Apache-2.0\"},\"@equilibria/perennial-v2/contracts/types/Version.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.13;\\n\\nimport \\\"@equilibria/root/accumulator/types/Accumulator6.sol\\\";\\nimport \\\"./ProtocolParameter.sol\\\";\\nimport \\\"./MarketParameter.sol\\\";\\nimport \\\"./RiskParameter.sol\\\";\\nimport \\\"./Global.sol\\\";\\nimport \\\"./Position.sol\\\";\\nimport \\\"./Order.sol\\\";\\n\\n/// @dev Version type\\nstruct Version {\\n    /// @dev whether this version had a valid oracle price\\n    bool valid;\\n\\n    /// @dev The price of the version\\n    Fixed6 price;\\n\\n    /// @dev The maker accumulator value\\n    Accumulator6 makerValue;\\n\\n    /// @dev The long accumulator value\\n    Accumulator6 longValue;\\n\\n    /// @dev The short accumulator value\\n    Accumulator6 shortValue;\\n\\n    /// @dev The accumulated fee for maker orders\\n    Accumulator6 makerFee;\\n\\n    /// @dev The accumulated fee for taker orders\\n    Accumulator6 takerFee;\\n\\n    /// @dev The accumulated offset for maker orders\\n    Accumulator6 makerOffset;\\n\\n    /// @dev The accumulated offset for positive taker orders (open long / close short)\\n    Accumulator6 takerPosOffset;\\n\\n    /// @dev The accumulated offset for negative taker orders (close long / open short)\\n    Accumulator6 takerNegOffset;\\n\\n    /// @dev The accumulated settlement fee for each individual order\\n    Accumulator6 settlementFee;\\n\\n    /// @dev The accumulated liquidation fee for each individual order\\n    Accumulator6 liquidationFee;\\n}\\nstruct VersionStorage { uint256 slot0; uint256 slot1; uint256 slot2; }\\nusing VersionStorageLib for VersionStorage global;\\n\\n/// @dev Manually encodes and decodes the Version struct into storage.\\n///      (external-safe): this library is safe to externalize\\n///\\n///     struct StoredVersion {\\n///         /* slot 0 */\\n///         bool valid;\\n///         int64 makerValue;\\n///         int64 longValue;\\n///         int64 shortValue;\\n///         uint48 liquidationFee;\\n///\\n///         /* slot 1 */\\n///         int64 price;\\n///         int48 makerOffset;\\n///         int48 takerPosOffset;\\n///         int48 takerNegOffset;\\n///         uint48 settlementFee;\\n///\\n///         /* slot 2 */\\n///         int48 makerFee;\\n///         int48 takerFee;\\n///     }\\n///\\nlibrary VersionStorageLib {\\n    // sig: 0xd2777e72\\n    error VersionStorageInvalidError();\\n\\n    function read(VersionStorage storage self) internal view returns (Version memory) {\\n        (uint256 slot0, uint256 slot1, uint256 slot2) = (self.slot0, self.slot1, self.slot2);\\n        return Version(\\n            (uint256(slot0 << (256 - 8)) >> (256 - 8)) != 0,\\n            Fixed6.wrap(int256(slot1 << (256 - 64)) >> (256 - 64)),\\n\\n            Accumulator6(Fixed6.wrap(int256(slot0 << (256 - 8 - 64)) >> (256 - 64))),\\n            Accumulator6(Fixed6.wrap(int256(slot0 << (256 - 8 - 64 - 64)) >> (256 - 64))),\\n            Accumulator6(Fixed6.wrap(int256(slot0 << (256 - 8 - 64 - 64 - 64)) >> (256 - 64))),\\n\\n            Accumulator6(Fixed6.wrap(int256(slot2 << (256 - 48)) >> (256 - 48))),\\n            Accumulator6(Fixed6.wrap(int256(slot2 << (256 - 48 - 48)) >> (256 - 48))),\\n\\n            Accumulator6(Fixed6.wrap(int256(slot1 << (256 - 64 - 48)) >> (256 - 48))),\\n            Accumulator6(Fixed6.wrap(int256(slot1 << (256 - 64 - 48 - 48)) >> (256 - 48))),\\n            Accumulator6(Fixed6.wrap(int256(slot1 << (256 - 64 - 48 - 48 - 48)) >> (256 - 48))),\\n\\n            Accumulator6(Fixed6.wrap(int256(slot1 << (256 - 64 - 48 - 48 - 48 - 48)) >> (256 - 48))),\\n            Accumulator6(Fixed6.wrap(int256(slot0 << (256 - 8 - 64 - 64 - 64 - 48)) >> (256 - 48)))\\n        );\\n    }\\n\\n    function store(VersionStorage storage self, Version memory newValue) external {\\n        if (newValue.price.gt(Fixed6.wrap(type(int64).max))) revert VersionStorageInvalidError();\\n        if (newValue.price.lt(Fixed6.wrap(type(int64).min))) revert VersionStorageInvalidError();\\n        if (newValue.makerValue._value.gt(Fixed6.wrap(type(int64).max))) revert VersionStorageInvalidError();\\n        if (newValue.makerValue._value.lt(Fixed6.wrap(type(int64).min))) revert VersionStorageInvalidError();\\n        if (newValue.longValue._value.gt(Fixed6.wrap(type(int64).max))) revert VersionStorageInvalidError();\\n        if (newValue.longValue._value.lt(Fixed6.wrap(type(int64).min))) revert VersionStorageInvalidError();\\n        if (newValue.shortValue._value.gt(Fixed6.wrap(type(int64).max))) revert VersionStorageInvalidError();\\n        if (newValue.shortValue._value.lt(Fixed6.wrap(type(int64).min))) revert VersionStorageInvalidError();\\n        if (newValue.makerFee._value.gt(Fixed6.wrap(type(int48).max))) revert VersionStorageInvalidError();\\n        if (newValue.makerFee._value.lt(Fixed6.wrap(type(int48).min))) revert VersionStorageInvalidError();\\n        if (newValue.takerFee._value.gt(Fixed6.wrap(type(int48).max))) revert VersionStorageInvalidError();\\n        if (newValue.takerFee._value.lt(Fixed6.wrap(type(int48).min))) revert VersionStorageInvalidError();\\n        if (newValue.makerOffset._value.gt(Fixed6.wrap(type(int48).max))) revert VersionStorageInvalidError();\\n        if (newValue.makerOffset._value.lt(Fixed6.wrap(type(int48).min))) revert VersionStorageInvalidError();\\n        if (newValue.takerPosOffset._value.gt(Fixed6.wrap(type(int48).max))) revert VersionStorageInvalidError();\\n        if (newValue.takerPosOffset._value.lt(Fixed6.wrap(type(int48).min))) revert VersionStorageInvalidError();\\n        if (newValue.takerNegOffset._value.gt(Fixed6.wrap(type(int48).max))) revert VersionStorageInvalidError();\\n        if (newValue.takerNegOffset._value.lt(Fixed6.wrap(type(int48).min))) revert VersionStorageInvalidError();\\n        if (newValue.settlementFee._value.gt(Fixed6.wrap(type(int48).max))) revert VersionStorageInvalidError();\\n        if (newValue.settlementFee._value.lt(Fixed6.wrap(type(int48).min))) revert VersionStorageInvalidError();\\n        if (newValue.liquidationFee._value.gt(Fixed6.wrap(type(int48).max))) revert VersionStorageInvalidError();\\n        if (newValue.liquidationFee._value.lt(Fixed6.wrap(type(int48).min))) revert VersionStorageInvalidError();\\n\\n        uint256 encoded0 =\\n            uint256((newValue.valid ? uint256(1) : uint256(0)) << (256 - 8)) >> (256 - 8) |\\n            uint256(Fixed6.unwrap(newValue.makerValue._value) << (256 - 64)) >> (256 - 8 - 64) |\\n            uint256(Fixed6.unwrap(newValue.longValue._value) << (256 - 64)) >> (256 - 8 - 64 - 64) |\\n            uint256(Fixed6.unwrap(newValue.shortValue._value) << (256 - 64)) >> (256 - 8 - 64 - 64 - 64) |\\n            uint256(Fixed6.unwrap(newValue.liquidationFee._value) << (256 - 48)) >> (256 - 8 - 64 - 64 - 64 - 48);\\n        uint256 encoded1 =\\n            uint256(Fixed6.unwrap(newValue.price) << (256 - 64)) >> (256 - 64) |\\n            uint256(Fixed6.unwrap(newValue.makerOffset._value) << (256 - 48)) >> (256 - 64 - 48) |\\n            uint256(Fixed6.unwrap(newValue.takerPosOffset._value) << (256 - 48)) >> (256 - 64 - 48 - 48) |\\n            uint256(Fixed6.unwrap(newValue.takerNegOffset._value) << (256 - 48)) >> (256 - 64 - 48 - 48 - 48) |\\n            uint256(Fixed6.unwrap(newValue.settlementFee._value) << (256 - 48)) >> (256 - 64 - 48 - 48 - 48 - 48);\\n        uint256 encoded2 =\\n            uint256(Fixed6.unwrap(newValue.makerFee._value) << (256 - 48)) >> (256 - 48) |\\n            uint256(Fixed6.unwrap(newValue.takerFee._value) << (256 - 48)) >> (256 - 48 - 48);\\n\\n        assembly {\\n            sstore(self.slot, encoded0)\\n            sstore(add(self.slot, 1), encoded1)\\n            sstore(add(self.slot, 2), encoded2)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc09b897e589a729fa89bf183515fba9808a2d5a5a6cd4e4b92360d2a522ad060\",\"license\":\"Apache-2.0\"},\"@equilibria/root/accumulator/types/Accumulator6.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.13;\\n\\nimport \\\"../../number/types/Fixed6.sol\\\";\\nimport \\\"../../number/types/UFixed6.sol\\\";\\n\\n/// @dev Accumulator6 type\\nstruct Accumulator6 {\\n    Fixed6 _value;\\n}\\n\\nusing Accumulator6Lib for Accumulator6 global;\\nstruct StoredAccumulator6 {\\n    int256 _value;\\n}\\nstruct Accumulator6Storage { StoredAccumulator6 value; }\\nusing Accumulator6StorageLib for Accumulator6Storage global;\\n\\n\\n/**\\n * @title Accumulator6Lib\\n * @notice Library that surfaces math operations for the signed Accumulator type.\\n * @dev This accumulator tracks cumulative changes to a value over time. Using the `accumulated` function, one\\n * can determine how much a value has changed between two points in time. The `increment` and `decrement` functions\\n * can be used to update the accumulator.\\n */\\nlibrary Accumulator6Lib {\\n    /**\\n     * Returns how much has been accumulated between two accumulators\\n     * @param self The current point of the accumulation to compare with `from`\\n     * @param from The starting point of the accumulation\\n     * @param total Demoninator of the ratio (see `increment` and `decrement` functions)\\n     */\\n    function accumulated(Accumulator6 memory self, Accumulator6 memory from, UFixed6 total) internal pure returns (Fixed6) {\\n        return _mul(self._value.sub(from._value), total);\\n    }\\n\\n    /**\\n     * @notice Increments an accumulator by a given ratio\\n     * @dev Always rounds down in order to prevent overstating the accumulated value\\n     * @param self The accumulator to increment\\n     * @param amount Numerator of the ratio\\n     * @param total Denominator of the ratio\\n     */\\n    function increment(Accumulator6 memory self, Fixed6 amount, UFixed6 total) internal pure {\\n        if (amount.isZero()) return;\\n        self._value = self._value.add(_div(amount, total));\\n    }\\n\\n    /**\\n     * @notice Decrements an accumulator by a given ratio\\n     * @dev Always rounds down in order to prevent overstating the accumulated value\\n     * @param self The accumulator to decrement\\n     * @param amount Numerator of the ratio\\n     * @param total Denominator of the ratio\\n     */\\n    function decrement(Accumulator6 memory self, Fixed6 amount, UFixed6 total) internal pure {\\n        if (amount.isZero()) return;\\n        self._value = self._value.add(_div(amount.mul(Fixed6Lib.NEG_ONE), total));\\n    }\\n\\n    function _div(Fixed6 amount, UFixed6 total) private pure returns (Fixed6) {\\n        return amount.sign() == -1 ? amount.divOut(Fixed6Lib.from(total)) : amount.div(Fixed6Lib.from(total));\\n    }\\n\\n    function _mul(Fixed6 amount, UFixed6 total) private pure returns (Fixed6) {\\n        return amount.sign() == -1 ? amount.mulOut(Fixed6Lib.from(total)) : amount.mul(Fixed6Lib.from(total));\\n    }\\n}\\n\\nlibrary Accumulator6StorageLib {\\n    function read(Accumulator6Storage storage self) internal view returns (Accumulator6 memory) {\\n        StoredAccumulator6 memory storedValue = self.value;\\n        return Accumulator6(Fixed6.wrap(int256(storedValue._value)));\\n    }\\n\\n    function store(Accumulator6Storage storage self, Accumulator6 memory newValue) internal {\\n        self.value = StoredAccumulator6(Fixed6.unwrap(newValue._value));\\n    }\\n}\\n\",\"keccak256\":\"0x21202b20328506bda86043889dca7b699732a9bf6ec735cc50ac8a444e643724\",\"license\":\"Apache-2.0\"},\"@equilibria/root/accumulator/types/UAccumulator6.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.13;\\n\\nimport \\\"../../number/types/UFixed6.sol\\\";\\n\\n/// @dev UAccumulator6 type\\nstruct UAccumulator6 {\\n    UFixed6 _value;\\n}\\n\\nusing UAccumulator6Lib for UAccumulator6 global;\\nstruct StoredUAccumulator6 {\\n    uint256 _value;\\n}\\nstruct UAccumulator6Storage { StoredUAccumulator6 value; }\\nusing UAccumulator6StorageLib for UAccumulator6Storage global;\\n\\n\\n/**\\n * @title UAccumulator6Lib\\n * @notice Library that surfaces math operations for the unsigned Accumulator type.\\n * @dev This accumulator tracks cumulative changes to a monotonically increasing value over time. Using the `accumulated` function, one\\n * can determine how much a value has changed between two points in time. The `increment` function can be used to update the accumulator.\\n */\\nlibrary UAccumulator6Lib {\\n    /**\\n     * Returns how much has been accumulated between two accumulators\\n     * @param self The current point of the accumulation to compare with `from`\\n     * @param from The starting point of the accumulation\\n     * @param total Demoninator of the ratio (see `increment` function)\\n     */\\n    function accumulated(UAccumulator6 memory self, UAccumulator6 memory from, UFixed6 total) internal pure returns (UFixed6) {\\n        return self._value.sub(from._value).mul(total);\\n    }\\n\\n    /**\\n     * @notice Increments an accumulator by a given ratio\\n     * @dev Always rounds down in order to prevent overstating the accumulated value\\n     * @param self The accumulator to increment\\n     * @param amount Numerator of the ratio\\n     * @param total Denominator of the ratio\\n     */\\n    function increment(UAccumulator6 memory self, UFixed6 amount, UFixed6 total) internal pure {\\n        if (amount.isZero()) return;\\n        self._value = self._value.add(amount.div(total));\\n    }\\n}\\n\\nlibrary UAccumulator6StorageLib {\\n    function read(UAccumulator6Storage storage self) internal view returns (UAccumulator6 memory) {\\n        StoredUAccumulator6 memory storedValue = self.value;\\n        return UAccumulator6(UFixed6.wrap(uint256(storedValue._value)));\\n    }\\n\\n    function store(UAccumulator6Storage storage self, UAccumulator6 memory newValue) internal {\\n        self.value = StoredUAccumulator6(UFixed6.unwrap(newValue._value));\\n    }\\n}\\n\",\"keccak256\":\"0x6c8f1e358099c02e441e396172c0d8920e85185946a72eff0af9a678588d0636\",\"license\":\"Apache-2.0\"},\"@equilibria/root/adiabatic/AdiabaticMath6.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.13;\\n\\nimport \\\"../number/types/UFixed6.sol\\\";\\nimport \\\"../number/types/Fixed6.sol\\\";\\n\\n/**\\n * @title AdiabaticMath6\\n * @notice Library for managing math operations for adiabatic fees.\\n */\\nlibrary AdiabaticMath6 {\\n    error Adiabatic6ZeroScaleError();\\n\\n    /// @notice Computes the base fees for an order\\n    /// @param fee The linear fee percentage\\n    /// @param change The change in skew in asset terms\\n    /// @param price The price of the underlying asset\\n    /// @return The linear fee in underlying terms\\n    function linearFee(UFixed6 fee, Fixed6 change, UFixed6 price) internal pure returns (UFixed6) {\\n        return change.abs().mul(price).mul(fee);\\n    }\\n\\n    /// @notice Computes the base fees for an order\\n    /// @param scale The scale of the skew\\n    /// @param fee The proportional fee percentage\\n    /// @param change The change in skew in asset terms\\n    /// @param price The price of the underlying asset\\n    /// @return The proportional fee in underlying terms\\n    function proportionalFee(UFixed6 scale, UFixed6 fee, Fixed6 change, UFixed6 price) internal pure returns (UFixed6) {\\n        return change.abs().mul(price).muldiv(change.abs(), scale).mul(fee);\\n    }\\n\\n    /// @notice Computes the adiabatic fee from a latest skew and change in skew over a linear function\\n    /// @param scale The scale of the skew\\n    /// @param adiabaticFee The adiabatic fee percentage\\n    /// @param latest The latest skew in asset terms\\n    /// @param change The change in skew in asset terms\\n    /// @param price The price of the underlying asset\\n    /// @return The adiabatic fee in underlying terms\\n    function linearCompute(\\n        UFixed6 scale,\\n        UFixed6 adiabaticFee,\\n        Fixed6 latest,\\n        Fixed6 change,\\n        UFixed6 price\\n    ) internal pure returns (Fixed6) {\\n        if (latest.isZero() && change.isZero()) return Fixed6Lib.ZERO;\\n        if (scale.isZero()) revert Adiabatic6ZeroScaleError();\\n\\n        // normalize for skew scale\\n        (Fixed6 latestScaled, Fixed6 changeScaled) =\\n            (latest.div(Fixed6Lib.from(scale)), change.div(Fixed6Lib.from(scale)));\\n\\n        // adiabatic fee = notional * fee percentage * mean of skew range\\n        return change.mul(Fixed6Lib.from(price)).mul(Fixed6Lib.from(adiabaticFee))\\n            .mul(_linearMean(latestScaled, latestScaled.add(changeScaled)));\\n    }\\n\\n    /// @notice Finds the mean value of the function f(x) = x over `from` to `to`\\n    /// @param from The lower bound\\n    /// @param to The upper bound\\n    /// @return The mean value\\n    function _linearMean(Fixed6 from, Fixed6 to) private pure returns (Fixed6) {\\n        return from.add(to).div(Fixed6Lib.from(2));\\n    }\\n}\\n\",\"keccak256\":\"0x9fea7ff94667e1ce3c4666940d21ad2fcc57058ec456f326e35f98b59a724433\",\"license\":\"Apache-2.0\"},\"@equilibria/root/adiabatic/types/LinearAdiabatic6.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.13;\\n\\nimport \\\"../../number/types/Fixed6.sol\\\";\\nimport \\\"../../number/types/UFixed6.sol\\\";\\nimport \\\"../AdiabaticMath6.sol\\\";\\n\\n/// @dev LinearAdiabatic6 type\\nstruct LinearAdiabatic6 {\\n    UFixed6 linearFee;\\n    UFixed6 proportionalFee;\\n    UFixed6 adiabaticFee;\\n    UFixed6 scale;\\n}\\nusing LinearAdiabatic6Lib for LinearAdiabatic6 global;\\n\\n/**\\n * @title LinearAdiabatic6Lib\\n * @notice Library that that manages the linear adiabatic fee algorithm\\n * @dev This algorithm specifies an adiatatic fee over the function:\\n *\\n *      f(skew) = adiabaticFee * skew\\n *\\n *      This is used to reward or penalize actions that move skew up or down this curve accordingly with net-zero\\n *      value to the system with respect to the underlying asset.\\n */\\nlibrary LinearAdiabatic6Lib {\\n    /// @notice Computes the adiabatic fee from a latest skew and change in skew\\n    /// @param self The adiabatic configuration\\n    /// @param latest The latest skew in asset terms\\n    /// @param change The change in skew in asset terms\\n    /// @param price The price of the underlying asset\\n    /// @return The adiabatic fee in underlying terms\\n    function compute(\\n        LinearAdiabatic6 memory self,\\n        Fixed6 latest,\\n        Fixed6 change,\\n        UFixed6 price\\n    ) internal pure returns (Fixed6) {\\n        return AdiabaticMath6.linearCompute(\\n            self.scale,\\n            self.adiabaticFee,\\n            latest,\\n            change,\\n            price\\n        );\\n    }\\n\\n    /// @notice Computes the latest exposure along with all fees\\n    /// @param self The adiabatic configuration\\n    /// @param latest The latest skew in asset terms\\n    /// @return The latest total exposure in asset terms\\n    function exposure(LinearAdiabatic6 memory self, Fixed6 latest) internal pure returns (Fixed6) {\\n        return compute(self, Fixed6Lib.ZERO, latest, UFixed6Lib.ONE);\\n    }\\n\\n    /// @dev Computes the change in exposure from a new configuration\\n    /// @param self The latest fee configuration\\n    /// @param newConfig The new fee configuration\\n    /// @param latest The latest skew in asset terms\\n    /// @param price The price of the underlying asset\\n    /// @return The update fee in underlying terms\\n    function exposure(\\n        LinearAdiabatic6 memory self,\\n        LinearAdiabatic6 memory newConfig,\\n        Fixed6 latest,\\n        UFixed6 price\\n    ) internal pure returns (Fixed6) {\\n        return compute(newConfig, Fixed6Lib.ZERO, latest, price).sub(compute(self, Fixed6Lib.ZERO, latest, price));\\n    }\\n\\n    /// @notice Computes the linear fee\\n    /// @param self The adiabatic configuration\\n    /// @param change The change in skew in asset terms\\n    /// @param price The price of the underlying asset\\n    /// @return The linear fee in underlying terms\\n    function linear(LinearAdiabatic6 memory self, Fixed6 change, UFixed6 price) internal pure returns (UFixed6) {\\n        return AdiabaticMath6.linearFee(self.linearFee, change, price);\\n    }\\n\\n    /// @notice Computes the proportional fee\\n    /// @param self The adiabatic configuration\\n    /// @param change The change in skew in asset terms\\n    /// @param price The price of the underlying asset\\n    /// @return The proportional fee in underlying terms\\n    function proportional(LinearAdiabatic6 memory self, Fixed6 change, UFixed6 price) internal pure returns (UFixed6) {\\n        return AdiabaticMath6.proportionalFee(self.scale, self.proportionalFee, change, price);\\n    }\\n\\n    /// @notice Computes the adiabatic fee\\n    /// @param self The adiabatic configuration\\n    /// @param latest The latest skew in asset terms\\n    /// @param change The change in skew in asset terms\\n    /// @param price The price of the underlying asset\\n    /// @return The adiabatic fee in underlying terms\\n    function adiabatic(\\n        LinearAdiabatic6 memory self,\\n        Fixed6 latest,\\n        Fixed6 change,\\n        UFixed6 price\\n    ) internal pure returns (Fixed6) {\\n        return compute(self, latest, change, price);\\n    }\\n}\\n\",\"keccak256\":\"0x5cb33ae31f4c44194e9fd8576eb15af0e29c0ff7cb91fd54c1f8010f125993a6\",\"license\":\"Apache-2.0\"},\"@equilibria/root/adiabatic/types/NoopAdiabatic6.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.13;\\n\\nimport \\\"../../number/types/Fixed6.sol\\\";\\nimport \\\"../../number/types/UFixed6.sol\\\";\\nimport \\\"../AdiabaticMath6.sol\\\";\\n\\n/// @dev NoopAdiabatic6 type\\nstruct NoopAdiabatic6 {\\n    UFixed6 linearFee;\\n    UFixed6 proportionalFee;\\n    UFixed6 scale;\\n}\\nusing NoopAdiabatic6Lib for NoopAdiabatic6 global;\\n\\n/**\\n * @title NoopAdiabatic6Lib\\n * @notice Library that that manages the no-op adiabatic fee algorithm\\n * @dev This algorithm specifies a fee schedule without an adiabatic fee. This is used for fees that need unsigned\\n *      fee impact without a signed shift fee based on skew.\\n */\\nlibrary NoopAdiabatic6Lib {\\n    /// @notice Computes the linear fee\\n    /// @param self The adiabatic configuration\\n    /// @param change The change in skew in asset terms\\n    /// @param price The price of the underlying asset\\n    /// @return The linear fee in underlying terms\\n    function linear(NoopAdiabatic6 memory self, Fixed6 change, UFixed6 price) internal pure returns (UFixed6) {\\n        return AdiabaticMath6.linearFee(self.linearFee, change, price);\\n    }\\n\\n    /// @notice Computes the proportional fee\\n    /// @param self The adiabatic configuration\\n    /// @param change The change in skew in asset terms\\n    /// @param price The price of the underlying asset\\n    /// @return The proportional fee in underlying terms\\n    function proportional(NoopAdiabatic6 memory self, Fixed6 change, UFixed6 price) internal pure returns (UFixed6) {\\n        return AdiabaticMath6.proportionalFee(self.scale, self.proportionalFee, change, price);\\n    }\\n}\\n\",\"keccak256\":\"0x711415003ec7bbb170c5d6afc7ccb884b059dab8c4908d930573ccaa4c22ed9d\",\"license\":\"Apache-2.0\"},\"@equilibria/root/attribute/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"./interfaces/IInitializable.sol\\\";\\nimport \\\"../storage/Storage.sol\\\";\\n\\n/**\\n * @title Initializable\\n * @notice Library to manage the initialization lifecycle of upgradeable contracts\\n * @dev `Initializable.sol` allows the creation of pseudo-constructors for upgradeable contracts. One\\n *      `initializer` should be declared per top-level contract. Child contracts can use the `onlyInitializer`\\n *      modifier to tag their internal initialization functions to ensure that they can only be called\\n *      from a top-level `initializer` or a constructor.\\n */\\nabstract contract Initializable is IInitializable {\\n    /// @dev The initialized flag\\n    Uint256Storage private constant _version = Uint256Storage.wrap(keccak256(\\\"equilibria.root.Initializable.version\\\"));\\n\\n    /// @dev The initializing flag\\n    BoolStorage private constant _initializing = BoolStorage.wrap(keccak256(\\\"equilibria.root.Initializable.initializing\\\"));\\n\\n    /// @dev Can only be called once per version, `version` is 1-indexed\\n    modifier initializer(uint256 version) {\\n        if (version == 0) revert InitializableZeroVersionError();\\n        if (_version.read() >= version) revert InitializableAlreadyInitializedError(version);\\n\\n        _version.store(version);\\n        _initializing.store(true);\\n\\n        _;\\n\\n        _initializing.store(false);\\n        emit Initialized(version);\\n    }\\n\\n    /// @dev Can only be called from an initializer or constructor\\n    modifier onlyInitializer() {\\n        if (!_constructing() && !_initializing.read()) revert InitializableNotInitializingError();\\n        _;\\n    }\\n\\n    /**\\n     * @notice Returns whether the contract is currently being constructed\\n     * @dev {Address.isContract} returns false for contracts currently in the process of being constructed\\n     * @return Whether the contract is currently being constructed\\n     */\\n    function _constructing() private view returns (bool) {\\n        return !Address.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0xaae151abc669fe2ec33a80e4e62da1849b7863034aeb9c16122c728d041cfb0b\",\"license\":\"Apache-2.0\"},\"@equilibria/root/attribute/Instance.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.13;\\n\\nimport \\\"../storage/Storage.sol\\\";\\nimport \\\"./interfaces/IInstance.sol\\\";\\nimport \\\"./Initializable.sol\\\";\\n\\n/// @title Instance\\n/// @notice An abstract contract that is created and managed by a factory\\nabstract contract Instance is IInstance, Initializable {\\n    /// @dev The factory address storage slot\\n    AddressStorage private constant _factory = AddressStorage.wrap(keccak256(\\\"equilibria.root.Instance.factory\\\"));\\n\\n    /// @notice Returns the factory that created this instance\\n    /// @return The factory that created this instance\\n    function factory() public view returns (IFactory) { return IFactory(_factory.read()); }\\n\\n    /// @notice Initializes the contract setting `msg.sender` as the factory\\n    function __Instance__initialize() internal onlyInitializer {\\n        _factory.store(msg.sender);\\n    }\\n\\n    /// @notice Only allow the owner defined by the factory to call the function\\n    modifier onlyOwner {\\n        if (msg.sender != factory().owner()) revert InstanceNotOwnerError(msg.sender);\\n        _;\\n    }\\n\\n    /// @notice Only allow the factory to call the function\\n    modifier onlyFactory {\\n        if (msg.sender != address(factory())) revert InstanceNotFactoryError(msg.sender);\\n        _;\\n    }\\n\\n    /// @notice Only allow the function to be called when the factory is not paused\\n    modifier whenNotPaused {\\n        if (factory().paused()) revert InstancePausedError();\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0x4350fbc81d27a2470de4ee319e036f69153f6f42e163b912d5fa458400e774ac\",\"license\":\"Apache-2.0\"},\"@equilibria/root/attribute/Kept/Kept.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.13;\\n\\nimport \\\"../Initializable.sol\\\";\\nimport \\\"../interfaces/IKept.sol\\\";\\nimport \\\"../../storage/Storage.sol\\\";\\n\\n/// @title Kept\\n/// @notice Library to manage keeper incentivization.\\n/// @dev Surfaces a keep() modifier that handles measuring job gas costs and paying out rewards the keeper.\\nabstract contract Kept is IKept, Initializable {\\n    /// @dev The legacy Chainlink feed that is used to convert price ETH relative to the keeper token\\n    AddressStorage private constant _ethTokenOracleFeed = AddressStorage.wrap(keccak256(\\\"equilibria.root.Kept.ethTokenOracleFeed\\\"));\\n    function ethTokenOracleFeed() public view returns (AggregatorV3Interface) { return AggregatorV3Interface(_ethTokenOracleFeed.read()); }\\n\\n    /// @dev The token that the keeper is paid in\\n    Token18Storage private constant _keeperToken = Token18Storage.wrap(keccak256(\\\"equilibria.root.Kept.keeperToken\\\"));\\n    function keeperToken() public view returns (Token18) { return _keeperToken.read(); }\\n\\n    /// @notice Initializes the contract\\n    /// @param ethTokenOracleFeed_ The legacy Chainlink feed that is used to convert price ETH relative to the keeper token\\n    /// @param keeperToken_ The token that the keeper is paid in\\n    function __Kept__initialize(\\n        AggregatorV3Interface ethTokenOracleFeed_,\\n        Token18 keeperToken_\\n    ) internal onlyInitializer {\\n        _ethTokenOracleFeed.store(address(ethTokenOracleFeed_));\\n        _keeperToken.store(keeperToken_);\\n    }\\n\\n    /// @notice Called by the keep modifier to raise the optionally raise the keeper fee\\n    /// @param amount The amount of keeper fee to raise\\n    /// @param data Arbitrary data passed in from the keep modifier\\n    /// @return The amount of keeper fee that was actually raised\\n    function _raiseKeeperFee(UFixed18 amount, bytes memory data) internal virtual returns (UFixed18) { return amount; }\\n\\n    /// @notice Computes the calldata portion of the keeper fee\\n    /// @dev Used for L2 implementation with significant calldata costs\\n    /// @param applicableCalldata The applicable calldata\\n    /// @param multiplierCalldata The multiplier to apply to the calldata cost\\n    /// @param bufferCalldata The buffer to apply to the calldata cost\\n    /// @return The calldata portion of the keeper fee\\n    function _calldataFee(\\n        bytes memory applicableCalldata,\\n        UFixed18 multiplierCalldata,\\n        uint256 bufferCalldata\\n    ) internal view virtual returns (UFixed18) { return UFixed18Lib.ZERO; }\\n\\n    /// @notice Computes the base gas portion of the keeper fee\\n    /// @param applicableGas The applicable gas cost\\n    /// @param multiplierBase The multiplier to apply to the gas cost\\n    /// @param bufferBase The buffer to apply to the gas cost\\n    /// @return The gas cost portion of the keeper fee\\n    function _baseFee(\\n        uint256 applicableGas,\\n        UFixed18 multiplierBase,\\n        uint256 bufferBase\\n    ) internal view returns (UFixed18) {\\n        return _fee(applicableGas, multiplierBase, bufferBase, block.basefee);\\n    }\\n\\n    /// @notice Computes a generic keeper fee based on parameters\\n    /// @dev Helper function to consolidate keeper fee computation logic\\n    /// @param gas The gas cost\\n    /// @param multiplier The multiplier to apply to the gas cost\\n    /// @param buffer The buffer to apply to the gas cost\\n    /// @return The resulting keeper fee\\n    function _fee(uint256 gas, UFixed18 multiplier, uint256 buffer, uint256 baseFee) internal pure returns (UFixed18) {\\n        return UFixed18Lib.from(gas).mul(multiplier).add(UFixed18Lib.from(buffer)).mul(UFixed18.wrap(baseFee));\\n    }\\n\\n    /// @notice Placed on a function to incentivize keepers to call it\\n    /// @param config The multiplier and buffer configuration to apply\\n    /// @param data Arbitrary data to pass to the _raiseKeeperFee function\\n    /// @param applicableCalldata The applicable calldata\\n    /// @param applicableValue The applicable value\\n    /// @param data Arbitrary data to pass to the _raiseKeeperFee function\\n    modifier keep(\\n        KeepConfig memory config,\\n        bytes memory applicableCalldata,\\n        uint256 applicableValue,\\n        bytes memory data\\n    ) {\\n        uint256 startGas = gasleft();\\n\\n        _;\\n\\n        uint256 applicableGas = startGas - gasleft();\\n\\n        _handleKeeperFee(config, applicableGas, applicableCalldata, applicableValue, data);\\n    }\\n\\n    /// @notice Called by the keep modifier to handle keeper fee computation and payment\\n    /// @param config The multiplier and buffer configuration to apply\\n    /// @param applicableGas The applicable gas cost\\n    /// @param applicableCalldata The applicable calldata\\n    /// @param applicableValue The applicable value\\n    /// @param data Arbitrary data to pass to the _raiseKeeperFee function\\n    function _handleKeeperFee(\\n        KeepConfig memory config,\\n        uint256 applicableGas,\\n        bytes memory applicableCalldata,\\n        uint256 applicableValue,\\n        bytes memory data\\n    ) internal {\\n        (UFixed18 baseFee, UFixed18 calldataFee) = (\\n            _baseFee(applicableGas, config.multiplierBase, config.bufferBase),\\n            _calldataFee(applicableCalldata, config.multiplierCalldata, config.bufferCalldata)\\n        );\\n\\n        UFixed18 keeperFee = UFixed18.wrap(applicableValue).add(baseFee).add(calldataFee).mul(_etherPrice());\\n        keeperFee = _raiseKeeperFee(keeperFee, data);\\n        keeperToken().push(msg.sender, keeperFee);\\n\\n        emit KeeperCall(msg.sender, applicableGas, applicableValue, baseFee, calldataFee, keeperFee);\\n    }\\n\\n    /// @notice Returns the price of ETH in terms of the keeper token\\n    /// @return The price of ETH in terms of the keeper token\\n    function _etherPrice() private view returns (UFixed18) {\\n        (, int256 answer, , ,) = ethTokenOracleFeed().latestRoundData();\\n        return UFixed18Lib.from(Fixed18Lib.ratio(answer, 1e8)); // chainlink eth-usd feed uses 8 decimals\\n    }\\n}\\n\",\"keccak256\":\"0x02b283032d840d309fa8109b1c578553e6b8c37f6291e10a7b6a9413e60df03b\",\"license\":\"Apache-2.0\"},\"@equilibria/root/attribute/Kept/Kept_Arbitrum.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.13;\\n\\nimport \\\"./Kept.sol\\\";\\nimport { ArbGasInfo } from \\\"../../gas/GasOracle_Arbitrum.sol\\\";\\n\\n/// @dev Arbitrum Kept implementation\\nabstract contract Kept_Arbitrum is Kept {\\n    ArbGasInfo constant ARB_GAS = ArbGasInfo(0x000000000000000000000000000000000000006C);\\n    uint256 public constant ARB_GAS_MULTIPLIER = 16;\\n    uint256 public constant ARB_FIXED_OVERHEAD = 140;\\n\\n    // https://docs.arbitrum.io/devs-how-tos/how-to-estimate-gas#breaking-down-the-formula\\n    // Tx Fee = block.baseFee * l2GasUsed + ArbGasInfo.getL1BaseFeeEstimate() * 16 * (calldataLength + fixedOverhead)\\n    // Dynamic buffer = (ArbGasInfo.getL1BaseFeeEstimate() * 16 * (calldataLength + fixedOverhead))\\n    function _calldataFee(\\n        bytes memory applicableCalldata,\\n        UFixed18 multiplierCalldata,\\n        uint256 bufferCalldata\\n    ) internal view virtual override returns (UFixed18) {\\n        return _fee(\\n            ARB_GAS_MULTIPLIER * (applicableCalldata.length + ARB_FIXED_OVERHEAD),\\n            multiplierCalldata,\\n            bufferCalldata,\\n            ARB_GAS.getL1BaseFeeEstimate()\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x8b4447cd9bd95e01422980c303dc10cb5164d5b4e9ba639e0a7215e9f1f6bc5a\",\"license\":\"Apache-2.0\"},\"@equilibria/root/attribute/interfaces/IFactory.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/proxy/beacon/IBeacon.sol\\\";\\nimport \\\"./IPausable.sol\\\";\\nimport \\\"./IInstance.sol\\\";\\n\\ninterface IFactory is IBeacon, IOwnable, IPausable {\\n    event InstanceRegistered(IInstance indexed instance);\\n\\n    error FactoryNotInstanceError();\\n\\n    function instances(IInstance instance) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x64c821ff5b6ff536a295bc0a24bf76dac44cd67b89183d224903f9fe1d6d3e65\",\"license\":\"Apache-2.0\"},\"@equilibria/root/attribute/interfaces/IInitializable.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.13;\\n\\ninterface IInitializable {\\n    error InitializableZeroVersionError();\\n    error InitializableAlreadyInitializedError(uint256 version);\\n    error InitializableNotInitializingError();\\n\\n    event Initialized(uint256 version);\\n}\\n\",\"keccak256\":\"0xa626c401aab111b5ccdaa280b4d0137e2f4261a71796cd89a1435025083b4035\",\"license\":\"Apache-2.0\"},\"@equilibria/root/attribute/interfaces/IInstance.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.13;\\n\\nimport \\\"./IFactory.sol\\\";\\nimport \\\"./IInitializable.sol\\\";\\n\\ninterface IInstance is IInitializable {\\n    error InstanceNotOwnerError(address sender);\\n    error InstanceNotFactoryError(address sender);\\n    error InstancePausedError();\\n\\n    function factory() external view returns (IFactory);\\n}\\n\",\"keccak256\":\"0x9c25e710af0e06bde4bc5b63a8fb4c020a55e7f2dc93ca061d0b74318cd4a8a0\",\"license\":\"Apache-2.0\"},\"@equilibria/root/attribute/interfaces/IKept.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.13;\\n\\nimport { AggregatorV3Interface } from \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\nimport \\\"../interfaces/IInitializable.sol\\\";\\nimport \\\"../../number/types/UFixed18.sol\\\";\\nimport \\\"../../token/types/Token18.sol\\\";\\n\\ninterface IKept is IInitializable {\\n    struct KeepConfig {\\n        UFixed18 multiplierBase;\\n        uint256 bufferBase;\\n        UFixed18 multiplierCalldata;\\n        uint256 bufferCalldata;\\n    }\\n\\n    event KeeperCall(address indexed sender, uint256 applicableGas, uint256 applicableValue, UFixed18 baseFee, UFixed18 calldataFee, UFixed18 keeperFee);\\n\\n    function ethTokenOracleFeed() external view returns (AggregatorV3Interface);\\n    function keeperToken() external view returns (Token18);\\n}\\n\",\"keccak256\":\"0xf4e1f5a6d115bca2636223d6516ddec2b92c9f587b416a737aff120fd02d6c5d\",\"license\":\"Apache-2.0\"},\"@equilibria/root/attribute/interfaces/IOwnable.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.13;\\n\\nimport \\\"./IInitializable.sol\\\";\\n\\ninterface IOwnable is IInitializable {\\n    event OwnerUpdated(address indexed newOwner);\\n    event PendingOwnerUpdated(address indexed newPendingOwner);\\n\\n    error OwnableNotOwnerError(address sender);\\n    error OwnableNotPendingOwnerError(address sender);\\n    error OwnableAlreadyInitializedError();\\n\\n    function owner() external view returns (address);\\n    function pendingOwner() external view returns (address);\\n    function updatePendingOwner(address newPendingOwner) external;\\n    function acceptOwner() external;\\n}\\n\",\"keccak256\":\"0x6b3d8a25d98d049ba4cfdbf36dd7f0e8b9ab8c3d514c2b2b730b459e0092717a\",\"license\":\"Apache-2.0\"},\"@equilibria/root/attribute/interfaces/IPausable.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.13;\\n\\nimport \\\"./IInitializable.sol\\\";\\nimport \\\"./IOwnable.sol\\\";\\n\\ninterface IPausable is IInitializable, IOwnable {\\n    event PauserUpdated(address indexed newPauser);\\n    event Paused();\\n    event Unpaused();\\n\\n    error PausablePausedError();\\n    error PausableNotPauserError(address sender);\\n\\n    function pauser() external view returns (address);\\n    function paused() external view returns (bool);\\n    function updatePauser(address newPauser) external;\\n    function pause() external;\\n    function unpause() external;\\n}\\n\",\"keccak256\":\"0x8ae48b036875291c763787ba6730d56f4a9cb30d7d4132ec8711544b99689338\",\"license\":\"Apache-2.0\"},\"@equilibria/root/gas/GasOracle.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.13;\\n\\nimport { AggregatorV3Interface } from \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\nimport { UFixed18, UFixed18Lib } from \\\"../number/types/UFixed18.sol\\\";\\nimport { Fixed18Lib } from \\\"../number/types/Fixed18.sol\\\";\\nimport { IGasOracle } from \\\"./interfaces/IGasOracle.sol\\\";\\n\\n/// @title GasOracle\\n/// @notice Standalone gas oracle for externally computing keeper rewards based on ether gas costs\\ncontract GasOracle is IGasOracle {\\n    /// @notice The total compute gas rewarded\\n    UFixed18 public immutable COMPUTE_GAS;\\n\\n    /// @notice The total calldata gas rewarded\\n    UFixed18 public immutable CALLDATA_GAS;\\n\\n    /// @notice Chainlink ETH-Token feed, where cost is expressed in terms of Token\\n    AggregatorV3Interface public immutable FEED;\\n\\n    /// @notice The precomputed offset of the Chainlink feed (10 ^ decimals)\\n    int256 public immutable FEED_OFFSET;\\n\\n    constructor(\\n        AggregatorV3Interface feed,\\n        uint256 decimals,\\n        uint256 computeGas,\\n        UFixed18 computeMultiplier,\\n        uint256 computeBase,\\n        uint256 calldataGas,\\n        UFixed18 calldataMultiplier,\\n        uint256 calldataBase\\n    ) {\\n        FEED = feed;\\n        FEED_OFFSET = int256(10 ** decimals);\\n        COMPUTE_GAS = _precompute(computeGas, computeMultiplier, computeBase);\\n        CALLDATA_GAS = _precompute(calldataGas, calldataMultiplier, calldataBase);\\n    }\\n\\n   /// @inheritdoc IGasOracle\\n    function cost(uint256 value) external view returns (UFixed18) {\\n        (UFixed18 baseFee, UFixed18 calldataFee) =\\n            (UFixed18.wrap(block.basefee).mul(COMPUTE_GAS), UFixed18.wrap(_calldataBaseFee()).mul(CALLDATA_GAS));\\n\\n        return UFixed18.wrap(value).add(baseFee).add(calldataFee).mul(_etherPrice());\\n    }\\n\\n    /// @notice Precomputes the total rewarded gas cost\\n    /// @param gas The applicable gas cost\\n    /// @param multiplier The reward multiplier to apply to the gas cost\\n    /// @param base The base gas reward to add on to the gas cost\\n    /// @return The total rewarded gas cost\\n    function _precompute(uint256 gas, UFixed18 multiplier, uint256 base) private pure returns (UFixed18) {\\n        return UFixed18Lib.from(gas).mul(multiplier).add(UFixed18Lib.from(base));\\n    }\\n\\n    /// @notice Returns the price of ether in terms of the underlying token\\n    /// @return The price of ether in terms of the underlyingtoken\\n    function _etherPrice() private view returns (UFixed18) {\\n        (, int256 answer, , ,) = FEED.latestRoundData();\\n        return UFixed18Lib.from(Fixed18Lib.ratio(answer, FEED_OFFSET));\\n    }\\n\\n    /// @notice Returns the base fee of the calldata\\n    /// @dev Can be overridden to provide a non-zero calldata base fee for L2 implementations\\n    /// @return The base fee of the calldata\\n    function _calldataBaseFee() internal virtual view returns (uint256) { return 0; }\\n}\\n\",\"keccak256\":\"0x7a7bcdf2d8f5aad3a520eb2d35388bd74787f3ea7c83ad9d003960b05d2973c5\",\"license\":\"Apache-2.0\"},\"@equilibria/root/gas/GasOracle_Arbitrum.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.13;\\n\\nimport { AggregatorV3Interface } from \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\nimport { UFixed18, UFixed18Lib } from \\\"../number/types/UFixed18.sol\\\";\\nimport { Fixed18Lib } from \\\"../number/types/Fixed18.sol\\\";\\nimport { GasOracle } from \\\"./GasOracle.sol\\\";\\n\\n// https://github.com/OffchainLabs/nitro/blob/v2.0.14/contracts/src/precompiles/ArbGasInfo.sol#L93\\ninterface ArbGasInfo {\\n    /// @notice Get ArbOS's estimate of the L1 basefee in wei\\n    function getL1BaseFeeEstimate() external view returns (uint256);\\n}\\n\\ncontract GasOracle_Arbitrum is GasOracle {\\n    ArbGasInfo constant ARB_GAS = ArbGasInfo(0x000000000000000000000000000000000000006C);\\n\\n    constructor(\\n        AggregatorV3Interface feed,\\n        uint256 decimals,\\n        uint256 computeGas,\\n        UFixed18 computeMultiplier,\\n        uint256 computeBase,\\n        uint256 calldataGas,\\n        UFixed18 calldataMultiplier,\\n        uint256 calldataBase\\n    ) GasOracle(feed, decimals, computeGas, computeMultiplier, computeBase, calldataGas, calldataMultiplier, calldataBase) { }\\n\\n    function _calldataBaseFee() internal override view returns (uint256) { return ARB_GAS.getL1BaseFeeEstimate(); }\\n}\\n\",\"keccak256\":\"0xb29dadf9642713b3d30278106cef01528360025f4acfdebbd56952899d3b3bc4\",\"license\":\"Apache-2.0\"},\"@equilibria/root/gas/interfaces/IGasOracle.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.13;\\n\\nimport { AggregatorV3Interface } from \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\nimport { UFixed18 } from \\\"../../number/types/UFixed18.sol\\\";\\n\\ninterface IGasOracle {\\n    function COMPUTE_GAS() external view returns (UFixed18);\\n    function CALLDATA_GAS() external view returns (UFixed18);\\n    function FEED() external view returns (AggregatorV3Interface);\\n    function FEED_OFFSET() external view returns (int256);\\n\\n    /// @notice Computes the reward of a transaction\\n    /// @param value The ether value of the transaction in addition to the gas cost rewarded\\n    /// @return The reward of the transaction\\n    function cost(uint256 value) external view returns (UFixed18);\\n}\\n\",\"keccak256\":\"0xcfbc5523e5c152b031d1b2152702d2e5665c9b9e39a9330bdb9a0940974939ac\",\"license\":\"Apache-2.0\"},\"@equilibria/root/number/NumberMath.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SignedMath.sol\\\";\\n\\n/**\\n * @title NumberMath\\n * @notice Library for additional math functions that are not included in the OpenZeppelin libraries.\\n */\\nlibrary NumberMath {\\n    error DivisionByZero();\\n\\n    /**\\n     * @notice Divides `a` by `b`, rounding the result away from zero if there is a remainder\\n     * @param a Dividend\\n     * @param b Divisor\\n     * @return Resulting quotient\\n     */\\n    function divOut(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) revert DivisionByZero();\\n        return Math.ceilDiv(a, b);\\n    }\\n\\n    /**\\n     * @notice Divides `a` by `b`, rounding the result away from zero if there is a remainder\\n     * @param a Dividend\\n     * @param b Divisor\\n     * @return Resulting quotient\\n     */\\n    function divOut(int256 a, int256 b) internal pure returns (int256) {\\n        return sign(a) * sign(b) * int256(divOut(SignedMath.abs(a), SignedMath.abs(b)));\\n    }\\n\\n    /**\\n     * @notice Returns the sign of an int256\\n     * @dev Returns: -1 for negative\\n     *                0 for zero\\n     *                1 for positive\\n     * @param a int256 to find the sign of\\n     * @return Sign of the int256\\n     */\\n    function sign(int256 a) internal pure returns (int256) {\\n        if (a > 0) return 1;\\n        if (a < 0) return -1;\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x8d3578ce6e74ee6589ba0468e2c539ef1eb51d6687b508e637620926eb8396b4\",\"license\":\"Apache-2.0\"},\"@equilibria/root/number/types/Fixed18.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/SignedMath.sol\\\";\\nimport \\\"../NumberMath.sol\\\";\\nimport \\\"./Fixed6.sol\\\";\\nimport \\\"./UFixed18.sol\\\";\\n\\n/// @dev Fixed18 type\\ntype Fixed18 is int256;\\nusing Fixed18Lib for Fixed18 global;\\ntype Fixed18Storage is bytes32;\\nusing Fixed18StorageLib for Fixed18Storage global;\\n\\n/**\\n * @title Fixed18Lib\\n * @notice Library for the signed fixed-decimal type.\\n */\\nlibrary Fixed18Lib {\\n    error Fixed18OverflowError(uint256 value);\\n\\n    int256 private constant BASE = 1e18;\\n    Fixed18 public constant ZERO = Fixed18.wrap(0);\\n    Fixed18 public constant ONE = Fixed18.wrap(BASE);\\n    Fixed18 public constant NEG_ONE = Fixed18.wrap(-1 * BASE);\\n    Fixed18 public constant MAX = Fixed18.wrap(type(int256).max);\\n    Fixed18 public constant MIN = Fixed18.wrap(type(int256).min);\\n\\n    /**\\n     * @notice Creates a signed fixed-decimal from an unsigned fixed-decimal\\n     * @param a Unsigned fixed-decimal\\n     * @return New signed fixed-decimal\\n     */\\n    function from(UFixed18 a) internal pure returns (Fixed18) {\\n        uint256 value = UFixed18.unwrap(a);\\n        if (value > uint256(type(int256).max)) revert Fixed18OverflowError(value);\\n        return Fixed18.wrap(int256(value));\\n    }\\n\\n    /**\\n     * @notice Creates a signed fixed-decimal from a sign and an unsigned fixed-decimal\\n     * @param s Sign\\n     * @param m Unsigned fixed-decimal magnitude\\n     * @return New signed fixed-decimal\\n     */\\n    function from(int256 s, UFixed18 m) internal pure returns (Fixed18) {\\n        if (s > 0) return from(m);\\n        if (s < 0) {\\n            // Since from(m) multiplies m by BASE, from(m) cannot be type(int256).min\\n            // which is the only value that would overflow when negated. Therefore,\\n            // we can safely negate from(m) without checking for overflow.\\n            unchecked { return Fixed18.wrap(-1 * Fixed18.unwrap(from(m))); }\\n        }\\n        return ZERO;\\n    }\\n\\n    /**\\n     * @notice Creates a signed fixed-decimal from a signed integer\\n     * @param a Signed number\\n     * @return New signed fixed-decimal\\n     */\\n    function from(int256 a) internal pure returns (Fixed18) {\\n        return Fixed18.wrap(a * BASE);\\n    }\\n\\n    /**\\n     * @notice Creates a signed fixed-decimal from a base-6 signed fixed-decimal\\n     * @param a Base-6 signed fixed-decimal\\n     * @return New signed fixed-decimal\\n     */\\n    function from(Fixed6 a) internal pure returns (Fixed18) {\\n        return Fixed18.wrap(Fixed6.unwrap(a) * 1e12);\\n    }\\n\\n    /**\\n     * @notice Returns whether the signed fixed-decimal is equal to zero.\\n     * @param a Signed fixed-decimal\\n     * @return Whether the signed fixed-decimal is zero.\\n     */\\n    function isZero(Fixed18 a) internal pure returns (bool) {\\n        return Fixed18.unwrap(a) == 0;\\n    }\\n\\n    /**\\n     * @notice Adds two signed fixed-decimals `a` and `b` together\\n     * @param a First signed fixed-decimal\\n     * @param b Second signed fixed-decimal\\n     * @return Resulting summed signed fixed-decimal\\n     */\\n    function add(Fixed18 a, Fixed18 b) internal pure returns (Fixed18) {\\n        return Fixed18.wrap(Fixed18.unwrap(a) + Fixed18.unwrap(b));\\n    }\\n\\n    /**\\n     * @notice Subtracts signed fixed-decimal `b` from `a`\\n     * @param a Signed fixed-decimal to subtract from\\n     * @param b Signed fixed-decimal to subtract\\n     * @return Resulting subtracted signed fixed-decimal\\n     */\\n    function sub(Fixed18 a, Fixed18 b) internal pure returns (Fixed18) {\\n        return Fixed18.wrap(Fixed18.unwrap(a) - Fixed18.unwrap(b));\\n    }\\n\\n    /**\\n     * @notice Multiplies two signed fixed-decimals `a` and `b` together\\n     * @param a First signed fixed-decimal\\n     * @param b Second signed fixed-decimal\\n     * @return Resulting multiplied signed fixed-decimal\\n     */\\n    function mul(Fixed18 a, Fixed18 b) internal pure returns (Fixed18) {\\n        return Fixed18.wrap(Fixed18.unwrap(a) * Fixed18.unwrap(b) / BASE);\\n    }\\n\\n    /**\\n     * @notice Multiplies two signed fixed-decimals `a` and `b` together, rounding the result away from zero if there is a remainder\\n     * @param a First signed fixed-decimal\\n     * @param b Second signed fixed-decimal\\n     * @return Resulting multiplied signed fixed-decimal\\n     */\\n    function mulOut(Fixed18 a, Fixed18 b) internal pure returns (Fixed18) {\\n        return Fixed18.wrap(NumberMath.divOut(Fixed18.unwrap(a) * Fixed18.unwrap(b), BASE));\\n    }\\n\\n    /**\\n     * @notice Divides signed fixed-decimal `a` by `b`\\n     * @param a Signed fixed-decimal to divide\\n     * @param b Signed fixed-decimal to divide by\\n     * @return Resulting divided signed fixed-decimal\\n     */\\n    function div(Fixed18 a, Fixed18 b) internal pure returns (Fixed18) {\\n        return Fixed18.wrap(Fixed18.unwrap(a) * BASE / Fixed18.unwrap(b));\\n    }\\n\\n    /**\\n     * @notice Divides signed fixed-decimal `a` by `b`, rounding the result away from zero if there is a remainder\\n     * @param a Signed fixed-decimal to divide\\n     * @param b Signed fixed-decimal to divide by\\n     * @return Resulting divided signed fixed-decimal\\n     */\\n    function divOut(Fixed18 a, Fixed18 b) internal pure returns (Fixed18) {\\n        return Fixed18Lib.from(sign(a) * sign(b), a.abs().divOut(b.abs()));\\n    }\\n\\n    /**\\n     * @notice Divides unsigned fixed-decimal `a` by `b`\\n     * @dev Does not revert on divide-by-0, instead returns `ONE` for `0/0`, `MAX` for `n/0`, and `MIN` for `-n/0`.\\n     * @param a Unsigned fixed-decimal to divide\\n     * @param b Unsigned fixed-decimal to divide by\\n     * @return Resulting divided unsigned fixed-decimal\\n     */\\n    function unsafeDiv(Fixed18 a, Fixed18 b) internal pure returns (Fixed18) {\\n        if (isZero(b)) {\\n            if (gt(a, ZERO)) return MAX;\\n            if (lt(a, ZERO)) return MIN;\\n            return ONE;\\n        } else {\\n            return div(a, b);\\n        }\\n    }\\n\\n    /**\\n     * @notice Divides unsigned fixed-decimal `a` by `b`, rounding the result away from zero if there is a remainder\\n     * @dev Does not revert on divide-by-0, instead returns `ONE` for `0/0`, `MAX` for `n/0`, and `MIN` for `-n/0`.\\n     * @param a Unsigned fixed-decimal to divide\\n     * @param b Unsigned fixed-decimal to divide by\\n     * @return Resulting divided unsigned fixed-decimal\\n     */\\n    function unsafeDivOut(Fixed18 a, Fixed18 b) internal pure returns (Fixed18) {\\n        if (isZero(b)) {\\n            if (gt(a, ZERO)) return MAX;\\n            if (lt(a, ZERO)) return MIN;\\n            return ONE;\\n        } else {\\n            return divOut(a, b);\\n        }\\n    }\\n\\n    /**\\n     * @notice Computes a * b / c without loss of precision due to BASE conversion\\n     * @param a First signed fixed-decimal\\n     * @param b Signed number to multiply by\\n     * @param c Signed number to divide by\\n     * @return Resulting computation\\n     */\\n    function muldiv(Fixed18 a, int256 b, int256 c) internal pure returns (Fixed18) {\\n        return muldiv(a, Fixed18.wrap(b), Fixed18.wrap(c));\\n    }\\n\\n    /**\\n     * @notice Computes a * b / c without loss of precision due to BASE conversion, rounding the result up to the next integer if there is a remainder\\n     * @param a First signed fixed-decimal\\n     * @param b Signed number to multiply by\\n     * @param c Signed number to divide by\\n     * @return Resulting computation\\n     */\\n    function muldivOut(Fixed18 a, int256 b, int256 c) internal pure returns (Fixed18) {\\n        return muldivOut(a, Fixed18.wrap(b), Fixed18.wrap(c));\\n    }\\n\\n    /**\\n     * @notice Computes a * b / c without loss of precision due to BASE conversion\\n     * @param a First signed fixed-decimal\\n     * @param b Signed fixed-decimal to multiply by\\n     * @param c Signed fixed-decimal to divide by\\n     * @return Resulting computation\\n     */\\n    function muldiv(Fixed18 a, Fixed18 b, Fixed18 c) internal pure returns (Fixed18) {\\n        return Fixed18.wrap(Fixed18.unwrap(a) * Fixed18.unwrap(b) / Fixed18.unwrap(c));\\n    }\\n\\n    /**\\n     * @notice Computes a * b / c without loss of precision due to BASE conversion, rounding the result up to the next integer if there is a remainder\\n     * @param a First signed fixed-decimal\\n     * @param b Signed fixed-decimal to multiply by\\n     * @param c Signed fixed-decimal to divide by\\n     * @return Resulting computation\\n     */\\n    function muldivOut(Fixed18 a, Fixed18 b, Fixed18 c) internal pure returns (Fixed18) {\\n        return Fixed18.wrap(NumberMath.divOut(Fixed18.unwrap(a) * Fixed18.unwrap(b), Fixed18.unwrap(c)));\\n    }\\n\\n    /**\\n     * @notice Returns whether signed fixed-decimal `a` is equal to `b`\\n     * @param a First signed fixed-decimal\\n     * @param b Second signed fixed-decimal\\n     * @return Whether `a` is equal to `b`\\n     */\\n    function eq(Fixed18 a, Fixed18 b) internal pure returns (bool) {\\n        return compare(a, b) == 1;\\n    }\\n\\n    /**\\n     * @notice Returns whether signed fixed-decimal `a` is greater than `b`\\n     * @param a First signed fixed-decimal\\n     * @param b Second signed fixed-decimal\\n     * @return Whether `a` is greater than `b`\\n     */\\n    function gt(Fixed18 a, Fixed18 b) internal pure returns (bool) {\\n        return compare(a, b) == 2;\\n    }\\n\\n    /**\\n     * @notice Returns whether signed fixed-decimal `a` is less than `b`\\n     * @param a First signed fixed-decimal\\n     * @param b Second signed fixed-decimal\\n     * @return Whether `a` is less than `b`\\n     */\\n    function lt(Fixed18 a, Fixed18 b) internal pure returns (bool) {\\n        return compare(a, b) == 0;\\n    }\\n\\n    /**\\n     * @notice Returns whether signed fixed-decimal `a` is greater than or equal to `b`\\n     * @param a First signed fixed-decimal\\n     * @param b Second signed fixed-decimal\\n     * @return Whether `a` is greater than or equal to `b`\\n     */\\n    function gte(Fixed18 a, Fixed18 b) internal pure returns (bool) {\\n        return gt(a, b) || eq(a, b);\\n    }\\n\\n    /**\\n     * @notice Returns whether signed fixed-decimal `a` is less than or equal to `b`\\n     * @param a First signed fixed-decimal\\n     * @param b Second signed fixed-decimal\\n     * @return Whether `a` is less than or equal to `b`\\n     */\\n    function lte(Fixed18 a, Fixed18 b) internal pure returns (bool) {\\n        return lt(a, b) || eq(a, b);\\n    }\\n\\n    /**\\n     * @notice Compares the signed fixed-decimals `a` and `b`\\n     * @dev Returns: 2 for greater than\\n     *               1 for equal to\\n     *               0 for less than\\n     * @param a First signed fixed-decimal\\n     * @param b Second signed fixed-decimal\\n     * @return Compare result of `a` and `b`\\n     */\\n    function compare(Fixed18 a, Fixed18 b) internal pure returns (uint256) {\\n        (int256 au, int256 bu) = (Fixed18.unwrap(a), Fixed18.unwrap(b));\\n        if (au > bu) return 2;\\n        if (au < bu) return 0;\\n        return 1;\\n    }\\n\\n    /**\\n     * @notice Returns a signed fixed-decimal representing the ratio of `a` over `b`\\n     * @param a First signed number\\n     * @param b Second signed number\\n     * @return Ratio of `a` over `b`\\n     */\\n    function ratio(int256 a, int256 b) internal pure returns (Fixed18) {\\n        return Fixed18.wrap(a * BASE / b);\\n    }\\n\\n    /**\\n     * @notice Returns the minimum of signed fixed-decimals `a` and `b`\\n     * @param a First signed fixed-decimal\\n     * @param b Second signed fixed-decimal\\n     * @return Minimum of `a` and `b`\\n     */\\n    function min(Fixed18 a, Fixed18 b) internal pure returns (Fixed18) {\\n        return Fixed18.wrap(SignedMath.min(Fixed18.unwrap(a), Fixed18.unwrap(b)));\\n    }\\n\\n    /**\\n     * @notice Returns the maximum of signed fixed-decimals `a` and `b`\\n     * @param a First signed fixed-decimal\\n     * @param b Second signed fixed-decimal\\n     * @return Maximum of `a` and `b`\\n     */\\n    function max(Fixed18 a, Fixed18 b) internal pure returns (Fixed18) {\\n        return Fixed18.wrap(SignedMath.max(Fixed18.unwrap(a), Fixed18.unwrap(b)));\\n    }\\n\\n    /**\\n     * @notice Converts the signed fixed-decimal into an integer, truncating any decimal portion\\n     * @param a Signed fixed-decimal\\n     * @return Truncated signed number\\n     */\\n    function truncate(Fixed18 a) internal pure returns (int256) {\\n        return Fixed18.unwrap(a) / BASE;\\n    }\\n\\n    /**\\n     * @notice Returns the sign of the signed fixed-decimal\\n     * @dev Returns: -1 for negative\\n     *                0 for zero\\n     *                1 for positive\\n     * @param a Signed fixed-decimal\\n     * @return Sign of the signed fixed-decimal\\n     */\\n    function sign(Fixed18 a) internal pure returns (int256) {\\n        if (Fixed18.unwrap(a) > 0) return 1;\\n        if (Fixed18.unwrap(a) < 0) return -1;\\n        return 0;\\n    }\\n\\n    /**\\n     * @notice Returns the absolute value of the signed fixed-decimal\\n     * @param a Signed fixed-decimal\\n     * @return Absolute value of the signed fixed-decimal\\n     */\\n    function abs(Fixed18 a) internal pure returns (UFixed18) {\\n        return UFixed18.wrap(SignedMath.abs(Fixed18.unwrap(a)));\\n    }\\n}\\n\\nlibrary Fixed18StorageLib {\\n    function read(Fixed18Storage self) internal view returns (Fixed18 value) {\\n        assembly (\\\"memory-safe\\\") {\\n            value := sload(self)\\n        }\\n    }\\n\\n    function store(Fixed18Storage self, Fixed18 value) internal {\\n        assembly (\\\"memory-safe\\\") {\\n            sstore(self, value)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xdd3541bc1dbe5ca81f996a1ed5a05a7b8c74247426aab221d1a8f37be91d0e4f\",\"license\":\"Apache-2.0\"},\"@equilibria/root/number/types/Fixed6.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/SignedMath.sol\\\";\\nimport \\\"../NumberMath.sol\\\";\\nimport \\\"./Fixed18.sol\\\";\\nimport \\\"./UFixed6.sol\\\";\\n\\n/// @dev Fixed6 type\\ntype Fixed6 is int256;\\nusing Fixed6Lib for Fixed6 global;\\ntype Fixed6Storage is bytes32;\\nusing Fixed6StorageLib for Fixed6Storage global;\\n\\n/**\\n * @title Fixed6Lib\\n * @notice Library for the signed fixed-decimal type.\\n */\\nlibrary Fixed6Lib {\\n    error Fixed6OverflowError(uint256 value);\\n\\n    int256 private constant BASE = 1e6;\\n    Fixed6 public constant ZERO = Fixed6.wrap(0);\\n    Fixed6 public constant ONE = Fixed6.wrap(BASE);\\n    Fixed6 public constant NEG_ONE = Fixed6.wrap(-1 * BASE);\\n    Fixed6 public constant MAX = Fixed6.wrap(type(int256).max);\\n    Fixed6 public constant MIN = Fixed6.wrap(type(int256).min);\\n\\n    /**\\n     * @notice Creates a signed fixed-decimal from an unsigned fixed-decimal\\n     * @param a Unsigned fixed-decimal\\n     * @return New signed fixed-decimal\\n     */\\n    function from(UFixed6 a) internal pure returns (Fixed6) {\\n        uint256 value = UFixed6.unwrap(a);\\n        if (value > uint256(type(int256).max)) revert Fixed6OverflowError(value);\\n        return Fixed6.wrap(int256(value));\\n    }\\n\\n    /**\\n     * @notice Creates a signed fixed-decimal from a sign and an unsigned fixed-decimal\\n     * @param s Sign\\n     * @param m Unsigned fixed-decimal magnitude\\n     * @return New signed fixed-decimal\\n     */\\n    function from(int256 s, UFixed6 m) internal pure returns (Fixed6) {\\n        if (s > 0) return from(m);\\n        if (s < 0) {\\n            // Since from(m) multiplies m by BASE, from(m) cannot be type(int256).min\\n            // which is the only value that would overflow when negated. Therefore,\\n            // we can safely negate from(m) without checking for overflow.\\n            unchecked { return Fixed6.wrap(-1 * Fixed6.unwrap(from(m))); }\\n        }\\n        return ZERO;\\n    }\\n\\n    /**\\n     * @notice Creates a signed fixed-decimal from a signed integer\\n     * @param a Signed number\\n     * @return New signed fixed-decimal\\n     */\\n    function from(int256 a) internal pure returns (Fixed6) {\\n        return Fixed6.wrap(a * BASE);\\n    }\\n\\n    /**\\n     * @notice Creates a signed fixed-decimal from a base-18 signed fixed-decimal\\n     * @param a Base-18 signed fixed-decimal\\n     * @return New signed fixed-decimal\\n     */\\n    function from(Fixed18 a) internal pure returns (Fixed6) {\\n        return Fixed6.wrap(Fixed18.unwrap(a) / 1e12);\\n    }\\n\\n    /**\\n     * @notice Creates a signed fixed-decimal from a base-18 signed fixed-decimal\\n     * @param a Base-18 signed fixed-decimal\\n     * @param roundOut Whether to round the result away from zero if there is a remainder\\n     * @return New signed fixed-decimal\\n     */\\n    function from(Fixed18 a, bool roundOut) internal pure returns (Fixed6) {\\n        return roundOut ? Fixed6.wrap(NumberMath.divOut(Fixed18.unwrap(a), 1e12)): from(a);\\n    }\\n\\n    /**\\n     * @notice Returns whether the signed fixed-decimal is equal to zero.\\n     * @param a Signed fixed-decimal\\n     * @return Whether the signed fixed-decimal is zero.\\n     */\\n    function isZero(Fixed6 a) internal pure returns (bool) {\\n        return Fixed6.unwrap(a) == 0;\\n    }\\n\\n    /**\\n     * @notice Adds two signed fixed-decimals `a` and `b` together\\n     * @param a First signed fixed-decimal\\n     * @param b Second signed fixed-decimal\\n     * @return Resulting summed signed fixed-decimal\\n     */\\n    function add(Fixed6 a, Fixed6 b) internal pure returns (Fixed6) {\\n        return Fixed6.wrap(Fixed6.unwrap(a) + Fixed6.unwrap(b));\\n    }\\n\\n    /**\\n     * @notice Subtracts signed fixed-decimal `b` from `a`\\n     * @param a Signed fixed-decimal to subtract from\\n     * @param b Signed fixed-decimal to subtract\\n     * @return Resulting subtracted signed fixed-decimal\\n     */\\n    function sub(Fixed6 a, Fixed6 b) internal pure returns (Fixed6) {\\n        return Fixed6.wrap(Fixed6.unwrap(a) - Fixed6.unwrap(b));\\n    }\\n\\n    /**\\n     * @notice Multiplies two signed fixed-decimals `a` and `b` together\\n     * @param a First signed fixed-decimal\\n     * @param b Second signed fixed-decimal\\n     * @return Resulting multiplied signed fixed-decimal\\n     */\\n    function mul(Fixed6 a, Fixed6 b) internal pure returns (Fixed6) {\\n        return Fixed6.wrap(Fixed6.unwrap(a) * Fixed6.unwrap(b) / BASE);\\n    }\\n\\n    /**\\n     * @notice Multiplies two signed fixed-decimals `a` and `b` together, rounding the result away from zero if there is a remainder\\n     * @param a First signed fixed-decimal\\n     * @param b Second signed fixed-decimal\\n     * @return Resulting multiplied signed fixed-decimal\\n     */\\n    function mulOut(Fixed6 a, Fixed6 b) internal pure returns (Fixed6) {\\n        return Fixed6.wrap(NumberMath.divOut(Fixed6.unwrap(a) * Fixed6.unwrap(b), BASE));\\n    }\\n\\n    /**\\n     * @notice Divides signed fixed-decimal `a` by `b`\\n     * @param a Signed fixed-decimal to divide\\n     * @param b Signed fixed-decimal to divide by\\n     * @return Resulting divided signed fixed-decimal\\n     */\\n    function div(Fixed6 a, Fixed6 b) internal pure returns (Fixed6) {\\n        return Fixed6.wrap(Fixed6.unwrap(a) * BASE / Fixed6.unwrap(b));\\n    }\\n\\n    /**\\n     * @notice Divides signed fixed-decimal `a` by `b`, rounding the result away from zero if there is a remainder\\n     * @param a Signed fixed-decimal to divide\\n     * @param b Signed fixed-decimal to divide by\\n     * @return Resulting divided signed fixed-decimal\\n     */\\n    function divOut(Fixed6 a, Fixed6 b) internal pure returns (Fixed6) {\\n        return Fixed6Lib.from(sign(a) * sign(b), a.abs().divOut(b.abs()));\\n    }\\n\\n    /**\\n     * @notice Divides unsigned fixed-decimal `a` by `b`\\n     * @dev Does not revert on divide-by-0, instead returns `ONE` for `0/0`, `MAX` for `n/0`, and `MIN` for `-n/0`.\\n     * @param a Unsigned fixed-decimal to divide\\n     * @param b Unsigned fixed-decimal to divide by\\n     * @return Resulting divided unsigned fixed-decimal\\n     */\\n    function unsafeDiv(Fixed6 a, Fixed6 b) internal pure returns (Fixed6) {\\n        if (isZero(b)) {\\n            if (gt(a, ZERO)) return MAX;\\n            if (lt(a, ZERO)) return MIN;\\n            return ONE;\\n        } else {\\n            return div(a, b);\\n        }\\n    }\\n\\n    /**\\n     * @notice Divides unsigned fixed-decimal `a` by `b`, rounding the result away from zero if there is a remainder\\n     * @dev Does not revert on divide-by-0, instead returns `ONE` for `0/0`, `MAX` for `n/0`, and `MIN` for `-n/0`.\\n     * @param a Unsigned fixed-decimal to divide\\n     * @param b Unsigned fixed-decimal to divide by\\n     * @return Resulting divided unsigned fixed-decimal\\n     */\\n    function unsafeDivOut(Fixed6 a, Fixed6 b) internal pure returns (Fixed6) {\\n        if (isZero(b)) {\\n            if (gt(a, ZERO)) return MAX;\\n            if (lt(a, ZERO)) return MIN;\\n            return ONE;\\n        } else {\\n            return divOut(a, b);\\n        }\\n    }\\n\\n    /**\\n     * @notice Computes a * b / c without loss of precision due to BASE conversion\\n     * @param a First signed fixed-decimal\\n     * @param b Signed number to multiply by\\n     * @param c Signed number to divide by\\n     * @return Resulting computation\\n     */\\n    function muldiv(Fixed6 a, int256 b, int256 c) internal pure returns (Fixed6) {\\n        return muldiv(a, Fixed6.wrap(b), Fixed6.wrap(c));\\n    }\\n\\n    /**\\n     * @notice Computes a * b / c without loss of precision due to BASE conversion, rounding the result up to the next integer if there is a remainder\\n     * @param a First signed fixed-decimal\\n     * @param b Signed number to multiply by\\n     * @param c Signed number to divide by\\n     * @return Resulting computation\\n     */\\n    function muldivOut(Fixed6 a, int256 b, int256 c) internal pure returns (Fixed6) {\\n        return muldivOut(a, Fixed6.wrap(b), Fixed6.wrap(c));\\n    }\\n\\n    /**\\n     * @notice Computes a * b / c without loss of precision due to BASE conversion\\n     * @param a First signed fixed-decimal\\n     * @param b Signed fixed-decimal to multiply by\\n     * @param c Signed fixed-decimal to divide by\\n     * @return Resulting computation\\n     */\\n    function muldiv(Fixed6 a, Fixed6 b, Fixed6 c) internal pure returns (Fixed6) {\\n        return Fixed6.wrap(Fixed6.unwrap(a) * Fixed6.unwrap(b) / Fixed6.unwrap(c));\\n    }\\n\\n    /**\\n     * @notice Computes a * b / c without loss of precision due to BASE conversion, rounding the result up to the next integer if there is a remainder\\n     * @param a First signed fixed-decimal\\n     * @param b Signed fixed-decimal to multiply by\\n     * @param c Signed fixed-decimal to divide by\\n     * @return Resulting computation\\n     */\\n    function muldivOut(Fixed6 a, Fixed6 b, Fixed6 c) internal pure returns (Fixed6) {\\n        return Fixed6.wrap(NumberMath.divOut(Fixed6.unwrap(a) * Fixed6.unwrap(b), Fixed6.unwrap(c)));\\n    }\\n\\n    /**\\n     * @notice Returns whether signed fixed-decimal `a` is equal to `b`\\n     * @param a First signed fixed-decimal\\n     * @param b Second signed fixed-decimal\\n     * @return Whether `a` is equal to `b`\\n     */\\n    function eq(Fixed6 a, Fixed6 b) internal pure returns (bool) {\\n        return compare(a, b) == 1;\\n    }\\n\\n    /**\\n     * @notice Returns whether signed fixed-decimal `a` is greater than `b`\\n     * @param a First signed fixed-decimal\\n     * @param b Second signed fixed-decimal\\n     * @return Whether `a` is greater than `b`\\n     */\\n    function gt(Fixed6 a, Fixed6 b) internal pure returns (bool) {\\n        return compare(a, b) == 2;\\n    }\\n\\n    /**\\n     * @notice Returns whether signed fixed-decimal `a` is less than `b`\\n     * @param a First signed fixed-decimal\\n     * @param b Second signed fixed-decimal\\n     * @return Whether `a` is less than `b`\\n     */\\n    function lt(Fixed6 a, Fixed6 b) internal pure returns (bool) {\\n        return compare(a, b) == 0;\\n    }\\n\\n    /**\\n     * @notice Returns whether signed fixed-decimal `a` is greater than or equal to `b`\\n     * @param a First signed fixed-decimal\\n     * @param b Second signed fixed-decimal\\n     * @return Whether `a` is greater than or equal to `b`\\n     */\\n    function gte(Fixed6 a, Fixed6 b) internal pure returns (bool) {\\n        return gt(a, b) || eq(a, b);\\n    }\\n\\n    /**\\n     * @notice Returns whether signed fixed-decimal `a` is less than or equal to `b`\\n     * @param a First signed fixed-decimal\\n     * @param b Second signed fixed-decimal\\n     * @return Whether `a` is less than or equal to `b`\\n     */\\n    function lte(Fixed6 a, Fixed6 b) internal pure returns (bool) {\\n        return lt(a, b) || eq(a, b);\\n    }\\n\\n    /**\\n     * @notice Compares the signed fixed-decimals `a` and `b`\\n     * @dev Returns: 2 for greater than\\n     *               1 for equal to\\n     *               0 for less than\\n     * @param a First signed fixed-decimal\\n     * @param b Second signed fixed-decimal\\n     * @return Compare result of `a` and `b`\\n     */\\n    function compare(Fixed6 a, Fixed6 b) internal pure returns (uint256) {\\n        (int256 au, int256 bu) = (Fixed6.unwrap(a), Fixed6.unwrap(b));\\n        if (au > bu) return 2;\\n        if (au < bu) return 0;\\n        return 1;\\n    }\\n\\n    /**\\n     * @notice Returns a signed fixed-decimal representing the ratio of `a` over `b`\\n     * @param a First signed number\\n     * @param b Second signed number\\n     * @return Ratio of `a` over `b`\\n     */\\n    function ratio(int256 a, int256 b) internal pure returns (Fixed6) {\\n        return Fixed6.wrap(a * BASE / b);\\n    }\\n\\n    /**\\n     * @notice Returns the minimum of signed fixed-decimals `a` and `b`\\n     * @param a First signed fixed-decimal\\n     * @param b Second signed fixed-decimal\\n     * @return Minimum of `a` and `b`\\n     */\\n    function min(Fixed6 a, Fixed6 b) internal pure returns (Fixed6) {\\n        return Fixed6.wrap(SignedMath.min(Fixed6.unwrap(a), Fixed6.unwrap(b)));\\n    }\\n\\n    /**\\n     * @notice Returns the maximum of signed fixed-decimals `a` and `b`\\n     * @param a First signed fixed-decimal\\n     * @param b Second signed fixed-decimal\\n     * @return Maximum of `a` and `b`\\n     */\\n    function max(Fixed6 a, Fixed6 b) internal pure returns (Fixed6) {\\n        return Fixed6.wrap(SignedMath.max(Fixed6.unwrap(a), Fixed6.unwrap(b)));\\n    }\\n\\n    /**\\n     * @notice Converts the signed fixed-decimal into an integer, truncating any decimal portion\\n     * @param a Signed fixed-decimal\\n     * @return Truncated signed number\\n     */\\n    function truncate(Fixed6 a) internal pure returns (int256) {\\n        return Fixed6.unwrap(a) / BASE;\\n    }\\n\\n    /**\\n     * @notice Returns the sign of the signed fixed-decimal\\n     * @dev Returns: -1 for negative\\n     *                0 for zero\\n     *                1 for positive\\n     * @param a Signed fixed-decimal\\n     * @return Sign of the signed fixed-decimal\\n     */\\n    function sign(Fixed6 a) internal pure returns (int256) {\\n        if (Fixed6.unwrap(a) > 0) return 1;\\n        if (Fixed6.unwrap(a) < 0) return -1;\\n        return 0;\\n    }\\n\\n    /**\\n     * @notice Returns the absolute value of the signed fixed-decimal\\n     * @param a Signed fixed-decimal\\n     * @return Absolute value of the signed fixed-decimal\\n     */\\n    function abs(Fixed6 a) internal pure returns (UFixed6) {\\n        return UFixed6.wrap(SignedMath.abs(Fixed6.unwrap(a)));\\n    }\\n}\\n\\nlibrary Fixed6StorageLib {\\n    function read(Fixed6Storage self) internal view returns (Fixed6 value) {\\n        assembly (\\\"memory-safe\\\") {\\n            value := sload(self)\\n        }\\n    }\\n\\n    function store(Fixed6Storage self, Fixed6 value) internal {\\n        assembly (\\\"memory-safe\\\") {\\n            sstore(self, value)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xba2715da2fdf9393cc5e3ce7f9a38f7bfd3b271dcbf9a7fac5245f7c3ecc4522\",\"license\":\"Apache-2.0\"},\"@equilibria/root/number/types/UFixed18.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport \\\"../NumberMath.sol\\\";\\nimport \\\"./Fixed18.sol\\\";\\nimport \\\"./UFixed6.sol\\\";\\n\\n/// @dev UFixed18 type\\ntype UFixed18 is uint256;\\nusing UFixed18Lib for UFixed18 global;\\ntype UFixed18Storage is bytes32;\\nusing UFixed18StorageLib for UFixed18Storage global;\\n\\n/**\\n * @title UFixed18Lib\\n * @notice Library for the unsigned fixed-decimal type.\\n */\\nlibrary UFixed18Lib {\\n    error UFixed18UnderflowError(int256 value);\\n\\n    uint256 private constant BASE = 1e18;\\n    UFixed18 public constant ZERO = UFixed18.wrap(0);\\n    UFixed18 public constant ONE = UFixed18.wrap(BASE);\\n    UFixed18 public constant MAX = UFixed18.wrap(type(uint256).max);\\n\\n    /**\\n     * @notice Creates a unsigned fixed-decimal from a signed fixed-decimal\\n     * @param a Signed fixed-decimal\\n     * @return New unsigned fixed-decimal\\n     */\\n    function from(Fixed18 a) internal pure returns (UFixed18) {\\n        int256 value = Fixed18.unwrap(a);\\n        if (value < 0) revert UFixed18UnderflowError(value);\\n        return UFixed18.wrap(uint256(value));\\n    }\\n\\n    /**\\n     * @notice Creates a unsigned fixed-decimal from a signed fixed-decimal\\n     * @dev Does not revert on underflow, instead returns `ZERO`\\n     * @param a Signed fixed-decimal\\n     * @return New unsigned fixed-decimal\\n     */\\n    function unsafeFrom(Fixed18 a) internal pure returns (UFixed18) {\\n        return a.lt(Fixed18Lib.ZERO) ? ZERO : from(a);\\n    }\\n\\n    /**\\n     * @notice Creates a unsigned fixed-decimal from a unsigned integer\\n     * @param a Unsigned number\\n     * @return New unsigned fixed-decimal\\n     */\\n    function from(uint256 a) internal pure returns (UFixed18) {\\n        return UFixed18.wrap(a * BASE);\\n    }\\n\\n    /**\\n     * @notice Creates a signed fixed-decimal from a base-6 signed fixed-decimal\\n     * @param a Base-6 signed fixed-decimal\\n     * @return New signed fixed-decimal\\n     */\\n    function from(UFixed6 a) internal pure returns (UFixed18) {\\n        return UFixed18.wrap(UFixed6.unwrap(a) * 1e12);\\n    }\\n\\n    /**\\n     * @notice Returns whether the unsigned fixed-decimal is equal to zero.\\n     * @param a Unsigned fixed-decimal\\n     * @return Whether the unsigned fixed-decimal is zero.\\n     */\\n    function isZero(UFixed18 a) internal pure returns (bool) {\\n        return UFixed18.unwrap(a) == 0;\\n    }\\n\\n    /**\\n     * @notice Adds two unsigned fixed-decimals `a` and `b` together\\n     * @param a First unsigned fixed-decimal\\n     * @param b Second unsigned fixed-decimal\\n     * @return Resulting summed unsigned fixed-decimal\\n     */\\n    function add(UFixed18 a, UFixed18 b) internal pure returns (UFixed18) {\\n        return UFixed18.wrap(UFixed18.unwrap(a) + UFixed18.unwrap(b));\\n    }\\n\\n    /**\\n     * @notice Subtracts unsigned fixed-decimal `b` from `a`\\n     * @param a Unsigned fixed-decimal to subtract from\\n     * @param b Unsigned fixed-decimal to subtract\\n     * @return Resulting subtracted unsigned fixed-decimal\\n     */\\n    function sub(UFixed18 a, UFixed18 b) internal pure returns (UFixed18) {\\n        return UFixed18.wrap(UFixed18.unwrap(a) - UFixed18.unwrap(b));\\n    }\\n\\n    /**\\n     * @notice Subtracts unsigned fixed-decimal `a` by `b`\\n     * @dev Does not revert on underflow, instead returns `ZERO`\\n     * @param a Unsigned fixed-decimal to subtract from\\n     * @param b Unsigned fixed-decimal to subtract\\n     * @return Resulting subtracted unsigned fixed-decimal\\n     */\\n    function unsafeSub(UFixed18 a, UFixed18 b) internal pure returns (UFixed18) {\\n        return gt(b, a) ? ZERO : sub(a, b);\\n    }\\n\\n    /**\\n     * @notice Multiplies two unsigned fixed-decimals `a` and `b` together\\n     * @param a First unsigned fixed-decimal\\n     * @param b Second unsigned fixed-decimal\\n     * @return Resulting multiplied unsigned fixed-decimal\\n     */\\n    function mul(UFixed18 a, UFixed18 b) internal pure returns (UFixed18) {\\n        return UFixed18.wrap(UFixed18.unwrap(a) * UFixed18.unwrap(b) / BASE);\\n    }\\n\\n    /**\\n     * @notice Multiplies two unsigned fixed-decimals `a` and `b` together, rounding the result up to the next integer if there is a remainder\\n     * @param a First unsigned fixed-decimal\\n     * @param b Second unsigned fixed-decimal\\n     * @return Resulting multiplied unsigned fixed-decimal\\n     */\\n    function mulOut(UFixed18 a, UFixed18 b) internal pure returns (UFixed18) {\\n        return UFixed18.wrap(NumberMath.divOut(UFixed18.unwrap(a) * UFixed18.unwrap(b), BASE));\\n    }\\n\\n    /**\\n     * @notice Divides unsigned fixed-decimal `a` by `b`\\n     * @param a Unsigned fixed-decimal to divide\\n     * @param b Unsigned fixed-decimal to divide by\\n     * @return Resulting divided unsigned fixed-decimal\\n     */\\n    function div(UFixed18 a, UFixed18 b) internal pure returns (UFixed18) {\\n        return UFixed18.wrap(UFixed18.unwrap(a) * BASE / UFixed18.unwrap(b));\\n    }\\n\\n    /**\\n     * @notice Divides unsigned fixed-decimal `a` by `b`, rounding the result up to the next integer if there is a remainder\\n     * @param a Unsigned fixed-decimal to divide\\n     * @param b Unsigned fixed-decimal to divide by\\n     * @return Resulting divided unsigned fixed-decimal\\n     */\\n    function divOut(UFixed18 a, UFixed18 b) internal pure returns (UFixed18) {\\n        return UFixed18.wrap(NumberMath.divOut(UFixed18.unwrap(a) * BASE, UFixed18.unwrap(b)));\\n    }\\n\\n    /**\\n     * @notice Divides unsigned fixed-decimal `a` by `b`\\n     * @dev Does not revert on divide-by-0, instead returns `ONE` for `0/0` and `MAX` for `n/0`.\\n     * @param a Unsigned fixed-decimal to divide\\n     * @param b Unsigned fixed-decimal to divide by\\n     * @return Resulting divided unsigned fixed-decimal\\n     */\\n    function unsafeDiv(UFixed18 a, UFixed18 b) internal pure returns (UFixed18) {\\n        if (isZero(b)) {\\n            return isZero(a) ? ONE : MAX;\\n        } else {\\n            return div(a, b);\\n        }\\n    }\\n\\n    /**\\n     * @notice Divides unsigned fixed-decimal `a` by `b`, rounding the result up to the next integer if there is a remainder\\n     * @dev Does not revert on divide-by-0, instead returns `ONE` for `0/0` and `MAX` for `n/0`.\\n     * @param a Unsigned fixed-decimal to divide\\n     * @param b Unsigned fixed-decimal to divide by\\n     * @return Resulting divided unsigned fixed-decimal\\n     */\\n    function unsafeDivOut(UFixed18 a, UFixed18 b) internal pure returns (UFixed18) {\\n        if (isZero(b)) {\\n            return isZero(a) ? ONE : MAX;\\n        } else {\\n            return divOut(a, b);\\n        }\\n    }\\n\\n    /**\\n     * @notice Computes a * b / c without loss of precision due to BASE conversion\\n     * @param a First unsigned fixed-decimal\\n     * @param b Unsigned number to multiply by\\n     * @param c Unsigned number to divide by\\n     * @return Resulting computation\\n     */\\n    function muldiv(UFixed18 a, uint256 b, uint256 c) internal pure returns (UFixed18) {\\n        return muldiv(a, UFixed18.wrap(b), UFixed18.wrap(c));\\n    }\\n\\n    /**\\n     * @notice Computes a * b / c without loss of precision due to BASE conversion, rounding the result up to the next integer if there is a remainder\\n     * @param a First unsigned fixed-decimal\\n     * @param b Unsigned number to multiply by\\n     * @param c Unsigned number to divide by\\n     * @return Resulting computation\\n     */\\n    function muldivOut(UFixed18 a, uint256 b, uint256 c) internal pure returns (UFixed18) {\\n        return muldivOut(a, UFixed18.wrap(b), UFixed18.wrap(c));\\n    }\\n\\n\\n    /**\\n     * @notice Computes a * b / c without loss of precision due to BASE conversion\\n     * @param a First unsigned fixed-decimal\\n     * @param b Unsigned fixed-decimal to multiply by\\n     * @param c Unsigned fixed-decimal to divide by\\n     * @return Resulting computation\\n     */\\n    function muldiv(UFixed18 a, UFixed18 b, UFixed18 c) internal pure returns (UFixed18) {\\n        return UFixed18.wrap(UFixed18.unwrap(a) * UFixed18.unwrap(b) / UFixed18.unwrap(c));\\n    }\\n\\n    /**\\n     * @notice Computes a * b / c without loss of precision due to BASE conversion, rounding the result up to the next integer if there is a remainder\\n     * @param a First unsigned fixed-decimal\\n     * @param b Unsigned fixed-decimal to multiply by\\n     * @param c Unsigned fixed-decimal to divide by\\n     * @return Resulting computation\\n     */\\n    function muldivOut(UFixed18 a, UFixed18 b, UFixed18 c) internal pure returns (UFixed18) {\\n        return UFixed18.wrap(NumberMath.divOut(UFixed18.unwrap(a) * UFixed18.unwrap(b), UFixed18.unwrap(c)));\\n    }\\n\\n    /**\\n     * @notice Returns whether unsigned fixed-decimal `a` is equal to `b`\\n     * @param a First unsigned fixed-decimal\\n     * @param b Second unsigned fixed-decimal\\n     * @return Whether `a` is equal to `b`\\n     */\\n    function eq(UFixed18 a, UFixed18 b) internal pure returns (bool) {\\n        return compare(a, b) == 1;\\n    }\\n\\n    /**\\n     * @notice Returns whether unsigned fixed-decimal `a` is greater than `b`\\n     * @param a First unsigned fixed-decimal\\n     * @param b Second unsigned fixed-decimal\\n     * @return Whether `a` is greater than `b`\\n     */\\n    function gt(UFixed18 a, UFixed18 b) internal pure returns (bool) {\\n        return compare(a, b) == 2;\\n    }\\n\\n    /**\\n     * @notice Returns whether unsigned fixed-decimal `a` is less than `b`\\n     * @param a First unsigned fixed-decimal\\n     * @param b Second unsigned fixed-decimal\\n     * @return Whether `a` is less than `b`\\n     */\\n    function lt(UFixed18 a, UFixed18 b) internal pure returns (bool) {\\n        return compare(a, b) == 0;\\n    }\\n\\n    /**\\n     * @notice Returns whether unsigned fixed-decimal `a` is greater than or equal to `b`\\n     * @param a First unsigned fixed-decimal\\n     * @param b Second unsigned fixed-decimal\\n     * @return Whether `a` is greater than or equal to `b`\\n     */\\n    function gte(UFixed18 a, UFixed18 b) internal pure returns (bool) {\\n        return gt(a, b) || eq(a, b);\\n    }\\n\\n    /**\\n     * @notice Returns whether unsigned fixed-decimal `a` is less than or equal to `b`\\n     * @param a First unsigned fixed-decimal\\n     * @param b Second unsigned fixed-decimal\\n     * @return Whether `a` is less than or equal to `b`\\n     */\\n    function lte(UFixed18 a, UFixed18 b) internal pure returns (bool) {\\n        return lt(a, b) || eq(a, b);\\n    }\\n\\n    /**\\n     * @notice Compares the unsigned fixed-decimals `a` and `b`\\n     * @dev Returns: 2 for greater than\\n     *               1 for equal to\\n     *               0 for less than\\n     * @param a First unsigned fixed-decimal\\n     * @param b Second unsigned fixed-decimal\\n     * @return Compare result of `a` and `b`\\n     */\\n    function compare(UFixed18 a, UFixed18 b) internal pure returns (uint256) {\\n        (uint256 au, uint256 bu) = (UFixed18.unwrap(a), UFixed18.unwrap(b));\\n        if (au > bu) return 2;\\n        if (au < bu) return 0;\\n        return 1;\\n    }\\n\\n    /**\\n     * @notice Returns a unsigned fixed-decimal representing the ratio of `a` over `b`\\n     * @param a First unsigned number\\n     * @param b Second unsigned number\\n     * @return Ratio of `a` over `b`\\n     */\\n    function ratio(uint256 a, uint256 b) internal pure returns (UFixed18) {\\n        return UFixed18.wrap(a * BASE / b);\\n    }\\n\\n    /**\\n     * @notice Returns the minimum of unsigned fixed-decimals `a` and `b`\\n     * @param a First unsigned fixed-decimal\\n     * @param b Second unsigned fixed-decimal\\n     * @return Minimum of `a` and `b`\\n     */\\n    function min(UFixed18 a, UFixed18 b) internal pure returns (UFixed18) {\\n        return UFixed18.wrap(Math.min(UFixed18.unwrap(a), UFixed18.unwrap(b)));\\n    }\\n\\n    /**\\n     * @notice Returns the maximum of unsigned fixed-decimals `a` and `b`\\n     * @param a First unsigned fixed-decimal\\n     * @param b Second unsigned fixed-decimal\\n     * @return Maximum of `a` and `b`\\n     */\\n    function max(UFixed18 a, UFixed18 b) internal pure returns (UFixed18) {\\n        return UFixed18.wrap(Math.max(UFixed18.unwrap(a), UFixed18.unwrap(b)));\\n    }\\n\\n    /**\\n     * @notice Converts the unsigned fixed-decimal into an integer, truncating any decimal portion\\n     * @param a Unsigned fixed-decimal\\n     * @return Truncated unsigned number\\n     */\\n    function truncate(UFixed18 a) internal pure returns (uint256) {\\n        return UFixed18.unwrap(a) / BASE;\\n    }\\n}\\n\\nlibrary UFixed18StorageLib {\\n    function read(UFixed18Storage self) internal view returns (UFixed18 value) {\\n        assembly (\\\"memory-safe\\\") {\\n            value := sload(self)\\n        }\\n    }\\n\\n    function store(UFixed18Storage self, UFixed18 value) internal {\\n        assembly (\\\"memory-safe\\\") {\\n            sstore(self, value)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x42ce82e3622fdea0b8044a68a25f6df5102b3a25e1d26a2aaec1f928815c1d56\",\"license\":\"Apache-2.0\"},\"@equilibria/root/number/types/UFixed6.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport \\\"../NumberMath.sol\\\";\\nimport \\\"./Fixed6.sol\\\";\\nimport \\\"./UFixed18.sol\\\";\\n\\n/// @dev UFixed6 type\\ntype UFixed6 is uint256;\\nusing UFixed6Lib for UFixed6 global;\\ntype UFixed6Storage is bytes32;\\nusing UFixed6StorageLib for UFixed6Storage global;\\n\\n/**\\n * @title UFixed6Lib\\n * @notice Library for the unsigned fixed-decimal type.\\n */\\nlibrary UFixed6Lib {\\n    error UFixed6UnderflowError(int256 value);\\n\\n    uint256 private constant BASE = 1e6;\\n    UFixed6 public constant ZERO = UFixed6.wrap(0);\\n    UFixed6 public constant ONE = UFixed6.wrap(BASE);\\n    UFixed6 public constant MAX = UFixed6.wrap(type(uint256).max);\\n\\n    /**\\n     * @notice Creates a unsigned fixed-decimal from a signed fixed-decimal\\n     * @param a Signed fixed-decimal\\n     * @return New unsigned fixed-decimal\\n     */\\n    function from(Fixed6 a) internal pure returns (UFixed6) {\\n        int256 value = Fixed6.unwrap(a);\\n        if (value < 0) revert UFixed6UnderflowError(value);\\n        return UFixed6.wrap(uint256(value));\\n    }\\n\\n    /**\\n     * @notice Creates a unsigned fixed-decimal from a signed fixed-decimal\\n     * @dev Does not revert on underflow, instead returns `ZERO`\\n     * @param a Signed fixed-decimal\\n     * @return New unsigned fixed-decimal\\n     */\\n    function unsafeFrom(Fixed6 a) internal pure returns (UFixed6) {\\n        return a.lt(Fixed6Lib.ZERO) ? ZERO : from(a);\\n    }\\n\\n    /**\\n     * @notice Creates a unsigned fixed-decimal from a unsigned integer\\n     * @param a Unsigned number\\n     * @return New unsigned fixed-decimal\\n     */\\n    function from(uint256 a) internal pure returns (UFixed6) {\\n        return UFixed6.wrap(a * BASE);\\n    }\\n\\n    /**\\n     * @notice Creates an unsigned fixed-decimal from a base-18 unsigned fixed-decimal\\n     * @param a Base-18 unsigned fixed-decimal\\n     * @return New unsigned fixed-decimal\\n     */\\n    function from(UFixed18 a) internal pure returns (UFixed6) {\\n        return UFixed6.wrap(UFixed18.unwrap(a) / 1e12);\\n    }\\n\\n    /**\\n     * @notice Creates an unsigned fixed-decimal from a base-18 unsigned fixed-decimal\\n     * @param a Base-18 unsigned fixed-decimal\\n     * @param roundOut Whether to round the result away from zero if there is a remainder\\n     * @return New unsigned fixed-decimal\\n     */\\n    function from(UFixed18 a, bool roundOut) internal pure returns (UFixed6) {\\n        return roundOut ? UFixed6.wrap(NumberMath.divOut(UFixed18.unwrap(a), 1e12)): from(a);\\n    }\\n\\n    /**\\n     * @notice Returns whether the unsigned fixed-decimal is equal to zero.\\n     * @param a Unsigned fixed-decimal\\n     * @return Whether the unsigned fixed-decimal is zero.\\n     */\\n    function isZero(UFixed6 a) internal pure returns (bool) {\\n        return UFixed6.unwrap(a) == 0;\\n    }\\n\\n    /**\\n     * @notice Adds two unsigned fixed-decimals `a` and `b` together\\n     * @param a First unsigned fixed-decimal\\n     * @param b Second unsigned fixed-decimal\\n     * @return Resulting summed unsigned fixed-decimal\\n     */\\n    function add(UFixed6 a, UFixed6 b) internal pure returns (UFixed6) {\\n        return UFixed6.wrap(UFixed6.unwrap(a) + UFixed6.unwrap(b));\\n    }\\n\\n    /**\\n     * @notice Subtracts unsigned fixed-decimal `b` from `a`\\n     * @param a Unsigned fixed-decimal to subtract from\\n     * @param b Unsigned fixed-decimal to subtract\\n     * @return Resulting subtracted unsigned fixed-decimal\\n     */\\n    function sub(UFixed6 a, UFixed6 b) internal pure returns (UFixed6) {\\n        return UFixed6.wrap(UFixed6.unwrap(a) - UFixed6.unwrap(b));\\n    }\\n\\n    /**\\n     * @notice Subtracts unsigned fixed-decimal `a` by `b`\\n     * @dev Does not revert on underflow, instead returns `ZERO`\\n     * @param a Unsigned fixed-decimal to subtract from\\n     * @param b Unsigned fixed-decimal to subtract\\n     * @return Resulting subtracted unsigned fixed-decimal\\n     */\\n    function unsafeSub(UFixed6 a, UFixed6 b) internal pure returns (UFixed6) {\\n        return gt(b, a) ? ZERO : sub(a, b);\\n    }\\n\\n    /**\\n     * @notice Multiplies two unsigned fixed-decimals `a` and `b` together\\n     * @param a First unsigned fixed-decimal\\n     * @param b Second unsigned fixed-decimal\\n     * @return Resulting multiplied unsigned fixed-decimal\\n     */\\n    function mul(UFixed6 a, UFixed6 b) internal pure returns (UFixed6) {\\n        return UFixed6.wrap(UFixed6.unwrap(a) * UFixed6.unwrap(b) / BASE);\\n    }\\n\\n    /**\\n     * @notice Multiplies two unsigned fixed-decimals `a` and `b` together, rounding the result up to the next integer if there is a remainder\\n     * @param a First unsigned fixed-decimal\\n     * @param b Second unsigned fixed-decimal\\n     * @return Resulting multiplied unsigned fixed-decimal\\n     */\\n    function mulOut(UFixed6 a, UFixed6 b) internal pure returns (UFixed6) {\\n        return UFixed6.wrap(NumberMath.divOut(UFixed6.unwrap(a) * UFixed6.unwrap(b), BASE));\\n    }\\n\\n    /**\\n     * @notice Divides unsigned fixed-decimal `a` by `b`\\n     * @param a Unsigned fixed-decimal to divide\\n     * @param b Unsigned fixed-decimal to divide by\\n     * @return Resulting divided unsigned fixed-decimal\\n     */\\n    function div(UFixed6 a, UFixed6 b) internal pure returns (UFixed6) {\\n        return UFixed6.wrap(UFixed6.unwrap(a) * BASE / UFixed6.unwrap(b));\\n    }\\n\\n    /**\\n     * @notice Divides unsigned fixed-decimal `a` by `b`, rounding the result up to the next integer if there is a remainder\\n     * @param a Unsigned fixed-decimal to divide\\n     * @param b Unsigned fixed-decimal to divide by\\n     * @return Resulting divided unsigned fixed-decimal\\n     */\\n    function divOut(UFixed6 a, UFixed6 b) internal pure returns (UFixed6) {\\n        return UFixed6.wrap(NumberMath.divOut(UFixed6.unwrap(a) * BASE, UFixed6.unwrap(b)));\\n    }\\n\\n    /**\\n     * @notice Divides unsigned fixed-decimal `a` by `b`\\n     * @dev Does not revert on divide-by-0, instead returns `ONE` for `0/0` and `MAX` for `n/0`.\\n     * @param a Unsigned fixed-decimal to divide\\n     * @param b Unsigned fixed-decimal to divide by\\n     * @return Resulting divided unsigned fixed-decimal\\n     */\\n    function unsafeDiv(UFixed6 a, UFixed6 b) internal pure returns (UFixed6) {\\n        if (isZero(b)) {\\n            return isZero(a) ? ONE : MAX;\\n        } else {\\n            return div(a, b);\\n        }\\n    }\\n\\n    /**\\n     * @notice Divides unsigned fixed-decimal `a` by `b`, rounding the result up to the next integer if there is a remainder\\n     * @dev Does not revert on divide-by-0, instead returns `ONE` for `0/0` and `MAX` for `n/0`.\\n     * @param a Unsigned fixed-decimal to divide\\n     * @param b Unsigned fixed-decimal to divide by\\n     * @return Resulting divided unsigned fixed-decimal\\n     */\\n    function unsafeDivOut(UFixed6 a, UFixed6 b) internal pure returns (UFixed6) {\\n        if (isZero(b)) {\\n            return isZero(a) ? ONE : MAX;\\n        } else {\\n            return divOut(a, b);\\n        }\\n    }\\n\\n    /**\\n     * @notice Computes a * b / c without loss of precision due to BASE conversion\\n     * @param a First unsigned fixed-decimal\\n     * @param b Unsigned number to multiply by\\n     * @param c Unsigned number to divide by\\n     * @return Resulting computation\\n     */\\n    function muldiv(UFixed6 a, uint256 b, uint256 c) internal pure returns (UFixed6) {\\n        return muldiv(a, UFixed6.wrap(b), UFixed6.wrap(c));\\n    }\\n\\n    /**\\n     * @notice Computes a * b / c without loss of precision due to BASE conversion, rounding the result up to the next integer if there is a remainder\\n     * @param a First unsigned fixed-decimal\\n     * @param b Unsigned number to multiply by\\n     * @param c Unsigned number to divide by\\n     * @return Resulting computation\\n     */\\n    function muldivOut(UFixed6 a, uint256 b, uint256 c) internal pure returns (UFixed6) {\\n        return muldivOut(a, UFixed6.wrap(b), UFixed6.wrap(c));\\n    }\\n\\n\\n    /**\\n     * @notice Computes a * b / c without loss of precision due to BASE conversion\\n     * @param a First unsigned fixed-decimal\\n     * @param b Unsigned fixed-decimal to multiply by\\n     * @param c Unsigned fixed-decimal to divide by\\n     * @return Resulting computation\\n     */\\n    function muldiv(UFixed6 a, UFixed6 b, UFixed6 c) internal pure returns (UFixed6) {\\n        return UFixed6.wrap(UFixed6.unwrap(a) * UFixed6.unwrap(b) / UFixed6.unwrap(c));\\n    }\\n\\n    /**\\n     * @notice Computes a * b / c without loss of precision due to BASE conversion, rounding the result up to the next integer if there is a remainder\\n     * @param a First unsigned fixed-decimal\\n     * @param b Unsigned fixed-decimal to multiply by\\n     * @param c Unsigned fixed-decimal to divide by\\n     * @return Resulting computation\\n     */\\n    function muldivOut(UFixed6 a, UFixed6 b, UFixed6 c) internal pure returns (UFixed6) {\\n        return UFixed6.wrap(NumberMath.divOut(UFixed6.unwrap(a) * UFixed6.unwrap(b), UFixed6.unwrap(c)));\\n    }\\n\\n    /**\\n     * @notice Returns whether unsigned fixed-decimal `a` is equal to `b`\\n     * @param a First unsigned fixed-decimal\\n     * @param b Second unsigned fixed-decimal\\n     * @return Whether `a` is equal to `b`\\n     */\\n    function eq(UFixed6 a, UFixed6 b) internal pure returns (bool) {\\n        return compare(a, b) == 1;\\n    }\\n\\n    /**\\n     * @notice Returns whether unsigned fixed-decimal `a` is greater than `b`\\n     * @param a First unsigned fixed-decimal\\n     * @param b Second unsigned fixed-decimal\\n     * @return Whether `a` is greater than `b`\\n     */\\n    function gt(UFixed6 a, UFixed6 b) internal pure returns (bool) {\\n        return compare(a, b) == 2;\\n    }\\n\\n    /**\\n     * @notice Returns whether unsigned fixed-decimal `a` is less than `b`\\n     * @param a First unsigned fixed-decimal\\n     * @param b Second unsigned fixed-decimal\\n     * @return Whether `a` is less than `b`\\n     */\\n    function lt(UFixed6 a, UFixed6 b) internal pure returns (bool) {\\n        return compare(a, b) == 0;\\n    }\\n\\n    /**\\n     * @notice Returns whether unsigned fixed-decimal `a` is greater than or equal to `b`\\n     * @param a First unsigned fixed-decimal\\n     * @param b Second unsigned fixed-decimal\\n     * @return Whether `a` is greater than or equal to `b`\\n     */\\n    function gte(UFixed6 a, UFixed6 b) internal pure returns (bool) {\\n        return gt(a, b) || eq(a, b);\\n    }\\n\\n    /**\\n     * @notice Returns whether unsigned fixed-decimal `a` is less than or equal to `b`\\n     * @param a First unsigned fixed-decimal\\n     * @param b Second unsigned fixed-decimal\\n     * @return Whether `a` is less than or equal to `b`\\n     */\\n    function lte(UFixed6 a, UFixed6 b) internal pure returns (bool) {\\n        return lt(a, b) || eq(a, b);\\n    }\\n\\n    /**\\n     * @notice Compares the unsigned fixed-decimals `a` and `b`\\n     * @dev Returns: 2 for greater than\\n     *               1 for equal to\\n     *               0 for less than\\n     * @param a First unsigned fixed-decimal\\n     * @param b Second unsigned fixed-decimal\\n     * @return Compare result of `a` and `b`\\n     */\\n    function compare(UFixed6 a, UFixed6 b) internal pure returns (uint256) {\\n        (uint256 au, uint256 bu) = (UFixed6.unwrap(a), UFixed6.unwrap(b));\\n        if (au > bu) return 2;\\n        if (au < bu) return 0;\\n        return 1;\\n    }\\n\\n    /**\\n     * @notice Returns a unsigned fixed-decimal representing the ratio of `a` over `b`\\n     * @param a First unsigned number\\n     * @param b Second unsigned number\\n     * @return Ratio of `a` over `b`\\n     */\\n    function ratio(uint256 a, uint256 b) internal pure returns (UFixed6) {\\n        return UFixed6.wrap(a * BASE / b);\\n    }\\n\\n    /**\\n     * @notice Returns the minimum of unsigned fixed-decimals `a` and `b`\\n     * @param a First unsigned fixed-decimal\\n     * @param b Second unsigned fixed-decimal\\n     * @return Minimum of `a` and `b`\\n     */\\n    function min(UFixed6 a, UFixed6 b) internal pure returns (UFixed6) {\\n        return UFixed6.wrap(Math.min(UFixed6.unwrap(a), UFixed6.unwrap(b)));\\n    }\\n\\n    /**\\n     * @notice Returns the maximum of unsigned fixed-decimals `a` and `b`\\n     * @param a First unsigned fixed-decimal\\n     * @param b Second unsigned fixed-decimal\\n     * @return Maximum of `a` and `b`\\n     */\\n    function max(UFixed6 a, UFixed6 b) internal pure returns (UFixed6) {\\n        return UFixed6.wrap(Math.max(UFixed6.unwrap(a), UFixed6.unwrap(b)));\\n    }\\n\\n    /**\\n     * @notice Converts the unsigned fixed-decimal into an integer, truncating any decimal portion\\n     * @param a Unsigned fixed-decimal\\n     * @return Truncated unsigned number\\n     */\\n    function truncate(UFixed6 a) internal pure returns (uint256) {\\n        return UFixed6.unwrap(a) / BASE;\\n    }\\n}\\n\\nlibrary UFixed6StorageLib {\\n    function read(UFixed6Storage self) internal view returns (UFixed6 value) {\\n        assembly (\\\"memory-safe\\\") {\\n            value := sload(self)\\n        }\\n    }\\n\\n    function store(UFixed6Storage self, UFixed6 value) internal {\\n        assembly (\\\"memory-safe\\\") {\\n            sstore(self, value)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x378f6c0e6a0e8b534c019d99ddaecada9816e4c8ae66deba59bee92ac13ddc7f\",\"license\":\"Apache-2.0\"},\"@equilibria/root/pid/types/PAccumulator6.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.13;\\n\\nimport \\\"../../number/types/Fixed6.sol\\\";\\nimport \\\"./PController6.sol\\\";\\n\\n/// @dev PAccumulator6 type\\nstruct PAccumulator6 {\\n    Fixed6 _value;\\n    Fixed6 _skew;\\n}\\nusing PAccumulator6Lib for PAccumulator6 global;\\n\\n/// @title PAccumulator6Lib\\n/// @notice Accumulator for a the fixed 6-decimal PID controller. This holds the \\\"last seen state\\\" of the PID controller\\n///         and works in conjunction with the PController6 to compute the current rate.\\n/// @dev This implementation is specifically a P controller, with I_k and D_k both set to 0. In between updates, it\\n///      continues to accumulate at a linear rate based on the previous skew, but the rate is capped at the max value.\\n///      Once the rate hits the max value, it will continue to accumulate at the max value until the next update.\\nlibrary PAccumulator6Lib {\\n    /// @notice Accumulates the rate against notional given the prior and current state\\n    /// @param self The controller accumulator\\n    /// @param controller The controller configuration\\n    /// @param skew The current skew\\n    /// @param fromTimestamp The timestamp of the prior accumulation\\n    /// @param toTimestamp The current timestamp\\n    /// @param notional The notional to accumulate against\\n    /// @return accumulated The total accumulated amount\\n    function accumulate(\\n        PAccumulator6 memory self,\\n        PController6 memory controller,\\n        Fixed6 skew,\\n        uint256 fromTimestamp,\\n        uint256 toTimestamp,\\n        UFixed6 notional\\n    ) internal pure returns (Fixed6 accumulated) {\\n        // compute new value and intercept\\n        (Fixed6 newValue, UFixed6 interceptTimestamp) =\\n            controller.compute(self._value, self._skew, fromTimestamp, toTimestamp);\\n\\n        // accumulate rate within max\\n        accumulated = _accumulate(\\n            self._value.add(newValue),\\n            UFixed6Lib.from(fromTimestamp),\\n            interceptTimestamp,\\n            notional\\n        ).div(Fixed6Lib.from(2)); // rate = self._value + newValue / 2 -> divide here for added precision\\n\\n        // accumulate rate outside of max\\n        accumulated = _accumulate(\\n            newValue,\\n            interceptTimestamp,\\n            UFixed6Lib.from(toTimestamp),\\n            notional\\n        ).add(accumulated);\\n\\n        // update values\\n        self._value = newValue;\\n        self._skew = skew;\\n    }\\n\\n    /// @notice Helper function to accumulate a singular rate against notional\\n    /// @param rate The rate to accumulate\\n    /// @param fromTimestamp The timestamp to accumulate from\\n    /// @param toTimestamp The timestamp to accumulate to\\n    /// @param notional The notional to accumulate against\\n    /// @return The accumulated amount\\n    function _accumulate(\\n        Fixed6 rate,\\n        UFixed6 fromTimestamp,\\n        UFixed6 toTimestamp,\\n        UFixed6 notional\\n    ) private pure returns (Fixed6) {\\n        return rate\\n            .mul(Fixed6Lib.from(toTimestamp.sub(fromTimestamp)))\\n            .mul(Fixed6Lib.from(notional))\\n            .div(Fixed6Lib.from(365 days));\\n    }\\n}\\n\",\"keccak256\":\"0xf374a9997426cc90141334cdc8f8d3d62758be7eaefd21c5885742cc18d79a3a\",\"license\":\"Apache-2.0\"},\"@equilibria/root/pid/types/PController6.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.13;\\n\\nimport \\\"../../number/types/Fixed6.sol\\\";\\n\\n/// @dev PController6 type\\nstruct PController6 {\\n    UFixed6 k;\\n    Fixed6 min;\\n    Fixed6 max;\\n}\\nusing PController6Lib for PController6 global;\\n\\n/// @title PController6Lib\\n/// @notice Configuration for a the fixed 6-decimal PID controller.\\n/// @dev Each second, the PID controller's value is incremented by `skew / k`, with `max` as the maximum value.\\nlibrary PController6Lib {\\n    /// @notice compute the new value and intercept timestamp based on the prior controller state\\n    /// @dev `interceptTimestamp` will never exceed `toTimestamp`\\n    /// @param self the controller configuration\\n    /// @param value the prior value\\n    /// @param skew The prior skew\\n    /// @param fromTimestamp The prior timestamp\\n    /// @param toTimestamp The current timestamp\\n    /// @return newValue the new value\\n    /// @return interceptTimestamp the timestamp at which the value will be at the max\\n    function compute(\\n        PController6 memory self,\\n        Fixed6 value,\\n        Fixed6 skew,\\n        uint256 fromTimestamp,\\n        uint256 toTimestamp\\n    ) internal pure returns (Fixed6 newValue, UFixed6 interceptTimestamp) {\\n        // compute the new value without considering the max\\n        Fixed6 newValueUncapped = value.add(\\n            Fixed6Lib.from(int256(toTimestamp - fromTimestamp))\\n                .mul(skew)\\n                .div(Fixed6Lib.from(self.k))\\n        );\\n\\n        // cap the new value between min and max\\n        newValue = newValueUncapped.min(self.max).max(self.min);\\n\\n        // compute distance and range to the resultant value\\n        (UFixed6 distance, Fixed6 range) = (UFixed6Lib.from(toTimestamp - fromTimestamp), newValueUncapped.sub(value));\\n\\n        // compute the amount of buffer until the value is outside the max\\n        UFixed6 buffer = value.gt(self.max) || value.lt(self.min) ?\\n            UFixed6Lib.ZERO :\\n            (range.sign() > 0 ? self.max : self.min).sub(value).abs();\\n\\n        // compute the timestamp at which the value will be at the max\\n        interceptTimestamp = range.isZero() ?\\n            UFixed6Lib.from(toTimestamp) :\\n            UFixed6Lib.from(fromTimestamp).add(distance.muldiv(buffer, range.abs())).min(UFixed6Lib.from(toTimestamp));\\n    }\\n}\\n\",\"keccak256\":\"0xd1248bd4e011e66105f6da85d63e767f2ca4a26365a177ee9322d5a4007aed0c\",\"license\":\"Apache-2.0\"},\"@equilibria/root/storage/Storage.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.13;\\n\\nimport \\\"../number/types/UFixed18.sol\\\";\\n\\n/// @dev Stored boolean slot\\ntype BoolStorage is bytes32;\\nusing BoolStorageLib for BoolStorage global;\\n\\n/// @dev Stored uint256 slot\\ntype Uint256Storage is bytes32;\\nusing Uint256StorageLib for Uint256Storage global;\\n\\n/// @dev Stored int256 slot\\ntype Int256Storage is bytes32;\\nusing Int256StorageLib for Int256Storage global;\\n\\n/// @dev Stored address slot\\ntype AddressStorage is bytes32;\\nusing AddressStorageLib for AddressStorage global;\\n\\n/// @dev Stored bytes32 slot\\ntype Bytes32Storage is bytes32;\\nusing Bytes32StorageLib for Bytes32Storage global;\\n\\n/**\\n * @title BoolStorageLib\\n * @notice Library to manage storage and retrieval of a boolean at a fixed storage slot\\n */\\nlibrary BoolStorageLib {\\n    /**\\n     * @notice Retrieves the stored value\\n     * @param self Storage slot\\n     * @return value Stored bool value\\n     */\\n    function read(BoolStorage self) internal view returns (bool value) {\\n        assembly (\\\"memory-safe\\\") {\\n            value := sload(self)\\n        }\\n    }\\n\\n    /**\\n     * @notice Stores the value at the specific slot\\n     * @param self Storage slot\\n     * @param value boolean value to store\\n     */\\n    function store(BoolStorage self, bool value) internal {\\n        assembly (\\\"memory-safe\\\") {\\n            sstore(self, value)\\n        }\\n    }\\n}\\n\\n/**\\n * @title Uint256StorageLib\\n * @notice Library to manage storage and retrieval of an uint256 at a fixed storage slot\\n */\\nlibrary Uint256StorageLib {\\n    /**\\n     * @notice Retrieves the stored value\\n     * @param self Storage slot\\n     * @return value Stored uint256 value\\n     */\\n    function read(Uint256Storage self) internal view returns (uint256 value) {\\n        assembly (\\\"memory-safe\\\") {\\n            value := sload(self)\\n        }\\n    }\\n\\n    /**\\n     * @notice Stores the value at the specific slot\\n     * @param self Storage slot\\n     * @param value uint256 value to store\\n     */\\n    function store(Uint256Storage self, uint256 value) internal {\\n        assembly (\\\"memory-safe\\\") {\\n            sstore(self, value)\\n        }\\n    }\\n}\\n\\n/**\\n * @title Int256StorageLib\\n * @notice Library to manage storage and retrieval of an int256 at a fixed storage slot\\n */\\nlibrary Int256StorageLib {\\n    /**\\n     * @notice Retrieves the stored value\\n     * @param self Storage slot\\n     * @return value Stored int256 value\\n     */\\n    function read(Int256Storage self) internal view returns (int256 value) {\\n        assembly (\\\"memory-safe\\\") {\\n            value := sload(self)\\n        }\\n    }\\n\\n    /**\\n     * @notice Stores the value at the specific slot\\n     * @param self Storage slot\\n     * @param value int256 value to store\\n     */\\n    function store(Int256Storage self, int256 value) internal {\\n        assembly (\\\"memory-safe\\\") {\\n            sstore(self, value)\\n        }\\n    }\\n}\\n\\n/**\\n * @title AddressStorageLib\\n * @notice Library to manage storage and retrieval of an address at a fixed storage slot\\n */\\nlibrary AddressStorageLib {\\n    /**\\n     * @notice Retrieves the stored value\\n     * @param self Storage slot\\n     * @return value Stored address value\\n     */\\n    function read(AddressStorage self) internal view returns (address value) {\\n        assembly (\\\"memory-safe\\\") {\\n            value := sload(self)\\n        }\\n    }\\n\\n    /**\\n     * @notice Stores the value at the specific slot\\n     * @param self Storage slot\\n     * @param value address value to store\\n     */\\n    function store(AddressStorage self, address value) internal {\\n        assembly (\\\"memory-safe\\\") {\\n            sstore(self, value)\\n        }\\n    }\\n}\\n\\n/**\\n * @title Bytes32StorageLib\\n * @notice Library to manage storage and retrieval of a bytes32 at a fixed storage slot\\n */\\nlibrary Bytes32StorageLib {\\n    /**\\n     * @notice Retrieves the stored value\\n     * @param self Storage slot\\n     * @return value Stored bytes32 value\\n     */\\n    function read(Bytes32Storage self) internal view returns (bytes32 value) {\\n        assembly (\\\"memory-safe\\\") {\\n            value := sload(self)\\n        }\\n    }\\n\\n    /**\\n     * @notice Stores the value at the specific slot\\n     * @param self Storage slot\\n     * @param value bytes32 value to store\\n     */\\n    function store(Bytes32Storage self, bytes32 value) internal {\\n        assembly (\\\"memory-safe\\\") {\\n            sstore(self, value)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf904e2f3ded161530d179eca7f405de56db377f4770e236589940b943ef0dee9\",\"license\":\"Apache-2.0\"},\"@equilibria/root/token/types/Token18.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"../../number/types/UFixed18.sol\\\";\\n\\n/// @dev Token18\\ntype Token18 is address;\\nusing Token18Lib for Token18 global;\\ntype Token18Storage is bytes32;\\nusing Token18StorageLib for Token18Storage global;\\n\\n/**\\n * @title Token18Lib\\n * @notice Library to manage 18-decimal ERC20s that is compliant with the fixed-decimal types.\\n * @dev Maintains significant gas savings over other Token implementations since no conversion take place\\n */\\nlibrary Token18Lib {\\n    using SafeERC20 for IERC20;\\n\\n    Token18 public constant ZERO = Token18.wrap(address(0));\\n\\n    /**\\n     * @notice Returns whether a token is the zero address\\n     * @param self Token to check for\\n     * @return Whether the token is the zero address\\n     */\\n    function isZero(Token18 self) internal pure returns (bool) {\\n        return Token18.unwrap(self) == Token18.unwrap(ZERO);\\n    }\\n\\n    /**\\n     * @notice Returns whether the two tokens are equal\\n     * @param a First token to compare\\n     * @param b Second token to compare\\n     * @return Whether the two tokens are equal\\n     */\\n    function eq(Token18 a, Token18 b) internal pure returns (bool) {\\n        return Token18.unwrap(a) ==  Token18.unwrap(b);\\n    }\\n\\n    /**\\n     * @notice Approves `grantee` to spend infinite tokens from the caller\\n     * @dev Uses `approve` rather than `safeApprove` since the race condition\\n     *      in safeApprove does not apply when going to an infinite approval\\n     * @param self Token to grant approval\\n     * @param grantee Address to allow spending\\n     */\\n    function approve(Token18 self, address grantee) internal {\\n        IERC20(Token18.unwrap(self)).approve(grantee, type(uint256).max);\\n    }\\n\\n    /**\\n     * @notice Approves `grantee` to spend `amount` tokens from the caller\\n     * @dev There are important race conditions to be aware of when using this function\\n            with values other than 0. This will revert if moving from non-zero to non-zero amounts\\n            See https://github.com/OpenZeppelin/openzeppelin-contracts/blob/a55b7d13722e7ce850b626da2313f3e66ca1d101/contracts/token/ERC20/IERC20.sol#L57\\n     * @param self Token to grant approval\\n     * @param grantee Address to allow spending\\n     * @param amount Amount of tokens to approve to spend\\n     */\\n    function approve(Token18 self, address grantee, UFixed18 amount) internal {\\n        IERC20(Token18.unwrap(self)).safeApprove(grantee, UFixed18.unwrap(amount));\\n    }\\n\\n    /**\\n     * @notice Transfers all held tokens from the caller to the `recipient`\\n     * @param self Token to transfer\\n     * @param recipient Address to receive the tokens\\n     */\\n    function push(Token18 self, address recipient) internal {\\n        push(self, recipient, balanceOf(self, address(this)));\\n    }\\n\\n    /**\\n     * @notice Transfers `amount` tokens from the caller to the `recipient`\\n     * @param self Token to transfer\\n     * @param recipient Address to transfer tokens to\\n     * @param amount Amount of tokens to transfer\\n     */\\n    function push(Token18 self, address recipient, UFixed18 amount) internal {\\n        IERC20(Token18.unwrap(self)).safeTransfer(recipient, UFixed18.unwrap(amount));\\n    }\\n\\n    /**\\n     * @notice Transfers `amount` tokens from the `benefactor` to the caller\\n     * @dev Reverts if trying to pull Ether\\n     * @param self Token to transfer\\n     * @param benefactor Address to transfer tokens from\\n     * @param amount Amount of tokens to transfer\\n     */\\n    function pull(Token18 self, address benefactor, UFixed18 amount) internal {\\n        IERC20(Token18.unwrap(self)).safeTransferFrom(benefactor, address(this), UFixed18.unwrap(amount));\\n    }\\n\\n    /**\\n     * @notice Transfers `amount` tokens from the `benefactor` to `recipient`\\n     * @dev Reverts if trying to pull Ether\\n     * @param self Token to transfer\\n     * @param benefactor Address to transfer tokens from\\n     * @param recipient Address to transfer tokens to\\n     * @param amount Amount of tokens to transfer\\n     */\\n    function pullTo(Token18 self, address benefactor, address recipient, UFixed18 amount) internal {\\n        IERC20(Token18.unwrap(self)).safeTransferFrom(benefactor, recipient, UFixed18.unwrap(amount));\\n    }\\n\\n    /**\\n     * @notice Returns the name of the token\\n     * @param self Token to check for\\n     * @return Token name\\n     */\\n    function name(Token18 self) internal view returns (string memory) {\\n        return IERC20Metadata(Token18.unwrap(self)).name();\\n    }\\n\\n    /**\\n     * @notice Returns the symbol of the token\\n     * @param self Token to check for\\n     * @return Token symbol\\n     */\\n    function symbol(Token18 self) internal view returns (string memory) {\\n        return IERC20Metadata(Token18.unwrap(self)).symbol();\\n    }\\n\\n    /**\\n     * @notice Returns the `self` token balance of the caller\\n     * @param self Token to check for\\n     * @return Token balance of the caller\\n     */\\n    function balanceOf(Token18 self) internal view returns (UFixed18) {\\n        return balanceOf(self, address(this));\\n    }\\n\\n    /**\\n     * @notice Returns the `self` token balance of `account`\\n     * @param self Token to check for\\n     * @param account Account to check\\n     * @return Token balance of the account\\n     */\\n    function balanceOf(Token18 self, address account) internal view returns (UFixed18) {\\n        return UFixed18.wrap(IERC20(Token18.unwrap(self)).balanceOf(account));\\n    }\\n\\n    /**\\n     * @notice Returns the `self` total supply\\n     * @param self Token to check for\\n     * @return The total supply of the token\\n     */\\n    function totalSupply(Token18 self) internal view returns (UFixed18) {\\n        return UFixed18.wrap(IERC20(Token18.unwrap(self)).totalSupply());\\n    }\\n}\\n\\nlibrary Token18StorageLib {\\n    function read(Token18Storage self) internal view returns (Token18 value) {\\n        assembly (\\\"memory-safe\\\") {\\n            value := sload(self)\\n        }\\n    }\\n\\n    function store(Token18Storage self, Token18 value) internal {\\n        assembly (\\\"memory-safe\\\") {\\n            sstore(self, value)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf8598d9147d6bbf219d30a8bc3ea0a272170761e2a5368cd09df28e9c478c637\",\"license\":\"Apache-2.0\"},\"@equilibria/root/token/types/Token6.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport \\\"../../number/types/UFixed6.sol\\\";\\n\\n/// @dev Token6\\ntype Token6 is address;\\nusing Token6Lib for Token6 global;\\ntype Token6Storage is bytes32;\\nusing Token6StorageLib for Token6Storage global;\\n\\n/**\\n * @title Token6Lib\\n * @notice Library to manage 6-decimal ERC20s that is compliant with the fixed-decimal types.\\n */\\nlibrary Token6Lib {\\n    using SafeERC20 for IERC20;\\n\\n    Token6 public constant ZERO = Token6.wrap(address(0));\\n\\n    /**\\n     * @notice Returns whether a token is the zero address\\n     * @param self Token to check for\\n     * @return Whether the token is the zero address\\n     */\\n    function isZero(Token6 self) internal pure returns (bool) {\\n        return Token6.unwrap(self) == Token6.unwrap(ZERO);\\n    }\\n\\n    /**\\n     * @notice Returns whether the two tokens are equal\\n     * @param a First token to compare\\n     * @param b Second token to compare\\n     * @return Whether the two tokens are equal\\n     */\\n    function eq(Token6 a, Token6 b) internal pure returns (bool) {\\n        return Token6.unwrap(a) ==  Token6.unwrap(b);\\n    }\\n\\n    /**\\n     * @notice Approves `grantee` to spend infinite tokens from the caller\\n     * @dev Uses `approve` rather than `safeApprove` since the race condition\\n     *      in safeApprove does not apply when going to an infinite approval\\n     * @param self Token to grant approval\\n     * @param self Token to grant approval\\n     * @param grantee Address to allow spending\\n     */\\n    function approve(Token6 self, address grantee) internal {\\n        IERC20(Token6.unwrap(self)).approve(grantee, type(uint256).max);\\n    }\\n\\n    /**\\n     * @notice Approves `grantee` to spend `amount` tokens from the caller\\n     * @dev There are important race conditions to be aware of when using this function\\n            with values other than 0. This will revert if moving from non-zero to non-zero amounts\\n            See https://github.com/OpenZeppelin/openzeppelin-contracts/blob/a55b7d13722e7ce850b626da2313f3e66ca1d101/contracts/token/ERC20/IERC20.sol#L57\\n     * @param self Token to grant approval\\n     * @param self Token to grant approval\\n     * @param grantee Address to allow spending\\n     * @param amount Amount of tokens to approve to spend\\n     */\\n    function approve(Token6 self, address grantee, UFixed6 amount) internal {\\n        IERC20(Token6.unwrap(self)).safeApprove(grantee, UFixed6.unwrap(amount));\\n    }\\n\\n    /**\\n     * @notice Transfers all held tokens from the caller to the `recipient`\\n     * @param self Token to transfer\\n     * @param recipient Address to receive the tokens\\n     */\\n    function push(Token6 self, address recipient) internal {\\n        push(self, recipient, balanceOf(self, address(this)));\\n    }\\n\\n    /**\\n     * @notice Transfers `amount` tokens from the caller to the `recipient`\\n     * @param self Token to transfer\\n     * @param recipient Address to transfer tokens to\\n     * @param amount Amount of tokens to transfer\\n     */\\n    function push(Token6 self, address recipient, UFixed6 amount) internal {\\n        IERC20(Token6.unwrap(self)).safeTransfer(recipient, UFixed6.unwrap(amount));\\n    }\\n\\n    /**\\n     * @notice Transfers `amount` tokens from the `benefactor` to the caller\\n     * @dev Reverts if trying to pull Ether\\n     * @param self Token to transfer\\n     * @param benefactor Address to transfer tokens from\\n     * @param amount Amount of tokens to transfer\\n     */\\n    function pull(Token6 self, address benefactor, UFixed6 amount) internal {\\n        IERC20(Token6.unwrap(self)).safeTransferFrom(benefactor, address(this), UFixed6.unwrap(amount));\\n    }\\n\\n    /**\\n     * @notice Transfers `amount` tokens from the `benefactor` to `recipient`\\n     * @dev Reverts if trying to pull Ether\\n     * @param self Token to transfer\\n     * @param benefactor Address to transfer tokens from\\n     * @param recipient Address to transfer tokens to\\n     * @param amount Amount of tokens to transfer\\n     */\\n    function pullTo(Token6 self, address benefactor, address recipient, UFixed6 amount) internal {\\n        IERC20(Token6.unwrap(self)).safeTransferFrom(benefactor, recipient, UFixed6.unwrap(amount));\\n    }\\n\\n    /**\\n     * @notice Returns the name of the token\\n     * @param self Token to check for\\n     * @return Token name\\n     */\\n    function name(Token6 self) internal view returns (string memory) {\\n        return IERC20Metadata(Token6.unwrap(self)).name();\\n    }\\n\\n    /**\\n     * @notice Returns the symbol of the token\\n     * @param self Token to check for\\n     * @return Token symbol\\n     */\\n    function symbol(Token6 self) internal view returns (string memory) {\\n        return IERC20Metadata(Token6.unwrap(self)).symbol();\\n    }\\n\\n    /**\\n     * @notice Returns the `self` token balance of the caller\\n     * @param self Token to check for\\n     * @return Token balance of the caller\\n     */\\n    function balanceOf(Token6 self) internal view returns (UFixed6) {\\n        return balanceOf(self, address(this));\\n    }\\n\\n    /**\\n     * @notice Returns the `self` token balance of `account`\\n     * @param self Token to check for\\n     * @param account Account to check\\n     * @return Token balance of the account\\n     */\\n    function balanceOf(Token6 self, address account) internal view returns (UFixed6) {\\n        return UFixed6.wrap(IERC20(Token6.unwrap(self)).balanceOf(account));\\n    }\\n\\n    /**\\n     * @notice Returns the `self` total supply\\n     * @param self Token to check for\\n     * @return The total supply of the token\\n     */\\n    function totalSupply(Token6 self) internal view returns (UFixed6) {\\n        return UFixed6.wrap(IERC20(Token6.unwrap(self)).totalSupply());\\n    }\\n}\\n\\nlibrary Token6StorageLib {\\n    function read(Token6Storage self) internal view returns (Token6 value) {\\n        assembly (\\\"memory-safe\\\") {\\n            value := sload(self)\\n        }\\n    }\\n\\n    function store(Token6Storage self, Token6 value) internal {\\n        assembly (\\\"memory-safe\\\") {\\n            sstore(self, value)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x630056608dea38c12df30e36a9db4ed8b572c543c3c59df31ce57c120ff04479\",\"license\":\"Apache-2.0\"},\"@equilibria/root/utilization/CurveMath6.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.13;\\n\\nimport \\\"../number/types/UFixed6.sol\\\";\\nimport \\\"../number/types/Fixed6.sol\\\";\\n\\n/**\\n * @title CurveMath6\\n * @notice Library for managing math operations for utilization curves.\\n */\\nlibrary CurveMath6 {\\n    error CurveMath6OutOfBoundsError();\\n\\n    /**\\n     * @notice Computes a linear interpolation between two points\\n     * @param startX First point's x-coordinate\\n     * @param startY First point's y-coordinate\\n     * @param endX Second point's x-coordinate\\n     * @param endY Second point's y-coordinate\\n     * @param targetX x-coordinate to interpolate\\n     * @return y-coordinate for `targetX` along the line from (`startX`, `startY`) -> (`endX`, `endY`)\\n     */\\n    function linearInterpolation(\\n        UFixed6 startX,\\n        Fixed6 startY,\\n        UFixed6 endX,\\n        Fixed6 endY,\\n        UFixed6 targetX\\n    ) internal pure returns (Fixed6) {\\n        if (targetX.lt(startX) || targetX.gt(endX)) revert CurveMath6OutOfBoundsError();\\n\\n        UFixed6 xRange = endX.sub(startX);\\n        Fixed6 yRange = endY.sub(startY);\\n        UFixed6 xRatio = targetX.sub(startX).div(xRange);\\n        return yRange.mul(Fixed6Lib.from(xRatio)).add(startY);\\n    }\\n\\n    /**\\n     * @notice Computes a linear interpolation between two points\\n     * @param startX First point's x-coordinate\\n     * @param startY First point's y-coordinate\\n     * @param endX Second point's x-coordinate\\n     * @param endY Second point's y-coordinate\\n     * @param targetX x-coordinate to interpolate\\n     * @return y-coordinate for `targetX` along the line from (`startX`, `startY`) -> (`endX`, `endY`)\\n     */\\n    function linearInterpolation(\\n        UFixed6 startX,\\n        UFixed6 startY,\\n        UFixed6 endX,\\n        UFixed6 endY,\\n        UFixed6 targetX\\n    ) internal pure returns (UFixed6) {\\n        return UFixed6Lib.from(linearInterpolation(startX, Fixed6Lib.from(startY), endX, Fixed6Lib.from(endY), targetX));\\n    }\\n}\\n\",\"keccak256\":\"0xb2fc0e4473772b0a48f7282ac06bf1e86cea7cf0c788e406692e2d723633d549\",\"license\":\"Apache-2.0\"},\"@equilibria/root/utilization/types/UJumpRateUtilizationCurve6.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.13;\\n\\nimport \\\"../CurveMath6.sol\\\";\\nimport \\\"../../number/types/UFixed6.sol\\\";\\n\\n/// @dev UJumpRateUtilizationCurve6 type\\nstruct UJumpRateUtilizationCurve6 {\\n    UFixed6 minRate;\\n    UFixed6 maxRate;\\n    UFixed6 targetRate;\\n    UFixed6 targetUtilization;\\n}\\nusing UJumpRateUtilizationCurve6Lib for UJumpRateUtilizationCurve6 global;\\n\\n/**\\n * @title UJumpRateUtilizationCurve6Lib\\n * @notice Library for the unsigned base-6 Jump Rate utilization curve type\\n */\\nlibrary UJumpRateUtilizationCurve6Lib {\\n    /**\\n     * @notice Computes the corresponding rate for a utilization ratio\\n     * @param utilization The utilization ratio\\n     * @return The corresponding rate\\n     */\\n    function compute(UJumpRateUtilizationCurve6 memory self, UFixed6 utilization) internal pure returns (UFixed6) {\\n        if (utilization.lt(self.targetUtilization)) {\\n            return CurveMath6.linearInterpolation(\\n                UFixed6Lib.ZERO,\\n                self.minRate,\\n                self.targetUtilization,\\n                self.targetRate,\\n                utilization\\n            );\\n        }\\n        if (utilization.lt(UFixed6Lib.ONE)) {\\n            return CurveMath6.linearInterpolation(\\n                self.targetUtilization,\\n                self.targetRate,\\n                UFixed6Lib.ONE,\\n                self.maxRate,\\n                utilization\\n            );\\n        }\\n        return self.maxRate;\\n    }\\n\\n    function accumulate(\\n        UJumpRateUtilizationCurve6 memory self,\\n        UFixed6 utilization,\\n        uint256 fromTimestamp,\\n        uint256 toTimestamp,\\n        UFixed6 notional\\n    ) internal pure returns (UFixed6) {\\n        return compute(self, utilization)\\n            .mul(UFixed6Lib.from(toTimestamp - fromTimestamp))\\n            .mul(notional)\\n            .div(UFixed6Lib.from(365 days));\\n    }\\n}\\n\",\"keccak256\":\"0xfc568a2f1a98e3659a2f4142f916e057fe6bf1ac70feb04ced81072d742c22e7\",\"license\":\"Apache-2.0\"},\"@equilibria/root/verifier/types/Common.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.13;\\n\\n/// @notice Fields which need to be hashed in any EIP712 action\\nstruct Common {\\n    /// @dev The target account of the message (usually the account on behalf of which the action is being performed)\\n    address account;\\n    /// @dev EOA signing the message (usually either the account or a delegate of the account)\\n    address signer;\\n    /// @dev ensures the message is unique to a particular protocol version, chain, and verifier\\n    address domain;\\n    /// @dev per-sender nonce which is automatically cancelled upon validation\\n    uint256 nonce;\\n    /// @dev per-sender nonce which must be manually cancelled with a GroupCancellation message\\n    uint256 group;\\n    /// @dev prevents this message from having the intended effect after a specified timestamp\\n    uint256 expiry;\\n}\\nusing CommonLib for Common global;\\n\\n/// @title CommonLib\\n/// @notice Library collecting fields which need to be hashed in any EIP712 message\\nlibrary CommonLib {\\n    /// @dev used to verify a signed message\\n    bytes32 constant public STRUCT_HASH =\\n        keccak256(\\\"Common(address account,address signer,address domain,uint256 nonce,uint256 group,uint256 expiry)\\\");\\n\\n    /// @dev used to create a signed message\\n    function hash(Common memory self) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(STRUCT_HASH, self.account, self.signer, self.domain, self.nonce, self.group, self.expiry));\\n    }\\n}\\n\",\"keccak256\":\"0x0f5a75ca2064a624dae4e7f6c6b494dcc8ec560e5775ec8055dd91471f6cb93b\",\"license\":\"Apache-2.0\"},\"@openzeppelin/contracts/proxy/beacon/IBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0xd50a3421ac379ccb1be435fa646d66a65c986b4924f0849839f08692f39dde61\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9b72f93be69ca894d8492c244259615c4a742afc8d63720dbc8bb81087d9b238\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x61018034620002405762004b6738819003601f8101601f191683016001600160401b038111848210176200024457839282916040528339610100928391810103126200024057620000508162000258565b6200005e6020830162000258565b916200006d6040820162000258565b6200007b6060830162000258565b60808301516001600160a01b03959092908684168403620002405760a08501519687168703620002405760e060c08601519501519560805260a05260c05260e0528452610120928352610140908152610160918252604051926148f994856200026e863960805185818161050f0152818161076301528181612e5f01528181613e33015281816142970152614348015260a051858181610418015281816106f50152818161145b015281816115a601528181611b2501528181611c0e01528181612c1e01528181612d980152818161306001528181613587015281816136fa015281816137210152818161386101528181613d8c01528181613f790152613fb8015260c0518581816109c00152818161141c0152818161188001528181611dce01528181612bdf0152818161381a0152613a02015260e0518581816102a201528181611ae301526138b00152518481816104bd01528181610a2c01528181612e9a01528181612f7501528181612fd70152818161303e01528181613e6f01526141e001525183818161034b015281816104e601528181612ede01528181613ea001526142120152518281816101e6015261256901525181818161018e01526125950152f35b5f80fd5b634e487b7160e01b5f52604160045260245ffd5b51906001600160a01b0382168203620002405756fe6080604081815260049182361015610015575f80fd5b5f3560e01c908163025a3a29146109e45750806306ae7095146109765780632637588e146108fa57806332878cc9146108895780636d44a3b2146107c057806378fab5c71461078757806389a3027114610719578063a2060bcf146106ab578063aba30dfa14610672578063b20caf4514610601578063bdec4a27146105ae578063c4d66de81461036f578063cd3293de14610301578063cf542a4d146102c6578063d8a06f7314610258578063dd02df161461022d578063df80522a14610209578063f331efef146101b1578063f3a8f356146101595763f5ad7126146100fb575f80fd5b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101555761012b610a50565b60243567ffffffffffffffff8111610155576101539261014d91369101610a73565b91611143565b005b5f80fd5b5034610155575f7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261015557602090517f00000000000000000000000000000000000000000000000000000000000000008152f35b5034610155575f7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261015557602090517f00000000000000000000000000000000000000000000000000000000000000008152f35b50346101555760209061022461021e36610aa4565b91610edd565b90519015158152f35b5034610155576102549061024961024336610aa4565b91610d13565b905191829182610b04565b0390f35b5034610155575f7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610155576020905173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b5034610155575f7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610155576020905f549051908152f35b5034610155575f7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610155576020905173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b50346101555760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101555781359173ffffffffffffffffffffffffffffffffffffffff808416809403610155577f6fee9688c285c5c5c97d6a1a29adced674e6b2ad0888b8ad2116b58a8b3ea24860028154101561057e57600290557f2801b00eb06461cf9fcb9758b5fafd884ff06a86177386f73b6c49f0bf5a5af093600185557f000000000000000000000000000000000000000000000000000000000000000092303b151580610577575b610550577fbe9b076dc5b65990cca9dd9d7366682482e7817a6f6bc7f4faf4dc32af497f326020865f896105338961050d8a8a7f2b50211693ec91bcfe327771928b74a8f475c508d53e86fca4153bcf0f0e877655827f5b5cbfa852c5bd03e540eba853f8faf28a604a4d82bee1091096bfaea14d08c355807f0000000000000000000000000000000000000000000000000000000000000000168061053c575b507f0000000000000000000000000000000000000000000000000000000000000000168092613ba2565b7f0000000000000000000000000000000000000000000000000000000000000000613ba2565b555160028152a1005b8061050d61054a9286613ba2565b896104e3565b84517fb9a621e1000000000000000000000000000000000000000000000000000000008152fd5b505f610442565b60248360028651917f3db738da000000000000000000000000000000000000000000000000000000008352820152fd5b8260207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261015557803567ffffffffffffffff811161015557610153916105fa91369101610a73565b9033611143565b5034610155575f7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101555760209073ffffffffffffffffffffffffffffffffffffffff7f2b50211693ec91bcfe327771928b74a8f475c508d53e86fca4153bcf0f0e877654169051908152f35b5034610155575f7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101555760209051608c8152f35b5034610155575f7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610155576020905173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b5034610155575f7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610155576020905173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b5034610155575f7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610155576020905160108152f35b503461015557807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610155576107f7610a50565b906024359081151580920361015557335f52600260205273ffffffffffffffffffffffffffffffffffffffff815f20931692835f52602052805f207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0081541660ff8416179055519081527f2738289d9deecdc30eb8ffc42876633caecca1ffa166e4efa89f408e17373a1a60203392a3005b5034610155575f7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101555760209073ffffffffffffffffffffffffffffffffffffffff7f5b5cbfa852c5bd03e540eba853f8faf28a604a4d82bee1091096bfaea14d08c354915191168152f35b503461015557807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261015557610931610a50565b9060243573ffffffffffffffffffffffffffffffffffffffff80821680920361015557602093165f5260028352815f20905f52825260ff815f20541690519015158152f35b5034610155575f7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610155576020905173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b34610155575f7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101555760209073ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b6004359073ffffffffffffffffffffffffffffffffffffffff8216820361015557565b9181601f840112156101555782359167ffffffffffffffff8311610155576020808501948460051b01011161015557565b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc60609101126101555773ffffffffffffffffffffffffffffffffffffffff90600435828116810361015557916024359081168103610155579060443590565b610bbb9092919261010060c061016083019560ff815116845260208101515f0b6020850152604081015160408501526060810151606085015260808101516080850152610b8560a082015160a0860190604080918051845273ffffffffffffffffffffffffffffffffffffffff602082015116602085015201511515910152565b0151910190604080918051845273ffffffffffffffffffffffffffffffffffffffff602082015116602085015201511515910152565b565b6060810190811067ffffffffffffffff821117610bd957604052565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b60e0810190811067ffffffffffffffff821117610bd957604052565b6101c0810190811067ffffffffffffffff821117610bd957604052565b67ffffffffffffffff8111610bd957604052565b6080810190811067ffffffffffffffff821117610bd957604052565b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff821117610bd957604052565b60405190610cbd82610bbd565b5f6040838281528260208201520152565b60405190610cdb82610c06565b815f81525f60208201525f60408201525f60608201525f6080820152610cff610cb0565b60a082015260c0610d0e610cb0565b910152565b90610e7b90610d20610cce565b5073ffffffffffffffffffffffffffffffffffffffff8093165f526020936001855260409184835f2091165f528552815f20905f528452805f20610d62610cce565b50815193610d6f85610c22565b81549260ff8416968787528460081c5f0b9081818901528767ffffffffffffffff8760101c169485858301528760501c60070b968760608401527fffffffffffff00000000000000000000000000000000000000000000000000008960901c60070b998a60808601521660a08401526001810154828116918260c086015265ffffffffffff92838360a01c168060e0880152610140600260ff8660d01c16151594856101008b01527fffffffffff0000000000000000000000000000000000000000000000000000008097166101208b0152015497019e8f87891690526101a0610160820195878a60a01c16875261018083019960ff8160d01c1615158b521691015289519d8e610bbd565b8d52868d0152878c015251169951169051151590845199610e9b8b610bbd565b8a52828a015283890152825198610eb18a610c06565b89528801528601526060850152608084015260a083015260c082015290565b5190811515820361015557565b9181610ee99293610d13565b60409081810151156110435773ffffffffffffffffffffffffffffffffffffffff80938351907f7dc0d1d0000000000000000000000000000000000000000000000000000000008252816004816020958694165afa8015611039575f90611002575b6060915060048551809781937f52bfe789000000000000000000000000000000000000000000000000000000008352165afa928315610ff9575f93610f9a575b5050610f979250613c5c565b90565b909192506060843d606011610ff1575b81610fb760609383610c6f565b8101031261015557610fe581610f9795815194610fd386610bbd565b81518652808201519086015201610ed0565b90820152905f80610f8b565b3d9150610faa565b513d5f823e3d90fd5b508181813d8311611032575b6110188183610c6f565b810103126101555751848116810361015557606090610f4b565b503d61100e565b84513d5f823e3d90fd5b5050505f90565b67ffffffffffffffff8111610bd957601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01660200190565b519073ffffffffffffffffffffffffffffffffffffffff8216820361015557565b5f5b8381106110b65750505f910152565b81810151838201526020016110a7565b81601f820112156101555780516110dc8161104a565b926110ea6040519485610c6f565b8184526020828401011161015557610f9791602080850191016110a5565b91908260609103126101555760405161112081610bbd565b6040610d0e8183958051855261113860208201611084565b602086015201610ed0565b919073ffffffffffffffffffffffffffffffffffffffff831633141580613b6b575b613b41575f5b82811061127857505050504780471061121a575f80808093335af161118e613d35565b501561119657565b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d617920686176652072657665727465640000000000006064820152fd5b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e63650000006044820152fd5b600581811b8301357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc18436030181121561015557830160408136031261015557604051906040820182811067ffffffffffffffff821117610bd957604052600b9080358281101561015557835260208101359067ffffffffffffffff821161015557019136601f840112156101555782356113128161104a565b936113206040519586610c6f565b818552366020838301011161015557815f926020809301838801378501015260208101928352805182811015613b14576001036116a3575050905051908151820161018083602083019203126101555761137c60208401611084565b9260408101519360608201519460808301519260a0810151916113bc6113a460c08401610ed0565b966101406113b58260e08701611108565b9401611108565b946040517f032bb44300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8616600482015260208160248173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000165afa908115611614575f91611669575b501561163f5761148461147f307f0000000000000000000000000000000000000000000000000000000000000000614378565b613fdc565b938c88600161149284614036565b14611625575b5050602084015173ffffffffffffffffffffffffffffffffffffffff168061161f575073ffffffffffffffffffffffffffffffffffffffff602088015116915b73ffffffffffffffffffffffffffffffffffffffff87163b156101555773ffffffffffffffffffffffffffffffffffffffff9a8b948f60046040519e8f927f977b1f5f0000000000000000000000000000000000000000000000000000000084521691015260248d015260448c015260648b015260848a01525f60a48a01521660c48801525f8760e4818373ffffffffffffffffffffffffffffffffffffffff88165af19485156116145764e8d4a510006115cf6115e09460019a6115e699611605575b506115ca61147f307f0000000000000000000000000000000000000000000000000000000000000000614378565b614071565b0590816115ec575b5050828a614089565b87614089565b0161116b565b6115f86115fe92614594565b8c613d64565b5f806115d7565b61160e90610c3f565b5f61159c565b6040513d5f823e3d90fd5b916114d8565b6116389161163284614594565b90613e21565b8c88611498565b60046040517f47b7c1b0000000000000000000000000000000000000000000000000000000008152fd5b90506020813d60201161169b575b8161168460209383610c6f565b810103126101555761169590610ed0565b5f61144c565b3d9150611677565b805182811015613b1457600903611a1e57505051805181019291506101c081840312610155576116d560208201611084565b926101807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08383030112610155576040519161171083610c06565b60408101518352606081015160208401526080810151604084015261173760a08201611084565b606084015261174860c08201611084565b608084015260e081015160a084015260c07fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff2082840301126101555760405160c0810181811067ffffffffffffffff821117610bd9576040526117ad6101008301611084565b81526117bc6101208301611084565b60208201526117ce6101408301611084565b6040820152610160820151606082015261018082015160808201526101a082015160a082015260c08401526101c08101519167ffffffffffffffff8311610155576118209260208092019201016110c6565b906040517f032bb44300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8516600482015260208160248173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000165afa908115611614575f916119e4575b501561163f5773ffffffffffffffffffffffffffffffffffffffff84163b156101555760c09373ffffffffffffffffffffffffffffffffffffffff5f818a6119bb839760a06040519b8c998a9889967f736a01df0000000000000000000000000000000000000000000000000000000088521660048701528051602487015260208101516044870152604081015160648701528660608201511660848701528660808201511660a48701528281015160c487015201518581511660e486015285602082015116610104860152856040820151166101248601526060810151610144860152608081015161016486015201516101848401526101c06101a48401526101c4830190613cf2565b0393165af1918215611614576001926119d5575b506115e6565b6119de90610c3f565b5f6119cf565b90506020813d602011611a16575b816119ff60209383610c6f565b8101031261015557611a1090610ed0565b5f6118b0565b3d91506119f2565b805182811015613b1457600203611c975750509050519081805160a0918291810103126101555760208301519073ffffffffffffffffffffffffffffffffffffffff8216820361015557604084015193611a8360608201519260808301519201610ed0565b926040517f032bb44300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8216600482015260208160248173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000165afa908115611614575f91611c5d575b501561163f5785611c4d575b611b49307f0000000000000000000000000000000000000000000000000000000000000000614378565b9273ffffffffffffffffffffffffffffffffffffffff82163b156101555760848a5f73ffffffffffffffffffffffffffffffffffffffff819581956040519c8d9788967fd2c3aaf200000000000000000000000000000000000000000000000000000000885216600487015260248601526044850152876064850152165af194851561161457600195611c3e575b50611bfe57505f905b81611bed575b50506115e6565b611bf79187613d64565b5f80611be6565b611c3764e8d4a5100091611c32307f0000000000000000000000000000000000000000000000000000000000000000614378565b613db0565b0490611be0565b611c4790610c3f565b5f611bd7565b611c5884878b613e21565b611b1f565b90506020813d602011611c8f575b81611c7860209383610c6f565b8101031261015557611c8990610ed0565b5f611b13565b3d9150611c6b565b805182811015613b14576003036123f857505090505180518101818103906101808212610155576101607fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0611cee60208601611084565b9301126101555760405192611d0284610c06565b604081015160ff81168103610155578452606081015191825f0b830361015557602061014091611d6a94828801526080840151604088015260a0840151606088015260c08401516080880152611d5d82820160e08601611108565b60a0880152019101611108565b60c08301526040517f032bb44300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8216600482015260208160248173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000165afa908115611614575f916123be575b501561163f5760408201511561234c5760208201515f0b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81141590816123b2575b5061234c5760ff82511660038111908115612376575b5061234c5773ffffffffffffffffffffffffffffffffffffffff86165f52600160205260405f2073ffffffffffffffffffffffffffffffffffffffff82165f5260205260405f205f547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff811461231f57600101805f555f5260205260405f2060ff80845116116122f557607f60208401515f0b136122f5577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8060208401515f0b126122f5576002611f2a60408501516147fd565b146122f5576002611f3e60608501516146a7565b146122f557611f506060840151614651565b156122f5576002611f6460808501516146a7565b146122f557611f766080840151614651565b156122f5576002611f8b60a085015151614818565b146122f5576002611fa060c085015151614818565b146122f557825160ff166020840151604085015160608601519260808701519460a088015194602086015173ffffffffffffffffffffffffffffffffffffffff1696865165ffffffffffff16966040015115159160c08b015195602087015173ffffffffffffffffffffffffffffffffffffffff1695875165ffffffffffff16976040015115159860405161203481610c22565b828152815f0b602082015267ffffffffffffffff841660408201528460070b60608201528560070b608082015260a081015f90528c60c08201528b60e08201528661010082015261012081015f905288610140820152896101608201528a6101808201526101a0015f905260081b61ff0016179060101b69ffffffffffffffff000016179060501b71ffffffffffffffff0000000000000000000016179060901b79ffffffffffffffff0000000000000000000000000000000000001617825560018201957fffffffffffffffffffffffff000000000000000000000000000000000000000097888854161787556121729087907fffffffffffff000000000000ffffffffffffffffffffffffffffffffffffffff79ffffffffffff000000000000000000000000000000000000000083549260a01b169116179055565b85547fffffffffff00ffffffffffffffffffffffffffffffffffffffffffffffffffff1690151560d01b7aff0000000000000000000000000000000000000000000000000000161785557affffffffffffffffffffffffffffffffffffffffffffffffffffff94858154169055600201948554161784556122399084907fffffffffffff000000000000ffffffffffffffffffffffffffffffffffffffff79ffffffffffff000000000000000000000000000000000000000083549260a01b169116179055565b82547fffffffffff00ffffffffffffffffffffffffffffffffffffffffffffffffffff1690151560d01b7aff00000000000000000000000000000000000000000000000000001617825581541690555f54916040519173ffffffffffffffffffffffffffffffffffffffff16918073ffffffffffffffffffffffffffffffffffffffff8916926122c99082610b04565b037fa9dacd70712b5d6af26b24f20002f840b398fda933ddeb01bfe74d8385485f0c91a46001906115e6565b60046040517ff3469aa7000000000000000000000000000000000000000000000000000000008152fd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b60046040517fb6befb58000000000000000000000000000000000000000000000000000000008152fd5b600391501480612387575b5f611e56565b50612395608083015161468f565b600281149081156123a7575b50612381565b60019150145f6123a1565b6001915014155f611e40565b90506020813d6020116123f0575b816123d960209383610c6f565b81010312610155576123ea90610ed0565b5f611dfe565b3d91506123cc565b805182811015613b14576004036124d1575050905051906040828051810103126101555781604061242d602060019501611084565b91015173ffffffffffffffffffffffffffffffffffffffff87165f528360205273ffffffffffffffffffffffffffffffffffffffff60405f20921691825f5260205260405f20815f526020525f600260408220828155828782015501556040519081527fd23ac4476ccf3eeb78c76d4b7bb113597bcd16c15d47656627ea6221d685ad73602073ffffffffffffffffffffffffffffffffffffffff891692a36115e6565b805182811015613b1457840361348d575050905051906060828051810103126101555761250060208301611084565b606061250e60408501611084565b930151612532818573ffffffffffffffffffffffffffffffffffffffff8516610edd565b1561346357612558818573ffffffffffffffffffffffffffffffffffffffff8516610d13565b60405161256481610c53565b5f81527f000000000000000000000000000000000000000000000000000000000000000060208201525f60408201527f0000000000000000000000000000000000000000000000000000000000000000606082015260408201516040519073ffffffffffffffffffffffffffffffffffffffff8616602083015273ffffffffffffffffffffffffffffffffffffffff8816604083015260608201526060815261260c81610c53565b60405180602081011067ffffffffffffffff602083011117610bd957602081016040525f81525f60208201528251602084015190156001171561231f57612665670de0b6b3a764000091612660489161417e565b61419b565b049260606040820151910151915190608c8201821161231f577f0fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff608c830116608c83010361231f57604051917ff5d6ded7000000000000000000000000000000000000000000000000000000008352602083600481606c5afa928315611614575f93613425575b50670de0b6b3a76400009361271c856127156127229695612660608c612660970160041b61417e565b049161417e565b9061445e565b049061272e828461445e565b600460a073ffffffffffffffffffffffffffffffffffffffff7f2b50211693ec91bcfe327771928b74a8f475c508d53e86fca4153bcf0f0e87765416604051928380927ffeaf968c0000000000000000000000000000000000000000000000000000000082525afa908115611614575f916133d8575b50670de0b6b3a7640000810290808205670de0b6b3a7640000149015171561231f575f6305f5e1008205126133a157670de0b6b3a7640000916305f5e1006127ed92059061419b565b046060828051810103126101555761280760208301611084565b90606061281660408501611084565b930151908061333a575073ffffffffffffffffffffffffffffffffffffffff9161285a93612855925f905b8082101561333057509384925b16906145a3565b6141ae565b9061288782337f5b5cbfa852c5bd03e540eba853f8faf28a604a4d82bee1091096bfaea14d08c354613dbd565b604051925f84525f60208501526040840152606083015260808201527ffa0333956d06e335c550bd5fc4ac9c003c6545e371331b1071fa4d5d8519d6c160a03392a273ffffffffffffffffffffffffffffffffffffffff85163b15610155576040517f6a256b2900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff841660048201525f816024818373ffffffffffffffffffffffffffffffffffffffff8b165af1801561161457613321575b506040517f6e19368000000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff841660048201526101808160248173ffffffffffffffffffffffffffffffffffffffff8a165afa908115611614575f91613250575b50604051917f55f5751000000000000000000000000000000000000000000000000000000000835273ffffffffffffffffffffffffffffffffffffffff8516600484015260808360248173ffffffffffffffffffffffffffffffffffffffff8b165afa928315611614575f936131ef575b5081518352612a466020840151614482565b612a69612a566060850151614482565b612a636080860151614482565b90614071565b905f828201928312911290801582169115161761231f57612a89906144dd565b91612a976040850151614482565b612ab4612aa760a0840151614482565b612a6360c0850151614482565b905f828201928312911290801582169115161761231f57612ad4906144dd565b90612b01612ae56060870151614482565b91612a63610100612af960e0840151614482565b920151614482565b80808301125f831290801582169115161761231f57612b2091016144dd565b606085015260408401528160208401525f9160ff825116156131a3575b50600160ff82511614613159575b600260ff8251161461310f575b600360ff825116146130ca575b6020830151606060408501519401519360c060a0840151930151946040517f032bb44300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8b16600482015260208160248173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000165afa908115611614575f91613090575b501561163f57612c4261147f307f0000000000000000000000000000000000000000000000000000000000000000614378565b946001612c4e82614036565b14612e36575b602085015173ffffffffffffffffffffffffffffffffffffffff1680612e30575073ffffffffffffffffffffffffffffffffffffffff602088015116915b73ffffffffffffffffffffffffffffffffffffffff8c163b156101555773ffffffffffffffffffffffffffffffffffffffff93604051957f977b1f5f000000000000000000000000000000000000000000000000000000008752858c16600488015260248701526044860152606485015260848401525f60a48401521660c48201525f8160e4818373ffffffffffffffffffffffffffffffffffffffff8d165af197881561161457612dd67f889f0643d669fbac53cbc7d1826992b9bce1fab5e9644034cffb9c0137fe9dd195612dcd73ffffffffffffffffffffffffffffffffffffffff9564e8d4a51000612dbc60209960019f988a9961160557506115ca61147f307f0000000000000000000000000000000000000000000000000000000000000000614378565b0580612e13575b5084868c16614089565b82848a16614089565b8187165f5288845260405f208282165f52845260405f20865f5284525f600260408220828155828c820155015560405195865216941692a36115e6565b612e22612855612e2a92614594565b878d166141c8565b5f612dc3565b91612c92565b612e83612e4282614594565b6128558173ffffffffffffffffffffffffffffffffffffffff8d167f0000000000000000000000000000000000000000000000000000000000000000614518565b73ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001615801561301e575b15612f5e5773ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001690813b15610155575f916024839260405194859384927fa0712d6800000000000000000000000000000000000000000000000000000000845260048401525af1801561161457612f4f575b50612c54565b612f5890610c3f565b5f612f49565b73ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000163b15610155576040517f13bac82000000000000000000000000000000000000000000000000000000000815260048101919091523060248201525f81604481837f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff165af1801561161457612f4f5750612c54565b50600261308a61308473ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000167f0000000000000000000000000000000000000000000000000000000000000000614378565b83614831565b14612ec2565b90506020813d6020116130c2575b816130ab60209383610c6f565b81010312610155576130bc90610ed0565b5f612c0f565b3d915061309e565b9050608081015160016130dc82614651565b0361310a57507f80000000000000000000000000000000000000000000000000000000000000005b90612b65565b613104565b60808101805161312657505f5b6060840152612b58565b6131336060850151614482565b905180808301125f831290801582169115161761231f5761315491016144dd565b61311c565b60808101805161317057505f5b6040840152612b4b565b61317d6040850151614482565b905180808301125f831290801582169115161761231f5761319e91016144dd565b613166565b60808201908151155f146131c05750505f5b60208401525f612b3d565b6131c990614482565b905180808301125f831290801582169115161761231f576131ea91016144dd565b6131b5565b9092506080813d608011613248575b8161320b60809383610c6f565b810103126101555760606040519161322283610c53565b80518352602081015160208401526040810151604084015201516060820152915f612a34565b3d91506131fe565b9050610180813d61018011613319575b8161326e6101809383610c6f565b8101031261015557604051908161018081011067ffffffffffffffff61018084011117610bd9576101808201604052805182526020810151602083015260408101516040830152606081015160608301526080810151608083015260a081015160a083015260c0808201519083015260e0808201519083015261010080820151908301526101208082015190830152610140808201519083015261016080910151908201525f6129c3565b3d9150613260565b61332a90610c3f565b5f612952565b905093849261284e565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff819392930190811161231f5764e8d4a5100090049060018201821161231f5761285a9373ffffffffffffffffffffffffffffffffffffffff936001612855940190612841565b6024906305f5e100604051917f501f289e000000000000000000000000000000000000000000000000000000008352056004820152fd5b905060a0813d60a01161341d575b816133f360a09383610c6f565b81010312610155576134048161446b565b5061341660806020830151920161446b565b505f6127a4565b3d91506133e6565b9250906020833d60201161345b575b8161344160209383610c6f565b810103126101555791519190670de0b6b3a76400006126ec565b3d9150613434565b60046040517f6f462962000000000000000000000000000000000000000000000000000000008152fd5b805182811015613b14576006036137855750505190815182019160c081840312610155576134bd60208201611084565b9160408201519260608301519367ffffffffffffffff85116101555760208601603f86860101121561015557602085850101519267ffffffffffffffff8411610bd95783901b94604051936135156020880186610c6f565b845260208401809660208901604082858a0101011161015557604083880101915b604082858a0101018310613775575050505060808401519560a085015167ffffffffffffffff81116101555761357960c0916020806135809501918901016110c6565b9501610ed0565b946135ab307f0000000000000000000000000000000000000000000000000000000000000000614378565b9473ffffffffffffffffffffffffffffffffffffffff84163b15610155576040517f1e298b90000000000000000000000000000000000000000000000000000000008152606060048201529451606486018190528593926084850192915f905b808210613759575050509173ffffffffffffffffffffffffffffffffffffffff8461366a81945f989660249d8e8501527ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc848303016044850152613cf2565b0393165af1908161374a575b506136e65750613684613d35565b906136935750506001906115e6565b60405191602083019083821067ffffffffffffffff8311176136bb57506040525f8252614409565b7f4e487b71000000000000000000000000000000000000000000000000000000005f5260416004525ffd5b6001939250613745915061371e90611c32307f0000000000000000000000000000000000000000000000000000000000000000614378565b337f0000000000000000000000000000000000000000000000000000000000000000613dbd565b6115e6565b61375390610c3f565b5f613676565b825185528896506020948501949092019160019091019061360b565b8251815260209283019201613536565b80919293505182811015613b145760080361395d57505051602081805181010312610155576137cb602073ffffffffffffffffffffffffffffffffffffffff9201611084565b16906040517f032bb4430000000000000000000000000000000000000000000000000000000090818152836004820152602490602081838173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000165afa908115611614575f91613923575b50159182613885575b505061163f576137456001927f0000000000000000000000000000000000000000000000000000000000000000613ba2565b602091925060405192839182528560048301528173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000165afa908115611614575f916138e9575b50155f80613853565b90506020813d60201161391b575b8161390460209383610c6f565b810103126101555761391590610ed0565b5f6138e0565b3d91506138f7565b90506020813d602011613955575b8161393e60209383610c6f565b810103126101555761394f90610ed0565b5f61384a565b3d9150613931565b5190811015613b1457600a14613977575b506001906115e6565b51906040828051810103126101555761399e604061399760208501611084565b9301610ed0565b9173ffffffffffffffffffffffffffffffffffffffff604051917f032bb4430000000000000000000000000000000000000000000000000000000083521690816004820152602490602081838173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000165afa908115611614575f91613ada575b501561163f575f91602091604051809481937f6ebc51e100000000000000000000000000000000000000000000000000000000835273ffffffffffffffffffffffffffffffffffffffff8c1660048401525af1908115611614575f91613aa7575b50600192613aa19187613d64565b9061396e565b90506020813d602011613ad2575b81613ac260209383610c6f565b8101031261015557516001613a93565b3d9150613ab5565b90506020813d602011613b0c575b81613af560209383610c6f565b8101031261015557613b0690610ed0565b5f613a32565b3d9150613ae8565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602160045260245ffd5b60046040517f42ecdedb000000000000000000000000000000000000000000000000000000008152fd5b5073ffffffffffffffffffffffffffffffffffffffff83165f52600260205260405f20335f5260205260ff60405f20541615611165565b90602090604473ffffffffffffffffffffffffffffffffffffffff915f8360405196879586947f095ea7b30000000000000000000000000000000000000000000000000000000086521660048501527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6024850152165af1801561161457613c275750565b6020813d602011613c54575b81613c4060209383610c6f565b8101031261015557613c5190610ed0565b50565b3d9150613c33565b604082015115613cec5760208101515f0b60018114613cc9577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff14613ca15750505f90565b60606020613cb4930151910151906146c2565b8015908115613cc1575090565b600191501490565b5060606020613cdd930151910151906146c2565b60028114908115613cc1575090565b50505f90565b907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f602093613d2e815180928187528780880191016110a5565b0116010190565b3d15613d5f573d90613d468261104a565b91613d546040519384610c6f565b82523d5f602084013e565b606090565b909115613d7d57613d77610bbb926141ae565b906141c8565b613d89610bbb926141ae565b907f0000000000000000000000000000000000000000000000000000000000000000613dbd565b9190820391821161231f57565b91610bbb9273ffffffffffffffffffffffffffffffffffffffff9182604051947fa9059cbb000000000000000000000000000000000000000000000000000000006020870152166024850152604484015260448352613e1b83610c53565b166146d3565b909115613fa9579061285581613e57937f0000000000000000000000000000000000000000000000000000000000000000614518565b73ffffffffffffffffffffffffffffffffffffffff807f00000000000000000000000000000000000000000000000000000000000000001680158015613f6d575b15613f1657507f00000000000000000000000000000000000000000000000000000000000000001690813b15610155575f916024839260405194859384927fa0712d6800000000000000000000000000000000000000000000000000000000845260048401525af1801561161457613f0d5750565b610bbb90610c3f565b8091503b15610155576040517f13bac82000000000000000000000000000000000000000000000000000000000815260048101929092523060248301525f908290604490829084905af1801561161457613f0d5750565b506002613fa3613f9d837f0000000000000000000000000000000000000000000000000000000000000000614378565b85614831565b14613e98565b613fb5610bbb926141ae565b907f0000000000000000000000000000000000000000000000000000000000000000614518565b7f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81116140065790565b602490604051907ea07eb50000000000000000000000000000000000000000000000000000000082526004820152fd5b5f811361406b575f13614047575f90565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff90565b50600190565b81810392915f13801582851316918412161761231f57565b91908151801561417857816140c2606092867f7bdf48e07cd0f3669b6ef1a2004307c0c28e2c22d70ae7a6d8e1ea1b42690591956145a3565b60408401511561414b576140f473ffffffffffffffffffffffffffffffffffffffff602086015116613d7786516141ae565b73ffffffffffffffffffffffffffffffffffffffff80916141446040518097604080918051845273ffffffffffffffffffffffffffffffffffffffff602082015116602085015201511515910152565b16941692a3565b61417373ffffffffffffffffffffffffffffffffffffffff602086015116613d8986516141ae565b6140f4565b50505050565b90670de0b6b3a76400009182810292818404149015171561231f57565b8181029291811591840414171561231f57565b64e8d4a510009081810291818304149015171561231f5790565b73ffffffffffffffffffffffffffffffffffffffff807f00000000000000000000000000000000000000000000000000000000000000001680158015614339575b156142ca5750807f000000000000000000000000000000000000000000000000000000000000000016803b15610155575f80916024604051809481937fdb006a750000000000000000000000000000000000000000000000000000000083528960048401525af18015611614576142bb575b503090821603614289575050565b64e8d4a51000610bbb9204907f0000000000000000000000000000000000000000000000000000000000000000613dbd565b6142c490610c3f565b5f61427b565b80939291503b15610155576040517f7647691d000000000000000000000000000000000000000000000000000000008152600481019290925273ffffffffffffffffffffffffffffffffffffffff166024820152905f908290604490829084905af1801561161457613f0d5750565b50600261437261436c612855847f0000000000000000000000000000000000000000000000000000000000000000614378565b86614831565b14614209565b90602090602473ffffffffffffffffffffffffffffffffffffffff918260405195869485937f70a08231000000000000000000000000000000000000000000000000000000008552166004840152165afa908115611614575f916143da575090565b90506020813d602011614401575b816143f560209383610c6f565b81010312610155575190565b3d91506143e8565b80519091901561441c5750805190602001fd5b61445a906040519182917f08c379a0000000000000000000000000000000000000000000000000000000008352602060048401526024830190613cf2565b0390fd5b9190820180921161231f57565b519069ffffffffffffffffffff8216820361015557565b7f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81116144ac5790565b602490604051907feecaa25d0000000000000000000000000000000000000000000000000000000082526004820152fd5b5f81126144e75790565b602490604051907fb02ef0870000000000000000000000000000000000000000000000000000000082526004820152fd5b9173ffffffffffffffffffffffffffffffffffffffff9081604051937f23b872dd00000000000000000000000000000000000000000000000000000000602086015216602484015230604484015260648301526064825260a082019282841067ffffffffffffffff851117610bd957610bbb93604052166146d3565b5f811261459e5790565b5f0390565b6145c473ffffffffffffffffffffffffffffffffffffffff80921693614482565b92803b15610155575f928360c49260405196879586947f91eece280000000000000000000000000000000000000000000000000000000086521660048501527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8060248601528060448601526064850152820360848401528160a48401525af1801561161457613f0d5750565b7fffffffffffffffffffffffffffffffffffffffffffffffff800000000000000090818113614688571261468457600190565b5f90565b5050600290565b5f81136146a1575f1361468457600190565b50600290565b677fffffffffffffff90818113614688571261468457600190565b818113614688571261468457600190565b73ffffffffffffffffffffffffffffffffffffffff16604051604081019181831067ffffffffffffffff841117610bd95761474f926040525f806020958685527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c656487860152868151910182855af1614749613d35565b91614842565b80518061475b57505050565b8183918101031261015557816147719101610ed0565b156147795750565b608490604051907f08c379a00000000000000000000000000000000000000000000000000000000082526004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152fd5b67ffffffffffffffff90818111614688571061468457600190565b65ffffffffffff90818111614688571061468457600190565b818111614688571061468457600190565b919290156148bd5750815115614856575090565b3b1561485f5790565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152fd5b8261440956fea26469706673582212209e59e27313f312c535d18f691cf5f048b1b6771c2b1a23998e888d69a6327fee64736f6c63430008180033",
  "deployedBytecode": "0x6080604081815260049182361015610015575f80fd5b5f3560e01c908163025a3a29146109e45750806306ae7095146109765780632637588e146108fa57806332878cc9146108895780636d44a3b2146107c057806378fab5c71461078757806389a3027114610719578063a2060bcf146106ab578063aba30dfa14610672578063b20caf4514610601578063bdec4a27146105ae578063c4d66de81461036f578063cd3293de14610301578063cf542a4d146102c6578063d8a06f7314610258578063dd02df161461022d578063df80522a14610209578063f331efef146101b1578063f3a8f356146101595763f5ad7126146100fb575f80fd5b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101555761012b610a50565b60243567ffffffffffffffff8111610155576101539261014d91369101610a73565b91611143565b005b5f80fd5b5034610155575f7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261015557602090517f00000000000000000000000000000000000000000000000000000000000000008152f35b5034610155575f7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261015557602090517f00000000000000000000000000000000000000000000000000000000000000008152f35b50346101555760209061022461021e36610aa4565b91610edd565b90519015158152f35b5034610155576102549061024961024336610aa4565b91610d13565b905191829182610b04565b0390f35b5034610155575f7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610155576020905173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b5034610155575f7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610155576020905f549051908152f35b5034610155575f7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610155576020905173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b50346101555760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101555781359173ffffffffffffffffffffffffffffffffffffffff808416809403610155577f6fee9688c285c5c5c97d6a1a29adced674e6b2ad0888b8ad2116b58a8b3ea24860028154101561057e57600290557f2801b00eb06461cf9fcb9758b5fafd884ff06a86177386f73b6c49f0bf5a5af093600185557f000000000000000000000000000000000000000000000000000000000000000092303b151580610577575b610550577fbe9b076dc5b65990cca9dd9d7366682482e7817a6f6bc7f4faf4dc32af497f326020865f896105338961050d8a8a7f2b50211693ec91bcfe327771928b74a8f475c508d53e86fca4153bcf0f0e877655827f5b5cbfa852c5bd03e540eba853f8faf28a604a4d82bee1091096bfaea14d08c355807f0000000000000000000000000000000000000000000000000000000000000000168061053c575b507f0000000000000000000000000000000000000000000000000000000000000000168092613ba2565b7f0000000000000000000000000000000000000000000000000000000000000000613ba2565b555160028152a1005b8061050d61054a9286613ba2565b896104e3565b84517fb9a621e1000000000000000000000000000000000000000000000000000000008152fd5b505f610442565b60248360028651917f3db738da000000000000000000000000000000000000000000000000000000008352820152fd5b8260207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261015557803567ffffffffffffffff811161015557610153916105fa91369101610a73565b9033611143565b5034610155575f7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101555760209073ffffffffffffffffffffffffffffffffffffffff7f2b50211693ec91bcfe327771928b74a8f475c508d53e86fca4153bcf0f0e877654169051908152f35b5034610155575f7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101555760209051608c8152f35b5034610155575f7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610155576020905173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b5034610155575f7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610155576020905173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b5034610155575f7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610155576020905160108152f35b503461015557807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610155576107f7610a50565b906024359081151580920361015557335f52600260205273ffffffffffffffffffffffffffffffffffffffff815f20931692835f52602052805f207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0081541660ff8416179055519081527f2738289d9deecdc30eb8ffc42876633caecca1ffa166e4efa89f408e17373a1a60203392a3005b5034610155575f7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101555760209073ffffffffffffffffffffffffffffffffffffffff7f5b5cbfa852c5bd03e540eba853f8faf28a604a4d82bee1091096bfaea14d08c354915191168152f35b503461015557807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261015557610931610a50565b9060243573ffffffffffffffffffffffffffffffffffffffff80821680920361015557602093165f5260028352815f20905f52825260ff815f20541690519015158152f35b5034610155575f7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610155576020905173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b34610155575f7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101555760209073ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b6004359073ffffffffffffffffffffffffffffffffffffffff8216820361015557565b9181601f840112156101555782359167ffffffffffffffff8311610155576020808501948460051b01011161015557565b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc60609101126101555773ffffffffffffffffffffffffffffffffffffffff90600435828116810361015557916024359081168103610155579060443590565b610bbb9092919261010060c061016083019560ff815116845260208101515f0b6020850152604081015160408501526060810151606085015260808101516080850152610b8560a082015160a0860190604080918051845273ffffffffffffffffffffffffffffffffffffffff602082015116602085015201511515910152565b0151910190604080918051845273ffffffffffffffffffffffffffffffffffffffff602082015116602085015201511515910152565b565b6060810190811067ffffffffffffffff821117610bd957604052565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b60e0810190811067ffffffffffffffff821117610bd957604052565b6101c0810190811067ffffffffffffffff821117610bd957604052565b67ffffffffffffffff8111610bd957604052565b6080810190811067ffffffffffffffff821117610bd957604052565b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff821117610bd957604052565b60405190610cbd82610bbd565b5f6040838281528260208201520152565b60405190610cdb82610c06565b815f81525f60208201525f60408201525f60608201525f6080820152610cff610cb0565b60a082015260c0610d0e610cb0565b910152565b90610e7b90610d20610cce565b5073ffffffffffffffffffffffffffffffffffffffff8093165f526020936001855260409184835f2091165f528552815f20905f528452805f20610d62610cce565b50815193610d6f85610c22565b81549260ff8416968787528460081c5f0b9081818901528767ffffffffffffffff8760101c169485858301528760501c60070b968760608401527fffffffffffff00000000000000000000000000000000000000000000000000008960901c60070b998a60808601521660a08401526001810154828116918260c086015265ffffffffffff92838360a01c168060e0880152610140600260ff8660d01c16151594856101008b01527fffffffffff0000000000000000000000000000000000000000000000000000008097166101208b0152015497019e8f87891690526101a0610160820195878a60a01c16875261018083019960ff8160d01c1615158b521691015289519d8e610bbd565b8d52868d0152878c015251169951169051151590845199610e9b8b610bbd565b8a52828a015283890152825198610eb18a610c06565b89528801528601526060850152608084015260a083015260c082015290565b5190811515820361015557565b9181610ee99293610d13565b60409081810151156110435773ffffffffffffffffffffffffffffffffffffffff80938351907f7dc0d1d0000000000000000000000000000000000000000000000000000000008252816004816020958694165afa8015611039575f90611002575b6060915060048551809781937f52bfe789000000000000000000000000000000000000000000000000000000008352165afa928315610ff9575f93610f9a575b5050610f979250613c5c565b90565b909192506060843d606011610ff1575b81610fb760609383610c6f565b8101031261015557610fe581610f9795815194610fd386610bbd565b81518652808201519086015201610ed0565b90820152905f80610f8b565b3d9150610faa565b513d5f823e3d90fd5b508181813d8311611032575b6110188183610c6f565b810103126101555751848116810361015557606090610f4b565b503d61100e565b84513d5f823e3d90fd5b5050505f90565b67ffffffffffffffff8111610bd957601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01660200190565b519073ffffffffffffffffffffffffffffffffffffffff8216820361015557565b5f5b8381106110b65750505f910152565b81810151838201526020016110a7565b81601f820112156101555780516110dc8161104a565b926110ea6040519485610c6f565b8184526020828401011161015557610f9791602080850191016110a5565b91908260609103126101555760405161112081610bbd565b6040610d0e8183958051855261113860208201611084565b602086015201610ed0565b919073ffffffffffffffffffffffffffffffffffffffff831633141580613b6b575b613b41575f5b82811061127857505050504780471061121a575f80808093335af161118e613d35565b501561119657565b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d617920686176652072657665727465640000000000006064820152fd5b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e63650000006044820152fd5b600581811b8301357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc18436030181121561015557830160408136031261015557604051906040820182811067ffffffffffffffff821117610bd957604052600b9080358281101561015557835260208101359067ffffffffffffffff821161015557019136601f840112156101555782356113128161104a565b936113206040519586610c6f565b818552366020838301011161015557815f926020809301838801378501015260208101928352805182811015613b14576001036116a3575050905051908151820161018083602083019203126101555761137c60208401611084565b9260408101519360608201519460808301519260a0810151916113bc6113a460c08401610ed0565b966101406113b58260e08701611108565b9401611108565b946040517f032bb44300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8616600482015260208160248173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000165afa908115611614575f91611669575b501561163f5761148461147f307f0000000000000000000000000000000000000000000000000000000000000000614378565b613fdc565b938c88600161149284614036565b14611625575b5050602084015173ffffffffffffffffffffffffffffffffffffffff168061161f575073ffffffffffffffffffffffffffffffffffffffff602088015116915b73ffffffffffffffffffffffffffffffffffffffff87163b156101555773ffffffffffffffffffffffffffffffffffffffff9a8b948f60046040519e8f927f977b1f5f0000000000000000000000000000000000000000000000000000000084521691015260248d015260448c015260648b015260848a01525f60a48a01521660c48801525f8760e4818373ffffffffffffffffffffffffffffffffffffffff88165af19485156116145764e8d4a510006115cf6115e09460019a6115e699611605575b506115ca61147f307f0000000000000000000000000000000000000000000000000000000000000000614378565b614071565b0590816115ec575b5050828a614089565b87614089565b0161116b565b6115f86115fe92614594565b8c613d64565b5f806115d7565b61160e90610c3f565b5f61159c565b6040513d5f823e3d90fd5b916114d8565b6116389161163284614594565b90613e21565b8c88611498565b60046040517f47b7c1b0000000000000000000000000000000000000000000000000000000008152fd5b90506020813d60201161169b575b8161168460209383610c6f565b810103126101555761169590610ed0565b5f61144c565b3d9150611677565b805182811015613b1457600903611a1e57505051805181019291506101c081840312610155576116d560208201611084565b926101807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08383030112610155576040519161171083610c06565b60408101518352606081015160208401526080810151604084015261173760a08201611084565b606084015261174860c08201611084565b608084015260e081015160a084015260c07fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff2082840301126101555760405160c0810181811067ffffffffffffffff821117610bd9576040526117ad6101008301611084565b81526117bc6101208301611084565b60208201526117ce6101408301611084565b6040820152610160820151606082015261018082015160808201526101a082015160a082015260c08401526101c08101519167ffffffffffffffff8311610155576118209260208092019201016110c6565b906040517f032bb44300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8516600482015260208160248173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000165afa908115611614575f916119e4575b501561163f5773ffffffffffffffffffffffffffffffffffffffff84163b156101555760c09373ffffffffffffffffffffffffffffffffffffffff5f818a6119bb839760a06040519b8c998a9889967f736a01df0000000000000000000000000000000000000000000000000000000088521660048701528051602487015260208101516044870152604081015160648701528660608201511660848701528660808201511660a48701528281015160c487015201518581511660e486015285602082015116610104860152856040820151166101248601526060810151610144860152608081015161016486015201516101848401526101c06101a48401526101c4830190613cf2565b0393165af1918215611614576001926119d5575b506115e6565b6119de90610c3f565b5f6119cf565b90506020813d602011611a16575b816119ff60209383610c6f565b8101031261015557611a1090610ed0565b5f6118b0565b3d91506119f2565b805182811015613b1457600203611c975750509050519081805160a0918291810103126101555760208301519073ffffffffffffffffffffffffffffffffffffffff8216820361015557604084015193611a8360608201519260808301519201610ed0565b926040517f032bb44300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8216600482015260208160248173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000165afa908115611614575f91611c5d575b501561163f5785611c4d575b611b49307f0000000000000000000000000000000000000000000000000000000000000000614378565b9273ffffffffffffffffffffffffffffffffffffffff82163b156101555760848a5f73ffffffffffffffffffffffffffffffffffffffff819581956040519c8d9788967fd2c3aaf200000000000000000000000000000000000000000000000000000000885216600487015260248601526044850152876064850152165af194851561161457600195611c3e575b50611bfe57505f905b81611bed575b50506115e6565b611bf79187613d64565b5f80611be6565b611c3764e8d4a5100091611c32307f0000000000000000000000000000000000000000000000000000000000000000614378565b613db0565b0490611be0565b611c4790610c3f565b5f611bd7565b611c5884878b613e21565b611b1f565b90506020813d602011611c8f575b81611c7860209383610c6f565b8101031261015557611c8990610ed0565b5f611b13565b3d9150611c6b565b805182811015613b14576003036123f857505090505180518101818103906101808212610155576101607fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0611cee60208601611084565b9301126101555760405192611d0284610c06565b604081015160ff81168103610155578452606081015191825f0b830361015557602061014091611d6a94828801526080840151604088015260a0840151606088015260c08401516080880152611d5d82820160e08601611108565b60a0880152019101611108565b60c08301526040517f032bb44300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8216600482015260208160248173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000165afa908115611614575f916123be575b501561163f5760408201511561234c5760208201515f0b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81141590816123b2575b5061234c5760ff82511660038111908115612376575b5061234c5773ffffffffffffffffffffffffffffffffffffffff86165f52600160205260405f2073ffffffffffffffffffffffffffffffffffffffff82165f5260205260405f205f547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff811461231f57600101805f555f5260205260405f2060ff80845116116122f557607f60208401515f0b136122f5577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8060208401515f0b126122f5576002611f2a60408501516147fd565b146122f5576002611f3e60608501516146a7565b146122f557611f506060840151614651565b156122f5576002611f6460808501516146a7565b146122f557611f766080840151614651565b156122f5576002611f8b60a085015151614818565b146122f5576002611fa060c085015151614818565b146122f557825160ff166020840151604085015160608601519260808701519460a088015194602086015173ffffffffffffffffffffffffffffffffffffffff1696865165ffffffffffff16966040015115159160c08b015195602087015173ffffffffffffffffffffffffffffffffffffffff1695875165ffffffffffff16976040015115159860405161203481610c22565b828152815f0b602082015267ffffffffffffffff841660408201528460070b60608201528560070b608082015260a081015f90528c60c08201528b60e08201528661010082015261012081015f905288610140820152896101608201528a6101808201526101a0015f905260081b61ff0016179060101b69ffffffffffffffff000016179060501b71ffffffffffffffff0000000000000000000016179060901b79ffffffffffffffff0000000000000000000000000000000000001617825560018201957fffffffffffffffffffffffff000000000000000000000000000000000000000097888854161787556121729087907fffffffffffff000000000000ffffffffffffffffffffffffffffffffffffffff79ffffffffffff000000000000000000000000000000000000000083549260a01b169116179055565b85547fffffffffff00ffffffffffffffffffffffffffffffffffffffffffffffffffff1690151560d01b7aff0000000000000000000000000000000000000000000000000000161785557affffffffffffffffffffffffffffffffffffffffffffffffffffff94858154169055600201948554161784556122399084907fffffffffffff000000000000ffffffffffffffffffffffffffffffffffffffff79ffffffffffff000000000000000000000000000000000000000083549260a01b169116179055565b82547fffffffffff00ffffffffffffffffffffffffffffffffffffffffffffffffffff1690151560d01b7aff00000000000000000000000000000000000000000000000000001617825581541690555f54916040519173ffffffffffffffffffffffffffffffffffffffff16918073ffffffffffffffffffffffffffffffffffffffff8916926122c99082610b04565b037fa9dacd70712b5d6af26b24f20002f840b398fda933ddeb01bfe74d8385485f0c91a46001906115e6565b60046040517ff3469aa7000000000000000000000000000000000000000000000000000000008152fd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b60046040517fb6befb58000000000000000000000000000000000000000000000000000000008152fd5b600391501480612387575b5f611e56565b50612395608083015161468f565b600281149081156123a7575b50612381565b60019150145f6123a1565b6001915014155f611e40565b90506020813d6020116123f0575b816123d960209383610c6f565b81010312610155576123ea90610ed0565b5f611dfe565b3d91506123cc565b805182811015613b14576004036124d1575050905051906040828051810103126101555781604061242d602060019501611084565b91015173ffffffffffffffffffffffffffffffffffffffff87165f528360205273ffffffffffffffffffffffffffffffffffffffff60405f20921691825f5260205260405f20815f526020525f600260408220828155828782015501556040519081527fd23ac4476ccf3eeb78c76d4b7bb113597bcd16c15d47656627ea6221d685ad73602073ffffffffffffffffffffffffffffffffffffffff891692a36115e6565b805182811015613b1457840361348d575050905051906060828051810103126101555761250060208301611084565b606061250e60408501611084565b930151612532818573ffffffffffffffffffffffffffffffffffffffff8516610edd565b1561346357612558818573ffffffffffffffffffffffffffffffffffffffff8516610d13565b60405161256481610c53565b5f81527f000000000000000000000000000000000000000000000000000000000000000060208201525f60408201527f0000000000000000000000000000000000000000000000000000000000000000606082015260408201516040519073ffffffffffffffffffffffffffffffffffffffff8616602083015273ffffffffffffffffffffffffffffffffffffffff8816604083015260608201526060815261260c81610c53565b60405180602081011067ffffffffffffffff602083011117610bd957602081016040525f81525f60208201528251602084015190156001171561231f57612665670de0b6b3a764000091612660489161417e565b61419b565b049260606040820151910151915190608c8201821161231f577f0fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff608c830116608c83010361231f57604051917ff5d6ded7000000000000000000000000000000000000000000000000000000008352602083600481606c5afa928315611614575f93613425575b50670de0b6b3a76400009361271c856127156127229695612660608c612660970160041b61417e565b049161417e565b9061445e565b049061272e828461445e565b600460a073ffffffffffffffffffffffffffffffffffffffff7f2b50211693ec91bcfe327771928b74a8f475c508d53e86fca4153bcf0f0e87765416604051928380927ffeaf968c0000000000000000000000000000000000000000000000000000000082525afa908115611614575f916133d8575b50670de0b6b3a7640000810290808205670de0b6b3a7640000149015171561231f575f6305f5e1008205126133a157670de0b6b3a7640000916305f5e1006127ed92059061419b565b046060828051810103126101555761280760208301611084565b90606061281660408501611084565b930151908061333a575073ffffffffffffffffffffffffffffffffffffffff9161285a93612855925f905b8082101561333057509384925b16906145a3565b6141ae565b9061288782337f5b5cbfa852c5bd03e540eba853f8faf28a604a4d82bee1091096bfaea14d08c354613dbd565b604051925f84525f60208501526040840152606083015260808201527ffa0333956d06e335c550bd5fc4ac9c003c6545e371331b1071fa4d5d8519d6c160a03392a273ffffffffffffffffffffffffffffffffffffffff85163b15610155576040517f6a256b2900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff841660048201525f816024818373ffffffffffffffffffffffffffffffffffffffff8b165af1801561161457613321575b506040517f6e19368000000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff841660048201526101808160248173ffffffffffffffffffffffffffffffffffffffff8a165afa908115611614575f91613250575b50604051917f55f5751000000000000000000000000000000000000000000000000000000000835273ffffffffffffffffffffffffffffffffffffffff8516600484015260808360248173ffffffffffffffffffffffffffffffffffffffff8b165afa928315611614575f936131ef575b5081518352612a466020840151614482565b612a69612a566060850151614482565b612a636080860151614482565b90614071565b905f828201928312911290801582169115161761231f57612a89906144dd565b91612a976040850151614482565b612ab4612aa760a0840151614482565b612a6360c0850151614482565b905f828201928312911290801582169115161761231f57612ad4906144dd565b90612b01612ae56060870151614482565b91612a63610100612af960e0840151614482565b920151614482565b80808301125f831290801582169115161761231f57612b2091016144dd565b606085015260408401528160208401525f9160ff825116156131a3575b50600160ff82511614613159575b600260ff8251161461310f575b600360ff825116146130ca575b6020830151606060408501519401519360c060a0840151930151946040517f032bb44300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8b16600482015260208160248173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000165afa908115611614575f91613090575b501561163f57612c4261147f307f0000000000000000000000000000000000000000000000000000000000000000614378565b946001612c4e82614036565b14612e36575b602085015173ffffffffffffffffffffffffffffffffffffffff1680612e30575073ffffffffffffffffffffffffffffffffffffffff602088015116915b73ffffffffffffffffffffffffffffffffffffffff8c163b156101555773ffffffffffffffffffffffffffffffffffffffff93604051957f977b1f5f000000000000000000000000000000000000000000000000000000008752858c16600488015260248701526044860152606485015260848401525f60a48401521660c48201525f8160e4818373ffffffffffffffffffffffffffffffffffffffff8d165af197881561161457612dd67f889f0643d669fbac53cbc7d1826992b9bce1fab5e9644034cffb9c0137fe9dd195612dcd73ffffffffffffffffffffffffffffffffffffffff9564e8d4a51000612dbc60209960019f988a9961160557506115ca61147f307f0000000000000000000000000000000000000000000000000000000000000000614378565b0580612e13575b5084868c16614089565b82848a16614089565b8187165f5288845260405f208282165f52845260405f20865f5284525f600260408220828155828c820155015560405195865216941692a36115e6565b612e22612855612e2a92614594565b878d166141c8565b5f612dc3565b91612c92565b612e83612e4282614594565b6128558173ffffffffffffffffffffffffffffffffffffffff8d167f0000000000000000000000000000000000000000000000000000000000000000614518565b73ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001615801561301e575b15612f5e5773ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001690813b15610155575f916024839260405194859384927fa0712d6800000000000000000000000000000000000000000000000000000000845260048401525af1801561161457612f4f575b50612c54565b612f5890610c3f565b5f612f49565b73ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000163b15610155576040517f13bac82000000000000000000000000000000000000000000000000000000000815260048101919091523060248201525f81604481837f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff165af1801561161457612f4f5750612c54565b50600261308a61308473ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000167f0000000000000000000000000000000000000000000000000000000000000000614378565b83614831565b14612ec2565b90506020813d6020116130c2575b816130ab60209383610c6f565b81010312610155576130bc90610ed0565b5f612c0f565b3d915061309e565b9050608081015160016130dc82614651565b0361310a57507f80000000000000000000000000000000000000000000000000000000000000005b90612b65565b613104565b60808101805161312657505f5b6060840152612b58565b6131336060850151614482565b905180808301125f831290801582169115161761231f5761315491016144dd565b61311c565b60808101805161317057505f5b6040840152612b4b565b61317d6040850151614482565b905180808301125f831290801582169115161761231f5761319e91016144dd565b613166565b60808201908151155f146131c05750505f5b60208401525f612b3d565b6131c990614482565b905180808301125f831290801582169115161761231f576131ea91016144dd565b6131b5565b9092506080813d608011613248575b8161320b60809383610c6f565b810103126101555760606040519161322283610c53565b80518352602081015160208401526040810151604084015201516060820152915f612a34565b3d91506131fe565b9050610180813d61018011613319575b8161326e6101809383610c6f565b8101031261015557604051908161018081011067ffffffffffffffff61018084011117610bd9576101808201604052805182526020810151602083015260408101516040830152606081015160608301526080810151608083015260a081015160a083015260c0808201519083015260e0808201519083015261010080820151908301526101208082015190830152610140808201519083015261016080910151908201525f6129c3565b3d9150613260565b61332a90610c3f565b5f612952565b905093849261284e565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff819392930190811161231f5764e8d4a5100090049060018201821161231f5761285a9373ffffffffffffffffffffffffffffffffffffffff936001612855940190612841565b6024906305f5e100604051917f501f289e000000000000000000000000000000000000000000000000000000008352056004820152fd5b905060a0813d60a01161341d575b816133f360a09383610c6f565b81010312610155576134048161446b565b5061341660806020830151920161446b565b505f6127a4565b3d91506133e6565b9250906020833d60201161345b575b8161344160209383610c6f565b810103126101555791519190670de0b6b3a76400006126ec565b3d9150613434565b60046040517f6f462962000000000000000000000000000000000000000000000000000000008152fd5b805182811015613b14576006036137855750505190815182019160c081840312610155576134bd60208201611084565b9160408201519260608301519367ffffffffffffffff85116101555760208601603f86860101121561015557602085850101519267ffffffffffffffff8411610bd95783901b94604051936135156020880186610c6f565b845260208401809660208901604082858a0101011161015557604083880101915b604082858a0101018310613775575050505060808401519560a085015167ffffffffffffffff81116101555761357960c0916020806135809501918901016110c6565b9501610ed0565b946135ab307f0000000000000000000000000000000000000000000000000000000000000000614378565b9473ffffffffffffffffffffffffffffffffffffffff84163b15610155576040517f1e298b90000000000000000000000000000000000000000000000000000000008152606060048201529451606486018190528593926084850192915f905b808210613759575050509173ffffffffffffffffffffffffffffffffffffffff8461366a81945f989660249d8e8501527ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc848303016044850152613cf2565b0393165af1908161374a575b506136e65750613684613d35565b906136935750506001906115e6565b60405191602083019083821067ffffffffffffffff8311176136bb57506040525f8252614409565b7f4e487b71000000000000000000000000000000000000000000000000000000005f5260416004525ffd5b6001939250613745915061371e90611c32307f0000000000000000000000000000000000000000000000000000000000000000614378565b337f0000000000000000000000000000000000000000000000000000000000000000613dbd565b6115e6565b61375390610c3f565b5f613676565b825185528896506020948501949092019160019091019061360b565b8251815260209283019201613536565b80919293505182811015613b145760080361395d57505051602081805181010312610155576137cb602073ffffffffffffffffffffffffffffffffffffffff9201611084565b16906040517f032bb4430000000000000000000000000000000000000000000000000000000090818152836004820152602490602081838173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000165afa908115611614575f91613923575b50159182613885575b505061163f576137456001927f0000000000000000000000000000000000000000000000000000000000000000613ba2565b602091925060405192839182528560048301528173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000165afa908115611614575f916138e9575b50155f80613853565b90506020813d60201161391b575b8161390460209383610c6f565b810103126101555761391590610ed0565b5f6138e0565b3d91506138f7565b90506020813d602011613955575b8161393e60209383610c6f565b810103126101555761394f90610ed0565b5f61384a565b3d9150613931565b5190811015613b1457600a14613977575b506001906115e6565b51906040828051810103126101555761399e604061399760208501611084565b9301610ed0565b9173ffffffffffffffffffffffffffffffffffffffff604051917f032bb4430000000000000000000000000000000000000000000000000000000083521690816004820152602490602081838173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000165afa908115611614575f91613ada575b501561163f575f91602091604051809481937f6ebc51e100000000000000000000000000000000000000000000000000000000835273ffffffffffffffffffffffffffffffffffffffff8c1660048401525af1908115611614575f91613aa7575b50600192613aa19187613d64565b9061396e565b90506020813d602011613ad2575b81613ac260209383610c6f565b8101031261015557516001613a93565b3d9150613ab5565b90506020813d602011613b0c575b81613af560209383610c6f565b8101031261015557613b0690610ed0565b5f613a32565b3d9150613ae8565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602160045260245ffd5b60046040517f42ecdedb000000000000000000000000000000000000000000000000000000008152fd5b5073ffffffffffffffffffffffffffffffffffffffff83165f52600260205260405f20335f5260205260ff60405f20541615611165565b90602090604473ffffffffffffffffffffffffffffffffffffffff915f8360405196879586947f095ea7b30000000000000000000000000000000000000000000000000000000086521660048501527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6024850152165af1801561161457613c275750565b6020813d602011613c54575b81613c4060209383610c6f565b8101031261015557613c5190610ed0565b50565b3d9150613c33565b604082015115613cec5760208101515f0b60018114613cc9577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff14613ca15750505f90565b60606020613cb4930151910151906146c2565b8015908115613cc1575090565b600191501490565b5060606020613cdd930151910151906146c2565b60028114908115613cc1575090565b50505f90565b907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f602093613d2e815180928187528780880191016110a5565b0116010190565b3d15613d5f573d90613d468261104a565b91613d546040519384610c6f565b82523d5f602084013e565b606090565b909115613d7d57613d77610bbb926141ae565b906141c8565b613d89610bbb926141ae565b907f0000000000000000000000000000000000000000000000000000000000000000613dbd565b9190820391821161231f57565b91610bbb9273ffffffffffffffffffffffffffffffffffffffff9182604051947fa9059cbb000000000000000000000000000000000000000000000000000000006020870152166024850152604484015260448352613e1b83610c53565b166146d3565b909115613fa9579061285581613e57937f0000000000000000000000000000000000000000000000000000000000000000614518565b73ffffffffffffffffffffffffffffffffffffffff807f00000000000000000000000000000000000000000000000000000000000000001680158015613f6d575b15613f1657507f00000000000000000000000000000000000000000000000000000000000000001690813b15610155575f916024839260405194859384927fa0712d6800000000000000000000000000000000000000000000000000000000845260048401525af1801561161457613f0d5750565b610bbb90610c3f565b8091503b15610155576040517f13bac82000000000000000000000000000000000000000000000000000000000815260048101929092523060248301525f908290604490829084905af1801561161457613f0d5750565b506002613fa3613f9d837f0000000000000000000000000000000000000000000000000000000000000000614378565b85614831565b14613e98565b613fb5610bbb926141ae565b907f0000000000000000000000000000000000000000000000000000000000000000614518565b7f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81116140065790565b602490604051907ea07eb50000000000000000000000000000000000000000000000000000000082526004820152fd5b5f811361406b575f13614047575f90565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff90565b50600190565b81810392915f13801582851316918412161761231f57565b91908151801561417857816140c2606092867f7bdf48e07cd0f3669b6ef1a2004307c0c28e2c22d70ae7a6d8e1ea1b42690591956145a3565b60408401511561414b576140f473ffffffffffffffffffffffffffffffffffffffff602086015116613d7786516141ae565b73ffffffffffffffffffffffffffffffffffffffff80916141446040518097604080918051845273ffffffffffffffffffffffffffffffffffffffff602082015116602085015201511515910152565b16941692a3565b61417373ffffffffffffffffffffffffffffffffffffffff602086015116613d8986516141ae565b6140f4565b50505050565b90670de0b6b3a76400009182810292818404149015171561231f57565b8181029291811591840414171561231f57565b64e8d4a510009081810291818304149015171561231f5790565b73ffffffffffffffffffffffffffffffffffffffff807f00000000000000000000000000000000000000000000000000000000000000001680158015614339575b156142ca5750807f000000000000000000000000000000000000000000000000000000000000000016803b15610155575f80916024604051809481937fdb006a750000000000000000000000000000000000000000000000000000000083528960048401525af18015611614576142bb575b503090821603614289575050565b64e8d4a51000610bbb9204907f0000000000000000000000000000000000000000000000000000000000000000613dbd565b6142c490610c3f565b5f61427b565b80939291503b15610155576040517f7647691d000000000000000000000000000000000000000000000000000000008152600481019290925273ffffffffffffffffffffffffffffffffffffffff166024820152905f908290604490829084905af1801561161457613f0d5750565b50600261437261436c612855847f0000000000000000000000000000000000000000000000000000000000000000614378565b86614831565b14614209565b90602090602473ffffffffffffffffffffffffffffffffffffffff918260405195869485937f70a08231000000000000000000000000000000000000000000000000000000008552166004840152165afa908115611614575f916143da575090565b90506020813d602011614401575b816143f560209383610c6f565b81010312610155575190565b3d91506143e8565b80519091901561441c5750805190602001fd5b61445a906040519182917f08c379a0000000000000000000000000000000000000000000000000000000008352602060048401526024830190613cf2565b0390fd5b9190820180921161231f57565b519069ffffffffffffffffffff8216820361015557565b7f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81116144ac5790565b602490604051907feecaa25d0000000000000000000000000000000000000000000000000000000082526004820152fd5b5f81126144e75790565b602490604051907fb02ef0870000000000000000000000000000000000000000000000000000000082526004820152fd5b9173ffffffffffffffffffffffffffffffffffffffff9081604051937f23b872dd00000000000000000000000000000000000000000000000000000000602086015216602484015230604484015260648301526064825260a082019282841067ffffffffffffffff851117610bd957610bbb93604052166146d3565b5f811261459e5790565b5f0390565b6145c473ffffffffffffffffffffffffffffffffffffffff80921693614482565b92803b15610155575f928360c49260405196879586947f91eece280000000000000000000000000000000000000000000000000000000086521660048501527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8060248601528060448601526064850152820360848401528160a48401525af1801561161457613f0d5750565b7fffffffffffffffffffffffffffffffffffffffffffffffff800000000000000090818113614688571261468457600190565b5f90565b5050600290565b5f81136146a1575f1361468457600190565b50600290565b677fffffffffffffff90818113614688571261468457600190565b818113614688571261468457600190565b73ffffffffffffffffffffffffffffffffffffffff16604051604081019181831067ffffffffffffffff841117610bd95761474f926040525f806020958685527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c656487860152868151910182855af1614749613d35565b91614842565b80518061475b57505050565b8183918101031261015557816147719101610ed0565b156147795750565b608490604051907f08c379a00000000000000000000000000000000000000000000000000000000082526004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152fd5b67ffffffffffffffff90818111614688571061468457600190565b65ffffffffffff90818111614688571061468457600190565b818111614688571061468457600190565b919290156148bd5750815115614856575090565b3b1561485f5790565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152fd5b8261440956fea26469706673582212209e59e27313f312c535d18f691cf5f048b1b6771c2b1a23998e888d69a6327fee64736f6c63430008180033",
  "devdoc": {
    "details": "Additionally incentivizes keepers with L1 rollup fees according to the Arbitrum spec",
    "kind": "dev",
    "methods": {
      "canExecuteOrder(address,address,uint256)": {
        "params": {
          "account": "Account to get open oder of",
          "market": "Market to get open order in",
          "nonce": "UID of order"
        },
        "returns": {
          "_0": "canFill Whether the order can be executed"
        }
      },
      "initialize(address)": {
        "params": {
          "ethOracle_": "Chainlink ETH/USD oracle address"
        }
      },
      "invoke((uint8,bytes)[])": {
        "params": {
          "invocations": "List of actions to execute in order"
        }
      },
      "invoke(address,(uint8,bytes)[])": {
        "params": {
          "account": "Account to perform invocations for",
          "invocations": "List of actions to execute in order"
        }
      },
      "orders(address,address,uint256)": {
        "params": {
          "account": "Account to get open oder of",
          "market": "Market to get open order in",
          "nonce": "UID of order"
        }
      },
      "updateOperator(address,bool)": {
        "params": {
          "newEnabled": "The new status of the operator",
          "operator": "The operator to update"
        }
      }
    },
    "title": "MultiInvoker_Arbitrum",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "canExecuteOrder(address,address,uint256)": {
        "notice": "Returns whether an order can be executed"
      },
      "initialize(address)": {
        "notice": "Initialize the contract"
      },
      "invoke((uint8,bytes)[])": {
        "notice": "entry to perform invocations for msg.sender"
      },
      "invoke(address,(uint8,bytes)[])": {
        "notice": "entry to perform invocations for account"
      },
      "orders(address,address,uint256)": {
        "notice": "View function to get order state"
      },
      "updateOperator(address,bool)": {
        "notice": "Updates the status of an operator for the caller"
      }
    },
    "notice": "Arbitrum Kept MultiInvoker implementation.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 4434,
        "contract": "@equilibria/perennial-v2-extensions/contracts/MultiInvoker_Arbitrum.sol:MultiInvoker_Arbitrum",
        "label": "latestNonce",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 4445,
        "contract": "@equilibria/perennial-v2-extensions/contracts/MultiInvoker_Arbitrum.sol:MultiInvoker_Arbitrum",
        "label": "_orders",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_contract(IMarket)23543,t_mapping(t_uint256,t_struct(TriggerOrderStorage)6589_storage)))"
      },
      {
        "astId": 4452,
        "contract": "@equilibria/perennial-v2-extensions/contracts/MultiInvoker_Arbitrum.sol:MultiInvoker_Arbitrum",
        "label": "operators",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes5": {
        "encoding": "inplace",
        "label": "bytes5",
        "numberOfBytes": "5"
      },
      "t_bytes6": {
        "encoding": "inplace",
        "label": "bytes6",
        "numberOfBytes": "6"
      },
      "t_contract(IMarket)23543": {
        "encoding": "inplace",
        "label": "contract IMarket",
        "numberOfBytes": "20"
      },
      "t_int64": {
        "encoding": "inplace",
        "label": "int64",
        "numberOfBytes": "8"
      },
      "t_int8": {
        "encoding": "inplace",
        "label": "int8",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_contract(IMarket)23543,t_mapping(t_uint256,t_struct(TriggerOrderStorage)6589_storage)))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(contract IMarket => mapping(uint256 => struct TriggerOrderStorage)))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_contract(IMarket)23543,t_mapping(t_uint256,t_struct(TriggerOrderStorage)6589_storage))"
      },
      "t_mapping(t_contract(IMarket)23543,t_mapping(t_uint256,t_struct(TriggerOrderStorage)6589_storage))": {
        "encoding": "mapping",
        "key": "t_contract(IMarket)23543",
        "label": "mapping(contract IMarket => mapping(uint256 => struct TriggerOrderStorage))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_struct(TriggerOrderStorage)6589_storage)"
      },
      "t_mapping(t_uint256,t_struct(TriggerOrderStorage)6589_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct TriggerOrderStorage)",
        "numberOfBytes": "32",
        "value": "t_struct(TriggerOrderStorage)6589_storage"
      },
      "t_struct(StoredTriggerOrder)6585_storage": {
        "encoding": "inplace",
        "label": "struct StoredTriggerOrder",
        "members": [
          {
            "astId": 6558,
            "contract": "@equilibria/perennial-v2-extensions/contracts/MultiInvoker_Arbitrum.sol:MultiInvoker_Arbitrum",
            "label": "side",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 6560,
            "contract": "@equilibria/perennial-v2-extensions/contracts/MultiInvoker_Arbitrum.sol:MultiInvoker_Arbitrum",
            "label": "comparison",
            "offset": 1,
            "slot": "0",
            "type": "t_int8"
          },
          {
            "astId": 6562,
            "contract": "@equilibria/perennial-v2-extensions/contracts/MultiInvoker_Arbitrum.sol:MultiInvoker_Arbitrum",
            "label": "fee",
            "offset": 2,
            "slot": "0",
            "type": "t_uint64"
          },
          {
            "astId": 6564,
            "contract": "@equilibria/perennial-v2-extensions/contracts/MultiInvoker_Arbitrum.sol:MultiInvoker_Arbitrum",
            "label": "price",
            "offset": 10,
            "slot": "0",
            "type": "t_int64"
          },
          {
            "astId": 6566,
            "contract": "@equilibria/perennial-v2-extensions/contracts/MultiInvoker_Arbitrum.sol:MultiInvoker_Arbitrum",
            "label": "delta",
            "offset": 18,
            "slot": "0",
            "type": "t_int64"
          },
          {
            "astId": 6568,
            "contract": "@equilibria/perennial-v2-extensions/contracts/MultiInvoker_Arbitrum.sol:MultiInvoker_Arbitrum",
            "label": "__unallocated0__",
            "offset": 26,
            "slot": "0",
            "type": "t_bytes6"
          },
          {
            "astId": 6570,
            "contract": "@equilibria/perennial-v2-extensions/contracts/MultiInvoker_Arbitrum.sol:MultiInvoker_Arbitrum",
            "label": "interfaceFeeReceiver1",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 6572,
            "contract": "@equilibria/perennial-v2-extensions/contracts/MultiInvoker_Arbitrum.sol:MultiInvoker_Arbitrum",
            "label": "interfaceFeeAmount1",
            "offset": 20,
            "slot": "1",
            "type": "t_uint48"
          },
          {
            "astId": 6574,
            "contract": "@equilibria/perennial-v2-extensions/contracts/MultiInvoker_Arbitrum.sol:MultiInvoker_Arbitrum",
            "label": "interfaceFeeUnwrap1",
            "offset": 26,
            "slot": "1",
            "type": "t_bool"
          },
          {
            "astId": 6576,
            "contract": "@equilibria/perennial-v2-extensions/contracts/MultiInvoker_Arbitrum.sol:MultiInvoker_Arbitrum",
            "label": "__unallocated1__",
            "offset": 27,
            "slot": "1",
            "type": "t_bytes5"
          },
          {
            "astId": 6578,
            "contract": "@equilibria/perennial-v2-extensions/contracts/MultiInvoker_Arbitrum.sol:MultiInvoker_Arbitrum",
            "label": "interfaceFeeReceiver2",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 6580,
            "contract": "@equilibria/perennial-v2-extensions/contracts/MultiInvoker_Arbitrum.sol:MultiInvoker_Arbitrum",
            "label": "interfaceFeeAmount2",
            "offset": 20,
            "slot": "2",
            "type": "t_uint48"
          },
          {
            "astId": 6582,
            "contract": "@equilibria/perennial-v2-extensions/contracts/MultiInvoker_Arbitrum.sol:MultiInvoker_Arbitrum",
            "label": "interfaceFeeUnwrap2",
            "offset": 26,
            "slot": "2",
            "type": "t_bool"
          },
          {
            "astId": 6584,
            "contract": "@equilibria/perennial-v2-extensions/contracts/MultiInvoker_Arbitrum.sol:MultiInvoker_Arbitrum",
            "label": "__unallocated2__",
            "offset": 27,
            "slot": "2",
            "type": "t_bytes5"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(TriggerOrderStorage)6589_storage": {
        "encoding": "inplace",
        "label": "struct TriggerOrderStorage",
        "members": [
          {
            "astId": 6588,
            "contract": "@equilibria/perennial-v2-extensions/contracts/MultiInvoker_Arbitrum.sol:MultiInvoker_Arbitrum",
            "label": "value",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(StoredTriggerOrder)6585_storage"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint48": {
        "encoding": "inplace",
        "label": "uint48",
        "numberOfBytes": "6"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}
